
testLoRa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007148  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08007208  08007208  00008208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072d0  080072d0  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  080072d0  080072d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d8  080072d8  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d8  080072d8  000082d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072dc  080072dc  000082dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080072e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000068  08007348  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08007348  00009308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ecd  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e5  00000000  00000000  00019f5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0001c648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b66  00000000  00000000  0001d4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ee8  00000000  00000000  0001e05e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001166d  00000000  00000000  00034f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c111  00000000  00000000  000465b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d26c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e78  00000000  00000000  000d2708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d6580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080071f0 	.word	0x080071f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080071f0 	.word	0x080071f0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	@ (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	@ (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f852 	bl	800030c <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			@ (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4699      	mov	r9, r3
 800027a:	0c03      	lsrs	r3, r0, #16
 800027c:	469c      	mov	ip, r3
 800027e:	0413      	lsls	r3, r2, #16
 8000280:	4647      	mov	r7, r8
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0404      	lsls	r4, r0, #16
 800028c:	0c24      	lsrs	r4, r4, #16
 800028e:	b580      	push	{r7, lr}
 8000290:	0007      	movs	r7, r0
 8000292:	0c10      	lsrs	r0, r2, #16
 8000294:	434b      	muls	r3, r1
 8000296:	4365      	muls	r5, r4
 8000298:	4341      	muls	r1, r0
 800029a:	4360      	muls	r0, r4
 800029c:	0c2c      	lsrs	r4, r5, #16
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	1824      	adds	r4, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	42a3      	cmp	r3, r4
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	@ 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4356      	muls	r6, r2
 80002b6:	0c23      	lsrs	r3, r4, #16
 80002b8:	042d      	lsls	r5, r5, #16
 80002ba:	0c2d      	lsrs	r5, r5, #16
 80002bc:	1989      	adds	r1, r1, r6
 80002be:	4463      	add	r3, ip
 80002c0:	0424      	lsls	r4, r4, #16
 80002c2:	1960      	adds	r0, r4, r5
 80002c4:	18c9      	adds	r1, r1, r3
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			@ (mov r8, r8)

080002d0 <__aeabi_d2uiz>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2200      	movs	r2, #0
 80002d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <__aeabi_d2uiz+0x38>)
 80002d6:	0004      	movs	r4, r0
 80002d8:	000d      	movs	r5, r1
 80002da:	f000 ffdb 	bl	8001294 <__aeabi_dcmpge>
 80002de:	2800      	cmp	r0, #0
 80002e0:	d104      	bne.n	80002ec <__aeabi_d2uiz+0x1c>
 80002e2:	0020      	movs	r0, r4
 80002e4:	0029      	movs	r1, r5
 80002e6:	f000 ff41 	bl	800116c <__aeabi_d2iz>
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	4b06      	ldr	r3, [pc, #24]	@ (8000308 <__aeabi_d2uiz+0x38>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	0020      	movs	r0, r4
 80002f2:	0029      	movs	r1, r5
 80002f4:	f000 fb9e 	bl	8000a34 <__aeabi_dsub>
 80002f8:	f000 ff38 	bl	800116c <__aeabi_d2iz>
 80002fc:	2380      	movs	r3, #128	@ 0x80
 80002fe:	061b      	lsls	r3, r3, #24
 8000300:	469c      	mov	ip, r3
 8000302:	4460      	add	r0, ip
 8000304:	e7f1      	b.n	80002ea <__aeabi_d2uiz+0x1a>
 8000306:	46c0      	nop			@ (mov r8, r8)
 8000308:	41e00000 	.word	0x41e00000

0800030c <__udivmoddi4>:
 800030c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800030e:	4657      	mov	r7, sl
 8000310:	464e      	mov	r6, r9
 8000312:	4645      	mov	r5, r8
 8000314:	46de      	mov	lr, fp
 8000316:	b5e0      	push	{r5, r6, r7, lr}
 8000318:	0004      	movs	r4, r0
 800031a:	000d      	movs	r5, r1
 800031c:	4692      	mov	sl, r2
 800031e:	4699      	mov	r9, r3
 8000320:	b083      	sub	sp, #12
 8000322:	428b      	cmp	r3, r1
 8000324:	d830      	bhi.n	8000388 <__udivmoddi4+0x7c>
 8000326:	d02d      	beq.n	8000384 <__udivmoddi4+0x78>
 8000328:	4649      	mov	r1, r9
 800032a:	4650      	mov	r0, sl
 800032c:	f000 ffda 	bl	80012e4 <__clzdi2>
 8000330:	0029      	movs	r1, r5
 8000332:	0006      	movs	r6, r0
 8000334:	0020      	movs	r0, r4
 8000336:	f000 ffd5 	bl	80012e4 <__clzdi2>
 800033a:	1a33      	subs	r3, r6, r0
 800033c:	4698      	mov	r8, r3
 800033e:	3b20      	subs	r3, #32
 8000340:	d434      	bmi.n	80003ac <__udivmoddi4+0xa0>
 8000342:	469b      	mov	fp, r3
 8000344:	4653      	mov	r3, sl
 8000346:	465a      	mov	r2, fp
 8000348:	4093      	lsls	r3, r2
 800034a:	4642      	mov	r2, r8
 800034c:	001f      	movs	r7, r3
 800034e:	4653      	mov	r3, sl
 8000350:	4093      	lsls	r3, r2
 8000352:	001e      	movs	r6, r3
 8000354:	42af      	cmp	r7, r5
 8000356:	d83b      	bhi.n	80003d0 <__udivmoddi4+0xc4>
 8000358:	42af      	cmp	r7, r5
 800035a:	d100      	bne.n	800035e <__udivmoddi4+0x52>
 800035c:	e079      	b.n	8000452 <__udivmoddi4+0x146>
 800035e:	465b      	mov	r3, fp
 8000360:	1ba4      	subs	r4, r4, r6
 8000362:	41bd      	sbcs	r5, r7
 8000364:	2b00      	cmp	r3, #0
 8000366:	da00      	bge.n	800036a <__udivmoddi4+0x5e>
 8000368:	e076      	b.n	8000458 <__udivmoddi4+0x14c>
 800036a:	2200      	movs	r2, #0
 800036c:	2300      	movs	r3, #0
 800036e:	9200      	str	r2, [sp, #0]
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2301      	movs	r3, #1
 8000374:	465a      	mov	r2, fp
 8000376:	4093      	lsls	r3, r2
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	2301      	movs	r3, #1
 800037c:	4642      	mov	r2, r8
 800037e:	4093      	lsls	r3, r2
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	e029      	b.n	80003d8 <__udivmoddi4+0xcc>
 8000384:	4282      	cmp	r2, r0
 8000386:	d9cf      	bls.n	8000328 <__udivmoddi4+0x1c>
 8000388:	2200      	movs	r2, #0
 800038a:	2300      	movs	r3, #0
 800038c:	9200      	str	r2, [sp, #0]
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <__udivmoddi4+0x8e>
 8000396:	601c      	str	r4, [r3, #0]
 8000398:	605d      	str	r5, [r3, #4]
 800039a:	9800      	ldr	r0, [sp, #0]
 800039c:	9901      	ldr	r1, [sp, #4]
 800039e:	b003      	add	sp, #12
 80003a0:	bcf0      	pop	{r4, r5, r6, r7}
 80003a2:	46bb      	mov	fp, r7
 80003a4:	46b2      	mov	sl, r6
 80003a6:	46a9      	mov	r9, r5
 80003a8:	46a0      	mov	r8, r4
 80003aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003ac:	4642      	mov	r2, r8
 80003ae:	469b      	mov	fp, r3
 80003b0:	2320      	movs	r3, #32
 80003b2:	1a9b      	subs	r3, r3, r2
 80003b4:	4652      	mov	r2, sl
 80003b6:	40da      	lsrs	r2, r3
 80003b8:	4641      	mov	r1, r8
 80003ba:	0013      	movs	r3, r2
 80003bc:	464a      	mov	r2, r9
 80003be:	408a      	lsls	r2, r1
 80003c0:	0017      	movs	r7, r2
 80003c2:	4642      	mov	r2, r8
 80003c4:	431f      	orrs	r7, r3
 80003c6:	4653      	mov	r3, sl
 80003c8:	4093      	lsls	r3, r2
 80003ca:	001e      	movs	r6, r3
 80003cc:	42af      	cmp	r7, r5
 80003ce:	d9c3      	bls.n	8000358 <__udivmoddi4+0x4c>
 80003d0:	2200      	movs	r2, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	9200      	str	r2, [sp, #0]
 80003d6:	9301      	str	r3, [sp, #4]
 80003d8:	4643      	mov	r3, r8
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0d8      	beq.n	8000390 <__udivmoddi4+0x84>
 80003de:	07fb      	lsls	r3, r7, #31
 80003e0:	0872      	lsrs	r2, r6, #1
 80003e2:	431a      	orrs	r2, r3
 80003e4:	4646      	mov	r6, r8
 80003e6:	087b      	lsrs	r3, r7, #1
 80003e8:	e00e      	b.n	8000408 <__udivmoddi4+0xfc>
 80003ea:	42ab      	cmp	r3, r5
 80003ec:	d101      	bne.n	80003f2 <__udivmoddi4+0xe6>
 80003ee:	42a2      	cmp	r2, r4
 80003f0:	d80c      	bhi.n	800040c <__udivmoddi4+0x100>
 80003f2:	1aa4      	subs	r4, r4, r2
 80003f4:	419d      	sbcs	r5, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	1924      	adds	r4, r4, r4
 80003fa:	416d      	adcs	r5, r5
 80003fc:	2100      	movs	r1, #0
 80003fe:	3e01      	subs	r6, #1
 8000400:	1824      	adds	r4, r4, r0
 8000402:	414d      	adcs	r5, r1
 8000404:	2e00      	cmp	r6, #0
 8000406:	d006      	beq.n	8000416 <__udivmoddi4+0x10a>
 8000408:	42ab      	cmp	r3, r5
 800040a:	d9ee      	bls.n	80003ea <__udivmoddi4+0xde>
 800040c:	3e01      	subs	r6, #1
 800040e:	1924      	adds	r4, r4, r4
 8000410:	416d      	adcs	r5, r5
 8000412:	2e00      	cmp	r6, #0
 8000414:	d1f8      	bne.n	8000408 <__udivmoddi4+0xfc>
 8000416:	9800      	ldr	r0, [sp, #0]
 8000418:	9901      	ldr	r1, [sp, #4]
 800041a:	465b      	mov	r3, fp
 800041c:	1900      	adds	r0, r0, r4
 800041e:	4169      	adcs	r1, r5
 8000420:	2b00      	cmp	r3, #0
 8000422:	db24      	blt.n	800046e <__udivmoddi4+0x162>
 8000424:	002b      	movs	r3, r5
 8000426:	465a      	mov	r2, fp
 8000428:	4644      	mov	r4, r8
 800042a:	40d3      	lsrs	r3, r2
 800042c:	002a      	movs	r2, r5
 800042e:	40e2      	lsrs	r2, r4
 8000430:	001c      	movs	r4, r3
 8000432:	465b      	mov	r3, fp
 8000434:	0015      	movs	r5, r2
 8000436:	2b00      	cmp	r3, #0
 8000438:	db2a      	blt.n	8000490 <__udivmoddi4+0x184>
 800043a:	0026      	movs	r6, r4
 800043c:	409e      	lsls	r6, r3
 800043e:	0033      	movs	r3, r6
 8000440:	0026      	movs	r6, r4
 8000442:	4647      	mov	r7, r8
 8000444:	40be      	lsls	r6, r7
 8000446:	0032      	movs	r2, r6
 8000448:	1a80      	subs	r0, r0, r2
 800044a:	4199      	sbcs	r1, r3
 800044c:	9000      	str	r0, [sp, #0]
 800044e:	9101      	str	r1, [sp, #4]
 8000450:	e79e      	b.n	8000390 <__udivmoddi4+0x84>
 8000452:	42a3      	cmp	r3, r4
 8000454:	d8bc      	bhi.n	80003d0 <__udivmoddi4+0xc4>
 8000456:	e782      	b.n	800035e <__udivmoddi4+0x52>
 8000458:	4642      	mov	r2, r8
 800045a:	2320      	movs	r3, #32
 800045c:	2100      	movs	r1, #0
 800045e:	1a9b      	subs	r3, r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	9100      	str	r1, [sp, #0]
 8000464:	9201      	str	r2, [sp, #4]
 8000466:	2201      	movs	r2, #1
 8000468:	40da      	lsrs	r2, r3
 800046a:	9201      	str	r2, [sp, #4]
 800046c:	e785      	b.n	800037a <__udivmoddi4+0x6e>
 800046e:	4642      	mov	r2, r8
 8000470:	2320      	movs	r3, #32
 8000472:	1a9b      	subs	r3, r3, r2
 8000474:	002a      	movs	r2, r5
 8000476:	4646      	mov	r6, r8
 8000478:	409a      	lsls	r2, r3
 800047a:	0023      	movs	r3, r4
 800047c:	40f3      	lsrs	r3, r6
 800047e:	4644      	mov	r4, r8
 8000480:	4313      	orrs	r3, r2
 8000482:	002a      	movs	r2, r5
 8000484:	40e2      	lsrs	r2, r4
 8000486:	001c      	movs	r4, r3
 8000488:	465b      	mov	r3, fp
 800048a:	0015      	movs	r5, r2
 800048c:	2b00      	cmp	r3, #0
 800048e:	dad4      	bge.n	800043a <__udivmoddi4+0x12e>
 8000490:	4642      	mov	r2, r8
 8000492:	002f      	movs	r7, r5
 8000494:	2320      	movs	r3, #32
 8000496:	0026      	movs	r6, r4
 8000498:	4097      	lsls	r7, r2
 800049a:	1a9b      	subs	r3, r3, r2
 800049c:	40de      	lsrs	r6, r3
 800049e:	003b      	movs	r3, r7
 80004a0:	4333      	orrs	r3, r6
 80004a2:	e7cd      	b.n	8000440 <__udivmoddi4+0x134>

080004a4 <__aeabi_dmul>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	4657      	mov	r7, sl
 80004a8:	46de      	mov	lr, fp
 80004aa:	464e      	mov	r6, r9
 80004ac:	4645      	mov	r5, r8
 80004ae:	b5e0      	push	{r5, r6, r7, lr}
 80004b0:	001f      	movs	r7, r3
 80004b2:	030b      	lsls	r3, r1, #12
 80004b4:	0b1b      	lsrs	r3, r3, #12
 80004b6:	0016      	movs	r6, r2
 80004b8:	469a      	mov	sl, r3
 80004ba:	0fca      	lsrs	r2, r1, #31
 80004bc:	004b      	lsls	r3, r1, #1
 80004be:	0004      	movs	r4, r0
 80004c0:	4693      	mov	fp, r2
 80004c2:	b087      	sub	sp, #28
 80004c4:	0d5b      	lsrs	r3, r3, #21
 80004c6:	d100      	bne.n	80004ca <__aeabi_dmul+0x26>
 80004c8:	e0d5      	b.n	8000676 <__aeabi_dmul+0x1d2>
 80004ca:	4abb      	ldr	r2, [pc, #748]	@ (80007b8 <__aeabi_dmul+0x314>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d100      	bne.n	80004d2 <__aeabi_dmul+0x2e>
 80004d0:	e0f8      	b.n	80006c4 <__aeabi_dmul+0x220>
 80004d2:	4651      	mov	r1, sl
 80004d4:	0f42      	lsrs	r2, r0, #29
 80004d6:	00c9      	lsls	r1, r1, #3
 80004d8:	430a      	orrs	r2, r1
 80004da:	2180      	movs	r1, #128	@ 0x80
 80004dc:	0409      	lsls	r1, r1, #16
 80004de:	4311      	orrs	r1, r2
 80004e0:	00c2      	lsls	r2, r0, #3
 80004e2:	4691      	mov	r9, r2
 80004e4:	4ab5      	ldr	r2, [pc, #724]	@ (80007bc <__aeabi_dmul+0x318>)
 80004e6:	468a      	mov	sl, r1
 80004e8:	189d      	adds	r5, r3, r2
 80004ea:	2300      	movs	r3, #0
 80004ec:	4698      	mov	r8, r3
 80004ee:	9302      	str	r3, [sp, #8]
 80004f0:	033c      	lsls	r4, r7, #12
 80004f2:	007b      	lsls	r3, r7, #1
 80004f4:	0ffa      	lsrs	r2, r7, #31
 80004f6:	0030      	movs	r0, r6
 80004f8:	0b24      	lsrs	r4, r4, #12
 80004fa:	0d5b      	lsrs	r3, r3, #21
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	d100      	bne.n	8000502 <__aeabi_dmul+0x5e>
 8000500:	e096      	b.n	8000630 <__aeabi_dmul+0x18c>
 8000502:	4aad      	ldr	r2, [pc, #692]	@ (80007b8 <__aeabi_dmul+0x314>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d031      	beq.n	800056c <__aeabi_dmul+0xc8>
 8000508:	0f72      	lsrs	r2, r6, #29
 800050a:	00e4      	lsls	r4, r4, #3
 800050c:	4322      	orrs	r2, r4
 800050e:	2480      	movs	r4, #128	@ 0x80
 8000510:	0424      	lsls	r4, r4, #16
 8000512:	4314      	orrs	r4, r2
 8000514:	4aa9      	ldr	r2, [pc, #676]	@ (80007bc <__aeabi_dmul+0x318>)
 8000516:	00f0      	lsls	r0, r6, #3
 8000518:	4694      	mov	ip, r2
 800051a:	4463      	add	r3, ip
 800051c:	195b      	adds	r3, r3, r5
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	9201      	str	r2, [sp, #4]
 8000522:	4642      	mov	r2, r8
 8000524:	2600      	movs	r6, #0
 8000526:	2a0a      	cmp	r2, #10
 8000528:	dc42      	bgt.n	80005b0 <__aeabi_dmul+0x10c>
 800052a:	465a      	mov	r2, fp
 800052c:	9900      	ldr	r1, [sp, #0]
 800052e:	404a      	eors	r2, r1
 8000530:	4693      	mov	fp, r2
 8000532:	4642      	mov	r2, r8
 8000534:	2a02      	cmp	r2, #2
 8000536:	dc32      	bgt.n	800059e <__aeabi_dmul+0xfa>
 8000538:	3a01      	subs	r2, #1
 800053a:	2a01      	cmp	r2, #1
 800053c:	d900      	bls.n	8000540 <__aeabi_dmul+0x9c>
 800053e:	e149      	b.n	80007d4 <__aeabi_dmul+0x330>
 8000540:	2e02      	cmp	r6, #2
 8000542:	d100      	bne.n	8000546 <__aeabi_dmul+0xa2>
 8000544:	e0ca      	b.n	80006dc <__aeabi_dmul+0x238>
 8000546:	2e01      	cmp	r6, #1
 8000548:	d13d      	bne.n	80005c6 <__aeabi_dmul+0x122>
 800054a:	2300      	movs	r3, #0
 800054c:	2400      	movs	r4, #0
 800054e:	2200      	movs	r2, #0
 8000550:	0010      	movs	r0, r2
 8000552:	465a      	mov	r2, fp
 8000554:	051b      	lsls	r3, r3, #20
 8000556:	4323      	orrs	r3, r4
 8000558:	07d2      	lsls	r2, r2, #31
 800055a:	4313      	orrs	r3, r2
 800055c:	0019      	movs	r1, r3
 800055e:	b007      	add	sp, #28
 8000560:	bcf0      	pop	{r4, r5, r6, r7}
 8000562:	46bb      	mov	fp, r7
 8000564:	46b2      	mov	sl, r6
 8000566:	46a9      	mov	r9, r5
 8000568:	46a0      	mov	r8, r4
 800056a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800056c:	4b92      	ldr	r3, [pc, #584]	@ (80007b8 <__aeabi_dmul+0x314>)
 800056e:	4326      	orrs	r6, r4
 8000570:	18eb      	adds	r3, r5, r3
 8000572:	2e00      	cmp	r6, #0
 8000574:	d100      	bne.n	8000578 <__aeabi_dmul+0xd4>
 8000576:	e0bb      	b.n	80006f0 <__aeabi_dmul+0x24c>
 8000578:	2203      	movs	r2, #3
 800057a:	4641      	mov	r1, r8
 800057c:	4311      	orrs	r1, r2
 800057e:	465a      	mov	r2, fp
 8000580:	4688      	mov	r8, r1
 8000582:	9900      	ldr	r1, [sp, #0]
 8000584:	404a      	eors	r2, r1
 8000586:	2180      	movs	r1, #128	@ 0x80
 8000588:	0109      	lsls	r1, r1, #4
 800058a:	468c      	mov	ip, r1
 800058c:	0029      	movs	r1, r5
 800058e:	4461      	add	r1, ip
 8000590:	9101      	str	r1, [sp, #4]
 8000592:	4641      	mov	r1, r8
 8000594:	290a      	cmp	r1, #10
 8000596:	dd00      	ble.n	800059a <__aeabi_dmul+0xf6>
 8000598:	e233      	b.n	8000a02 <__aeabi_dmul+0x55e>
 800059a:	4693      	mov	fp, r2
 800059c:	2603      	movs	r6, #3
 800059e:	4642      	mov	r2, r8
 80005a0:	2701      	movs	r7, #1
 80005a2:	4097      	lsls	r7, r2
 80005a4:	21a6      	movs	r1, #166	@ 0xa6
 80005a6:	003a      	movs	r2, r7
 80005a8:	00c9      	lsls	r1, r1, #3
 80005aa:	400a      	ands	r2, r1
 80005ac:	420f      	tst	r7, r1
 80005ae:	d031      	beq.n	8000614 <__aeabi_dmul+0x170>
 80005b0:	9e02      	ldr	r6, [sp, #8]
 80005b2:	2e02      	cmp	r6, #2
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dmul+0x114>
 80005b6:	e235      	b.n	8000a24 <__aeabi_dmul+0x580>
 80005b8:	2e03      	cmp	r6, #3
 80005ba:	d100      	bne.n	80005be <__aeabi_dmul+0x11a>
 80005bc:	e1d2      	b.n	8000964 <__aeabi_dmul+0x4c0>
 80005be:	4654      	mov	r4, sl
 80005c0:	4648      	mov	r0, r9
 80005c2:	2e01      	cmp	r6, #1
 80005c4:	d0c1      	beq.n	800054a <__aeabi_dmul+0xa6>
 80005c6:	9a01      	ldr	r2, [sp, #4]
 80005c8:	4b7d      	ldr	r3, [pc, #500]	@ (80007c0 <__aeabi_dmul+0x31c>)
 80005ca:	4694      	mov	ip, r2
 80005cc:	4463      	add	r3, ip
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	dc00      	bgt.n	80005d4 <__aeabi_dmul+0x130>
 80005d2:	e0c0      	b.n	8000756 <__aeabi_dmul+0x2b2>
 80005d4:	0742      	lsls	r2, r0, #29
 80005d6:	d009      	beq.n	80005ec <__aeabi_dmul+0x148>
 80005d8:	220f      	movs	r2, #15
 80005da:	4002      	ands	r2, r0
 80005dc:	2a04      	cmp	r2, #4
 80005de:	d005      	beq.n	80005ec <__aeabi_dmul+0x148>
 80005e0:	1d02      	adds	r2, r0, #4
 80005e2:	4282      	cmp	r2, r0
 80005e4:	4180      	sbcs	r0, r0
 80005e6:	4240      	negs	r0, r0
 80005e8:	1824      	adds	r4, r4, r0
 80005ea:	0010      	movs	r0, r2
 80005ec:	01e2      	lsls	r2, r4, #7
 80005ee:	d506      	bpl.n	80005fe <__aeabi_dmul+0x15a>
 80005f0:	4b74      	ldr	r3, [pc, #464]	@ (80007c4 <__aeabi_dmul+0x320>)
 80005f2:	9a01      	ldr	r2, [sp, #4]
 80005f4:	401c      	ands	r4, r3
 80005f6:	2380      	movs	r3, #128	@ 0x80
 80005f8:	4694      	mov	ip, r2
 80005fa:	00db      	lsls	r3, r3, #3
 80005fc:	4463      	add	r3, ip
 80005fe:	4a72      	ldr	r2, [pc, #456]	@ (80007c8 <__aeabi_dmul+0x324>)
 8000600:	4293      	cmp	r3, r2
 8000602:	dc6b      	bgt.n	80006dc <__aeabi_dmul+0x238>
 8000604:	0762      	lsls	r2, r4, #29
 8000606:	08c0      	lsrs	r0, r0, #3
 8000608:	0264      	lsls	r4, r4, #9
 800060a:	055b      	lsls	r3, r3, #21
 800060c:	4302      	orrs	r2, r0
 800060e:	0b24      	lsrs	r4, r4, #12
 8000610:	0d5b      	lsrs	r3, r3, #21
 8000612:	e79d      	b.n	8000550 <__aeabi_dmul+0xac>
 8000614:	2190      	movs	r1, #144	@ 0x90
 8000616:	0089      	lsls	r1, r1, #2
 8000618:	420f      	tst	r7, r1
 800061a:	d163      	bne.n	80006e4 <__aeabi_dmul+0x240>
 800061c:	2288      	movs	r2, #136	@ 0x88
 800061e:	423a      	tst	r2, r7
 8000620:	d100      	bne.n	8000624 <__aeabi_dmul+0x180>
 8000622:	e0d7      	b.n	80007d4 <__aeabi_dmul+0x330>
 8000624:	9b00      	ldr	r3, [sp, #0]
 8000626:	46a2      	mov	sl, r4
 8000628:	469b      	mov	fp, r3
 800062a:	4681      	mov	r9, r0
 800062c:	9602      	str	r6, [sp, #8]
 800062e:	e7bf      	b.n	80005b0 <__aeabi_dmul+0x10c>
 8000630:	0023      	movs	r3, r4
 8000632:	4333      	orrs	r3, r6
 8000634:	d100      	bne.n	8000638 <__aeabi_dmul+0x194>
 8000636:	e07f      	b.n	8000738 <__aeabi_dmul+0x294>
 8000638:	2c00      	cmp	r4, #0
 800063a:	d100      	bne.n	800063e <__aeabi_dmul+0x19a>
 800063c:	e1ad      	b.n	800099a <__aeabi_dmul+0x4f6>
 800063e:	0020      	movs	r0, r4
 8000640:	f000 fe32 	bl	80012a8 <__clzsi2>
 8000644:	0002      	movs	r2, r0
 8000646:	0003      	movs	r3, r0
 8000648:	3a0b      	subs	r2, #11
 800064a:	201d      	movs	r0, #29
 800064c:	0019      	movs	r1, r3
 800064e:	1a82      	subs	r2, r0, r2
 8000650:	0030      	movs	r0, r6
 8000652:	3908      	subs	r1, #8
 8000654:	40d0      	lsrs	r0, r2
 8000656:	408c      	lsls	r4, r1
 8000658:	4304      	orrs	r4, r0
 800065a:	0030      	movs	r0, r6
 800065c:	4088      	lsls	r0, r1
 800065e:	4a5b      	ldr	r2, [pc, #364]	@ (80007cc <__aeabi_dmul+0x328>)
 8000660:	1aeb      	subs	r3, r5, r3
 8000662:	4694      	mov	ip, r2
 8000664:	4463      	add	r3, ip
 8000666:	1c5a      	adds	r2, r3, #1
 8000668:	9201      	str	r2, [sp, #4]
 800066a:	4642      	mov	r2, r8
 800066c:	2600      	movs	r6, #0
 800066e:	2a0a      	cmp	r2, #10
 8000670:	dc00      	bgt.n	8000674 <__aeabi_dmul+0x1d0>
 8000672:	e75a      	b.n	800052a <__aeabi_dmul+0x86>
 8000674:	e79c      	b.n	80005b0 <__aeabi_dmul+0x10c>
 8000676:	4653      	mov	r3, sl
 8000678:	4303      	orrs	r3, r0
 800067a:	4699      	mov	r9, r3
 800067c:	d054      	beq.n	8000728 <__aeabi_dmul+0x284>
 800067e:	4653      	mov	r3, sl
 8000680:	2b00      	cmp	r3, #0
 8000682:	d100      	bne.n	8000686 <__aeabi_dmul+0x1e2>
 8000684:	e177      	b.n	8000976 <__aeabi_dmul+0x4d2>
 8000686:	4650      	mov	r0, sl
 8000688:	f000 fe0e 	bl	80012a8 <__clzsi2>
 800068c:	230b      	movs	r3, #11
 800068e:	425b      	negs	r3, r3
 8000690:	469c      	mov	ip, r3
 8000692:	0002      	movs	r2, r0
 8000694:	4484      	add	ip, r0
 8000696:	0011      	movs	r1, r2
 8000698:	4650      	mov	r0, sl
 800069a:	3908      	subs	r1, #8
 800069c:	4088      	lsls	r0, r1
 800069e:	231d      	movs	r3, #29
 80006a0:	4680      	mov	r8, r0
 80006a2:	4660      	mov	r0, ip
 80006a4:	1a1b      	subs	r3, r3, r0
 80006a6:	0020      	movs	r0, r4
 80006a8:	40d8      	lsrs	r0, r3
 80006aa:	0003      	movs	r3, r0
 80006ac:	4640      	mov	r0, r8
 80006ae:	4303      	orrs	r3, r0
 80006b0:	469a      	mov	sl, r3
 80006b2:	0023      	movs	r3, r4
 80006b4:	408b      	lsls	r3, r1
 80006b6:	4699      	mov	r9, r3
 80006b8:	2300      	movs	r3, #0
 80006ba:	4d44      	ldr	r5, [pc, #272]	@ (80007cc <__aeabi_dmul+0x328>)
 80006bc:	4698      	mov	r8, r3
 80006be:	1aad      	subs	r5, r5, r2
 80006c0:	9302      	str	r3, [sp, #8]
 80006c2:	e715      	b.n	80004f0 <__aeabi_dmul+0x4c>
 80006c4:	4652      	mov	r2, sl
 80006c6:	4302      	orrs	r2, r0
 80006c8:	4691      	mov	r9, r2
 80006ca:	d126      	bne.n	800071a <__aeabi_dmul+0x276>
 80006cc:	2200      	movs	r2, #0
 80006ce:	001d      	movs	r5, r3
 80006d0:	2302      	movs	r3, #2
 80006d2:	4692      	mov	sl, r2
 80006d4:	3208      	adds	r2, #8
 80006d6:	4690      	mov	r8, r2
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	e709      	b.n	80004f0 <__aeabi_dmul+0x4c>
 80006dc:	2400      	movs	r4, #0
 80006de:	2200      	movs	r2, #0
 80006e0:	4b35      	ldr	r3, [pc, #212]	@ (80007b8 <__aeabi_dmul+0x314>)
 80006e2:	e735      	b.n	8000550 <__aeabi_dmul+0xac>
 80006e4:	2300      	movs	r3, #0
 80006e6:	2480      	movs	r4, #128	@ 0x80
 80006e8:	469b      	mov	fp, r3
 80006ea:	0324      	lsls	r4, r4, #12
 80006ec:	4b32      	ldr	r3, [pc, #200]	@ (80007b8 <__aeabi_dmul+0x314>)
 80006ee:	e72f      	b.n	8000550 <__aeabi_dmul+0xac>
 80006f0:	2202      	movs	r2, #2
 80006f2:	4641      	mov	r1, r8
 80006f4:	4311      	orrs	r1, r2
 80006f6:	2280      	movs	r2, #128	@ 0x80
 80006f8:	0112      	lsls	r2, r2, #4
 80006fa:	4694      	mov	ip, r2
 80006fc:	002a      	movs	r2, r5
 80006fe:	4462      	add	r2, ip
 8000700:	4688      	mov	r8, r1
 8000702:	9201      	str	r2, [sp, #4]
 8000704:	290a      	cmp	r1, #10
 8000706:	dd00      	ble.n	800070a <__aeabi_dmul+0x266>
 8000708:	e752      	b.n	80005b0 <__aeabi_dmul+0x10c>
 800070a:	465a      	mov	r2, fp
 800070c:	2000      	movs	r0, #0
 800070e:	9900      	ldr	r1, [sp, #0]
 8000710:	0004      	movs	r4, r0
 8000712:	404a      	eors	r2, r1
 8000714:	4693      	mov	fp, r2
 8000716:	2602      	movs	r6, #2
 8000718:	e70b      	b.n	8000532 <__aeabi_dmul+0x8e>
 800071a:	220c      	movs	r2, #12
 800071c:	001d      	movs	r5, r3
 800071e:	2303      	movs	r3, #3
 8000720:	4681      	mov	r9, r0
 8000722:	4690      	mov	r8, r2
 8000724:	9302      	str	r3, [sp, #8]
 8000726:	e6e3      	b.n	80004f0 <__aeabi_dmul+0x4c>
 8000728:	2300      	movs	r3, #0
 800072a:	469a      	mov	sl, r3
 800072c:	3304      	adds	r3, #4
 800072e:	4698      	mov	r8, r3
 8000730:	3b03      	subs	r3, #3
 8000732:	2500      	movs	r5, #0
 8000734:	9302      	str	r3, [sp, #8]
 8000736:	e6db      	b.n	80004f0 <__aeabi_dmul+0x4c>
 8000738:	4642      	mov	r2, r8
 800073a:	3301      	adds	r3, #1
 800073c:	431a      	orrs	r2, r3
 800073e:	002b      	movs	r3, r5
 8000740:	4690      	mov	r8, r2
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	9201      	str	r2, [sp, #4]
 8000746:	4642      	mov	r2, r8
 8000748:	2400      	movs	r4, #0
 800074a:	2000      	movs	r0, #0
 800074c:	2601      	movs	r6, #1
 800074e:	2a0a      	cmp	r2, #10
 8000750:	dc00      	bgt.n	8000754 <__aeabi_dmul+0x2b0>
 8000752:	e6ea      	b.n	800052a <__aeabi_dmul+0x86>
 8000754:	e72c      	b.n	80005b0 <__aeabi_dmul+0x10c>
 8000756:	2201      	movs	r2, #1
 8000758:	1ad2      	subs	r2, r2, r3
 800075a:	2a38      	cmp	r2, #56	@ 0x38
 800075c:	dd00      	ble.n	8000760 <__aeabi_dmul+0x2bc>
 800075e:	e6f4      	b.n	800054a <__aeabi_dmul+0xa6>
 8000760:	2a1f      	cmp	r2, #31
 8000762:	dc00      	bgt.n	8000766 <__aeabi_dmul+0x2c2>
 8000764:	e12a      	b.n	80009bc <__aeabi_dmul+0x518>
 8000766:	211f      	movs	r1, #31
 8000768:	4249      	negs	r1, r1
 800076a:	1acb      	subs	r3, r1, r3
 800076c:	0021      	movs	r1, r4
 800076e:	40d9      	lsrs	r1, r3
 8000770:	000b      	movs	r3, r1
 8000772:	2a20      	cmp	r2, #32
 8000774:	d005      	beq.n	8000782 <__aeabi_dmul+0x2de>
 8000776:	4a16      	ldr	r2, [pc, #88]	@ (80007d0 <__aeabi_dmul+0x32c>)
 8000778:	9d01      	ldr	r5, [sp, #4]
 800077a:	4694      	mov	ip, r2
 800077c:	4465      	add	r5, ip
 800077e:	40ac      	lsls	r4, r5
 8000780:	4320      	orrs	r0, r4
 8000782:	1e42      	subs	r2, r0, #1
 8000784:	4190      	sbcs	r0, r2
 8000786:	4318      	orrs	r0, r3
 8000788:	2307      	movs	r3, #7
 800078a:	0019      	movs	r1, r3
 800078c:	2400      	movs	r4, #0
 800078e:	4001      	ands	r1, r0
 8000790:	4203      	tst	r3, r0
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x30a>
 8000794:	230f      	movs	r3, #15
 8000796:	4003      	ands	r3, r0
 8000798:	2b04      	cmp	r3, #4
 800079a:	d100      	bne.n	800079e <__aeabi_dmul+0x2fa>
 800079c:	e140      	b.n	8000a20 <__aeabi_dmul+0x57c>
 800079e:	1d03      	adds	r3, r0, #4
 80007a0:	4283      	cmp	r3, r0
 80007a2:	41a4      	sbcs	r4, r4
 80007a4:	0018      	movs	r0, r3
 80007a6:	4264      	negs	r4, r4
 80007a8:	0761      	lsls	r1, r4, #29
 80007aa:	0264      	lsls	r4, r4, #9
 80007ac:	0b24      	lsrs	r4, r4, #12
 80007ae:	08c2      	lsrs	r2, r0, #3
 80007b0:	2300      	movs	r3, #0
 80007b2:	430a      	orrs	r2, r1
 80007b4:	e6cc      	b.n	8000550 <__aeabi_dmul+0xac>
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	000007ff 	.word	0x000007ff
 80007bc:	fffffc01 	.word	0xfffffc01
 80007c0:	000003ff 	.word	0x000003ff
 80007c4:	feffffff 	.word	0xfeffffff
 80007c8:	000007fe 	.word	0x000007fe
 80007cc:	fffffc0d 	.word	0xfffffc0d
 80007d0:	0000043e 	.word	0x0000043e
 80007d4:	4649      	mov	r1, r9
 80007d6:	464a      	mov	r2, r9
 80007d8:	0409      	lsls	r1, r1, #16
 80007da:	0c09      	lsrs	r1, r1, #16
 80007dc:	000d      	movs	r5, r1
 80007de:	0c16      	lsrs	r6, r2, #16
 80007e0:	0c02      	lsrs	r2, r0, #16
 80007e2:	0400      	lsls	r0, r0, #16
 80007e4:	0c00      	lsrs	r0, r0, #16
 80007e6:	4345      	muls	r5, r0
 80007e8:	46ac      	mov	ip, r5
 80007ea:	0005      	movs	r5, r0
 80007ec:	4375      	muls	r5, r6
 80007ee:	46a8      	mov	r8, r5
 80007f0:	0015      	movs	r5, r2
 80007f2:	000f      	movs	r7, r1
 80007f4:	4375      	muls	r5, r6
 80007f6:	9200      	str	r2, [sp, #0]
 80007f8:	9502      	str	r5, [sp, #8]
 80007fa:	002a      	movs	r2, r5
 80007fc:	9d00      	ldr	r5, [sp, #0]
 80007fe:	436f      	muls	r7, r5
 8000800:	4665      	mov	r5, ip
 8000802:	0c2d      	lsrs	r5, r5, #16
 8000804:	46a9      	mov	r9, r5
 8000806:	4447      	add	r7, r8
 8000808:	444f      	add	r7, r9
 800080a:	45b8      	cmp	r8, r7
 800080c:	d905      	bls.n	800081a <__aeabi_dmul+0x376>
 800080e:	0015      	movs	r5, r2
 8000810:	2280      	movs	r2, #128	@ 0x80
 8000812:	0252      	lsls	r2, r2, #9
 8000814:	4690      	mov	r8, r2
 8000816:	4445      	add	r5, r8
 8000818:	9502      	str	r5, [sp, #8]
 800081a:	0c3d      	lsrs	r5, r7, #16
 800081c:	9503      	str	r5, [sp, #12]
 800081e:	4665      	mov	r5, ip
 8000820:	042d      	lsls	r5, r5, #16
 8000822:	043f      	lsls	r7, r7, #16
 8000824:	0c2d      	lsrs	r5, r5, #16
 8000826:	46ac      	mov	ip, r5
 8000828:	003d      	movs	r5, r7
 800082a:	4465      	add	r5, ip
 800082c:	9504      	str	r5, [sp, #16]
 800082e:	0c25      	lsrs	r5, r4, #16
 8000830:	0424      	lsls	r4, r4, #16
 8000832:	0c24      	lsrs	r4, r4, #16
 8000834:	46ac      	mov	ip, r5
 8000836:	0025      	movs	r5, r4
 8000838:	4375      	muls	r5, r6
 800083a:	46a8      	mov	r8, r5
 800083c:	4665      	mov	r5, ip
 800083e:	000f      	movs	r7, r1
 8000840:	4369      	muls	r1, r5
 8000842:	4441      	add	r1, r8
 8000844:	4689      	mov	r9, r1
 8000846:	4367      	muls	r7, r4
 8000848:	0c39      	lsrs	r1, r7, #16
 800084a:	4449      	add	r1, r9
 800084c:	436e      	muls	r6, r5
 800084e:	4588      	cmp	r8, r1
 8000850:	d903      	bls.n	800085a <__aeabi_dmul+0x3b6>
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	0252      	lsls	r2, r2, #9
 8000856:	4690      	mov	r8, r2
 8000858:	4446      	add	r6, r8
 800085a:	0c0d      	lsrs	r5, r1, #16
 800085c:	46a8      	mov	r8, r5
 800085e:	0035      	movs	r5, r6
 8000860:	4445      	add	r5, r8
 8000862:	9505      	str	r5, [sp, #20]
 8000864:	9d03      	ldr	r5, [sp, #12]
 8000866:	043f      	lsls	r7, r7, #16
 8000868:	46a8      	mov	r8, r5
 800086a:	0c3f      	lsrs	r7, r7, #16
 800086c:	0409      	lsls	r1, r1, #16
 800086e:	19c9      	adds	r1, r1, r7
 8000870:	4488      	add	r8, r1
 8000872:	4645      	mov	r5, r8
 8000874:	9503      	str	r5, [sp, #12]
 8000876:	4655      	mov	r5, sl
 8000878:	042e      	lsls	r6, r5, #16
 800087a:	0c36      	lsrs	r6, r6, #16
 800087c:	0c2f      	lsrs	r7, r5, #16
 800087e:	0035      	movs	r5, r6
 8000880:	4345      	muls	r5, r0
 8000882:	4378      	muls	r0, r7
 8000884:	4681      	mov	r9, r0
 8000886:	0038      	movs	r0, r7
 8000888:	46a8      	mov	r8, r5
 800088a:	0c2d      	lsrs	r5, r5, #16
 800088c:	46aa      	mov	sl, r5
 800088e:	9a00      	ldr	r2, [sp, #0]
 8000890:	4350      	muls	r0, r2
 8000892:	4372      	muls	r2, r6
 8000894:	444a      	add	r2, r9
 8000896:	4452      	add	r2, sl
 8000898:	4591      	cmp	r9, r2
 800089a:	d903      	bls.n	80008a4 <__aeabi_dmul+0x400>
 800089c:	2580      	movs	r5, #128	@ 0x80
 800089e:	026d      	lsls	r5, r5, #9
 80008a0:	46a9      	mov	r9, r5
 80008a2:	4448      	add	r0, r9
 80008a4:	0c15      	lsrs	r5, r2, #16
 80008a6:	46a9      	mov	r9, r5
 80008a8:	4645      	mov	r5, r8
 80008aa:	042d      	lsls	r5, r5, #16
 80008ac:	0c2d      	lsrs	r5, r5, #16
 80008ae:	46a8      	mov	r8, r5
 80008b0:	4665      	mov	r5, ip
 80008b2:	437d      	muls	r5, r7
 80008b4:	0412      	lsls	r2, r2, #16
 80008b6:	4448      	add	r0, r9
 80008b8:	4490      	add	r8, r2
 80008ba:	46a9      	mov	r9, r5
 80008bc:	0032      	movs	r2, r6
 80008be:	4665      	mov	r5, ip
 80008c0:	4362      	muls	r2, r4
 80008c2:	436e      	muls	r6, r5
 80008c4:	437c      	muls	r4, r7
 80008c6:	0c17      	lsrs	r7, r2, #16
 80008c8:	1936      	adds	r6, r6, r4
 80008ca:	19bf      	adds	r7, r7, r6
 80008cc:	42bc      	cmp	r4, r7
 80008ce:	d903      	bls.n	80008d8 <__aeabi_dmul+0x434>
 80008d0:	2480      	movs	r4, #128	@ 0x80
 80008d2:	0264      	lsls	r4, r4, #9
 80008d4:	46a4      	mov	ip, r4
 80008d6:	44e1      	add	r9, ip
 80008d8:	9c02      	ldr	r4, [sp, #8]
 80008da:	9e03      	ldr	r6, [sp, #12]
 80008dc:	46a4      	mov	ip, r4
 80008de:	9d05      	ldr	r5, [sp, #20]
 80008e0:	4466      	add	r6, ip
 80008e2:	428e      	cmp	r6, r1
 80008e4:	4189      	sbcs	r1, r1
 80008e6:	46ac      	mov	ip, r5
 80008e8:	0412      	lsls	r2, r2, #16
 80008ea:	043c      	lsls	r4, r7, #16
 80008ec:	0c12      	lsrs	r2, r2, #16
 80008ee:	18a2      	adds	r2, r4, r2
 80008f0:	4462      	add	r2, ip
 80008f2:	4249      	negs	r1, r1
 80008f4:	1854      	adds	r4, r2, r1
 80008f6:	4446      	add	r6, r8
 80008f8:	46a4      	mov	ip, r4
 80008fa:	4546      	cmp	r6, r8
 80008fc:	41a4      	sbcs	r4, r4
 80008fe:	4682      	mov	sl, r0
 8000900:	4264      	negs	r4, r4
 8000902:	46a0      	mov	r8, r4
 8000904:	42aa      	cmp	r2, r5
 8000906:	4192      	sbcs	r2, r2
 8000908:	458c      	cmp	ip, r1
 800090a:	4189      	sbcs	r1, r1
 800090c:	44e2      	add	sl, ip
 800090e:	44d0      	add	r8, sl
 8000910:	4249      	negs	r1, r1
 8000912:	4252      	negs	r2, r2
 8000914:	430a      	orrs	r2, r1
 8000916:	45a0      	cmp	r8, r4
 8000918:	41a4      	sbcs	r4, r4
 800091a:	4582      	cmp	sl, r0
 800091c:	4189      	sbcs	r1, r1
 800091e:	4264      	negs	r4, r4
 8000920:	4249      	negs	r1, r1
 8000922:	430c      	orrs	r4, r1
 8000924:	4641      	mov	r1, r8
 8000926:	0c3f      	lsrs	r7, r7, #16
 8000928:	19d2      	adds	r2, r2, r7
 800092a:	1912      	adds	r2, r2, r4
 800092c:	0dcc      	lsrs	r4, r1, #23
 800092e:	9904      	ldr	r1, [sp, #16]
 8000930:	0270      	lsls	r0, r6, #9
 8000932:	4308      	orrs	r0, r1
 8000934:	1e41      	subs	r1, r0, #1
 8000936:	4188      	sbcs	r0, r1
 8000938:	4641      	mov	r1, r8
 800093a:	444a      	add	r2, r9
 800093c:	0df6      	lsrs	r6, r6, #23
 800093e:	0252      	lsls	r2, r2, #9
 8000940:	4330      	orrs	r0, r6
 8000942:	0249      	lsls	r1, r1, #9
 8000944:	4314      	orrs	r4, r2
 8000946:	4308      	orrs	r0, r1
 8000948:	01d2      	lsls	r2, r2, #7
 800094a:	d535      	bpl.n	80009b8 <__aeabi_dmul+0x514>
 800094c:	2201      	movs	r2, #1
 800094e:	0843      	lsrs	r3, r0, #1
 8000950:	4002      	ands	r2, r0
 8000952:	4313      	orrs	r3, r2
 8000954:	07e0      	lsls	r0, r4, #31
 8000956:	4318      	orrs	r0, r3
 8000958:	0864      	lsrs	r4, r4, #1
 800095a:	e634      	b.n	80005c6 <__aeabi_dmul+0x122>
 800095c:	9b00      	ldr	r3, [sp, #0]
 800095e:	46a2      	mov	sl, r4
 8000960:	469b      	mov	fp, r3
 8000962:	4681      	mov	r9, r0
 8000964:	2480      	movs	r4, #128	@ 0x80
 8000966:	4653      	mov	r3, sl
 8000968:	0324      	lsls	r4, r4, #12
 800096a:	431c      	orrs	r4, r3
 800096c:	0324      	lsls	r4, r4, #12
 800096e:	464a      	mov	r2, r9
 8000970:	4b2e      	ldr	r3, [pc, #184]	@ (8000a2c <__aeabi_dmul+0x588>)
 8000972:	0b24      	lsrs	r4, r4, #12
 8000974:	e5ec      	b.n	8000550 <__aeabi_dmul+0xac>
 8000976:	f000 fc97 	bl	80012a8 <__clzsi2>
 800097a:	2315      	movs	r3, #21
 800097c:	469c      	mov	ip, r3
 800097e:	4484      	add	ip, r0
 8000980:	0002      	movs	r2, r0
 8000982:	4663      	mov	r3, ip
 8000984:	3220      	adds	r2, #32
 8000986:	2b1c      	cmp	r3, #28
 8000988:	dc00      	bgt.n	800098c <__aeabi_dmul+0x4e8>
 800098a:	e684      	b.n	8000696 <__aeabi_dmul+0x1f2>
 800098c:	2300      	movs	r3, #0
 800098e:	4699      	mov	r9, r3
 8000990:	0023      	movs	r3, r4
 8000992:	3808      	subs	r0, #8
 8000994:	4083      	lsls	r3, r0
 8000996:	469a      	mov	sl, r3
 8000998:	e68e      	b.n	80006b8 <__aeabi_dmul+0x214>
 800099a:	f000 fc85 	bl	80012a8 <__clzsi2>
 800099e:	0002      	movs	r2, r0
 80009a0:	0003      	movs	r3, r0
 80009a2:	3215      	adds	r2, #21
 80009a4:	3320      	adds	r3, #32
 80009a6:	2a1c      	cmp	r2, #28
 80009a8:	dc00      	bgt.n	80009ac <__aeabi_dmul+0x508>
 80009aa:	e64e      	b.n	800064a <__aeabi_dmul+0x1a6>
 80009ac:	0002      	movs	r2, r0
 80009ae:	0034      	movs	r4, r6
 80009b0:	3a08      	subs	r2, #8
 80009b2:	2000      	movs	r0, #0
 80009b4:	4094      	lsls	r4, r2
 80009b6:	e652      	b.n	800065e <__aeabi_dmul+0x1ba>
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	e604      	b.n	80005c6 <__aeabi_dmul+0x122>
 80009bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <__aeabi_dmul+0x58c>)
 80009be:	0021      	movs	r1, r4
 80009c0:	469c      	mov	ip, r3
 80009c2:	0003      	movs	r3, r0
 80009c4:	9d01      	ldr	r5, [sp, #4]
 80009c6:	40d3      	lsrs	r3, r2
 80009c8:	4465      	add	r5, ip
 80009ca:	40a9      	lsls	r1, r5
 80009cc:	4319      	orrs	r1, r3
 80009ce:	0003      	movs	r3, r0
 80009d0:	40ab      	lsls	r3, r5
 80009d2:	1e58      	subs	r0, r3, #1
 80009d4:	4183      	sbcs	r3, r0
 80009d6:	4319      	orrs	r1, r3
 80009d8:	0008      	movs	r0, r1
 80009da:	40d4      	lsrs	r4, r2
 80009dc:	074b      	lsls	r3, r1, #29
 80009de:	d009      	beq.n	80009f4 <__aeabi_dmul+0x550>
 80009e0:	230f      	movs	r3, #15
 80009e2:	400b      	ands	r3, r1
 80009e4:	2b04      	cmp	r3, #4
 80009e6:	d005      	beq.n	80009f4 <__aeabi_dmul+0x550>
 80009e8:	1d0b      	adds	r3, r1, #4
 80009ea:	428b      	cmp	r3, r1
 80009ec:	4180      	sbcs	r0, r0
 80009ee:	4240      	negs	r0, r0
 80009f0:	1824      	adds	r4, r4, r0
 80009f2:	0018      	movs	r0, r3
 80009f4:	0223      	lsls	r3, r4, #8
 80009f6:	d400      	bmi.n	80009fa <__aeabi_dmul+0x556>
 80009f8:	e6d6      	b.n	80007a8 <__aeabi_dmul+0x304>
 80009fa:	2301      	movs	r3, #1
 80009fc:	2400      	movs	r4, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	e5a6      	b.n	8000550 <__aeabi_dmul+0xac>
 8000a02:	290f      	cmp	r1, #15
 8000a04:	d1aa      	bne.n	800095c <__aeabi_dmul+0x4b8>
 8000a06:	2380      	movs	r3, #128	@ 0x80
 8000a08:	4652      	mov	r2, sl
 8000a0a:	031b      	lsls	r3, r3, #12
 8000a0c:	421a      	tst	r2, r3
 8000a0e:	d0a9      	beq.n	8000964 <__aeabi_dmul+0x4c0>
 8000a10:	421c      	tst	r4, r3
 8000a12:	d1a7      	bne.n	8000964 <__aeabi_dmul+0x4c0>
 8000a14:	431c      	orrs	r4, r3
 8000a16:	9b00      	ldr	r3, [sp, #0]
 8000a18:	0002      	movs	r2, r0
 8000a1a:	469b      	mov	fp, r3
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <__aeabi_dmul+0x588>)
 8000a1e:	e597      	b.n	8000550 <__aeabi_dmul+0xac>
 8000a20:	2400      	movs	r4, #0
 8000a22:	e6c1      	b.n	80007a8 <__aeabi_dmul+0x304>
 8000a24:	2400      	movs	r4, #0
 8000a26:	4b01      	ldr	r3, [pc, #4]	@ (8000a2c <__aeabi_dmul+0x588>)
 8000a28:	0022      	movs	r2, r4
 8000a2a:	e591      	b.n	8000550 <__aeabi_dmul+0xac>
 8000a2c:	000007ff 	.word	0x000007ff
 8000a30:	0000041e 	.word	0x0000041e

08000a34 <__aeabi_dsub>:
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	464e      	mov	r6, r9
 8000a38:	4645      	mov	r5, r8
 8000a3a:	46de      	mov	lr, fp
 8000a3c:	4657      	mov	r7, sl
 8000a3e:	b5e0      	push	{r5, r6, r7, lr}
 8000a40:	b085      	sub	sp, #20
 8000a42:	9000      	str	r0, [sp, #0]
 8000a44:	9101      	str	r1, [sp, #4]
 8000a46:	030c      	lsls	r4, r1, #12
 8000a48:	004f      	lsls	r7, r1, #1
 8000a4a:	0fce      	lsrs	r6, r1, #31
 8000a4c:	0a61      	lsrs	r1, r4, #9
 8000a4e:	9c00      	ldr	r4, [sp, #0]
 8000a50:	46b0      	mov	r8, r6
 8000a52:	0f64      	lsrs	r4, r4, #29
 8000a54:	430c      	orrs	r4, r1
 8000a56:	9900      	ldr	r1, [sp, #0]
 8000a58:	0d7f      	lsrs	r7, r7, #21
 8000a5a:	00c8      	lsls	r0, r1, #3
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	001a      	movs	r2, r3
 8000a60:	031b      	lsls	r3, r3, #12
 8000a62:	469c      	mov	ip, r3
 8000a64:	9100      	str	r1, [sp, #0]
 8000a66:	9201      	str	r2, [sp, #4]
 8000a68:	0051      	lsls	r1, r2, #1
 8000a6a:	0d4b      	lsrs	r3, r1, #21
 8000a6c:	4699      	mov	r9, r3
 8000a6e:	9b01      	ldr	r3, [sp, #4]
 8000a70:	9d00      	ldr	r5, [sp, #0]
 8000a72:	0fd9      	lsrs	r1, r3, #31
 8000a74:	4663      	mov	r3, ip
 8000a76:	0f6a      	lsrs	r2, r5, #29
 8000a78:	0a5b      	lsrs	r3, r3, #9
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	00ea      	lsls	r2, r5, #3
 8000a7e:	4694      	mov	ip, r2
 8000a80:	4693      	mov	fp, r2
 8000a82:	4ac1      	ldr	r2, [pc, #772]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000a84:	9003      	str	r0, [sp, #12]
 8000a86:	9302      	str	r3, [sp, #8]
 8000a88:	4591      	cmp	r9, r2
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dsub+0x5a>
 8000a8c:	e0cd      	b.n	8000c2a <__aeabi_dsub+0x1f6>
 8000a8e:	2501      	movs	r5, #1
 8000a90:	4069      	eors	r1, r5
 8000a92:	464d      	mov	r5, r9
 8000a94:	1b7d      	subs	r5, r7, r5
 8000a96:	46aa      	mov	sl, r5
 8000a98:	428e      	cmp	r6, r1
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_dsub+0x6a>
 8000a9c:	e080      	b.n	8000ba0 <__aeabi_dsub+0x16c>
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	dc00      	bgt.n	8000aa4 <__aeabi_dsub+0x70>
 8000aa2:	e335      	b.n	8001110 <__aeabi_dsub+0x6dc>
 8000aa4:	4649      	mov	r1, r9
 8000aa6:	2900      	cmp	r1, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_dsub+0x78>
 8000aaa:	e0df      	b.n	8000c6c <__aeabi_dsub+0x238>
 8000aac:	4297      	cmp	r7, r2
 8000aae:	d100      	bne.n	8000ab2 <__aeabi_dsub+0x7e>
 8000ab0:	e194      	b.n	8000ddc <__aeabi_dsub+0x3a8>
 8000ab2:	4652      	mov	r2, sl
 8000ab4:	2501      	movs	r5, #1
 8000ab6:	2a38      	cmp	r2, #56	@ 0x38
 8000ab8:	dc19      	bgt.n	8000aee <__aeabi_dsub+0xba>
 8000aba:	2280      	movs	r2, #128	@ 0x80
 8000abc:	9b02      	ldr	r3, [sp, #8]
 8000abe:	0412      	lsls	r2, r2, #16
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	9302      	str	r3, [sp, #8]
 8000ac4:	4652      	mov	r2, sl
 8000ac6:	2a1f      	cmp	r2, #31
 8000ac8:	dd00      	ble.n	8000acc <__aeabi_dsub+0x98>
 8000aca:	e1e3      	b.n	8000e94 <__aeabi_dsub+0x460>
 8000acc:	4653      	mov	r3, sl
 8000ace:	2220      	movs	r2, #32
 8000ad0:	4661      	mov	r1, ip
 8000ad2:	9d02      	ldr	r5, [sp, #8]
 8000ad4:	1ad2      	subs	r2, r2, r3
 8000ad6:	4095      	lsls	r5, r2
 8000ad8:	40d9      	lsrs	r1, r3
 8000ada:	430d      	orrs	r5, r1
 8000adc:	4661      	mov	r1, ip
 8000ade:	4091      	lsls	r1, r2
 8000ae0:	000a      	movs	r2, r1
 8000ae2:	1e51      	subs	r1, r2, #1
 8000ae4:	418a      	sbcs	r2, r1
 8000ae6:	4315      	orrs	r5, r2
 8000ae8:	9a02      	ldr	r2, [sp, #8]
 8000aea:	40da      	lsrs	r2, r3
 8000aec:	1aa4      	subs	r4, r4, r2
 8000aee:	1b45      	subs	r5, r0, r5
 8000af0:	42a8      	cmp	r0, r5
 8000af2:	4180      	sbcs	r0, r0
 8000af4:	4240      	negs	r0, r0
 8000af6:	1a24      	subs	r4, r4, r0
 8000af8:	0223      	lsls	r3, r4, #8
 8000afa:	d400      	bmi.n	8000afe <__aeabi_dsub+0xca>
 8000afc:	e13d      	b.n	8000d7a <__aeabi_dsub+0x346>
 8000afe:	0264      	lsls	r4, r4, #9
 8000b00:	0a64      	lsrs	r4, r4, #9
 8000b02:	2c00      	cmp	r4, #0
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dsub+0xd4>
 8000b06:	e147      	b.n	8000d98 <__aeabi_dsub+0x364>
 8000b08:	0020      	movs	r0, r4
 8000b0a:	f000 fbcd 	bl	80012a8 <__clzsi2>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	3b08      	subs	r3, #8
 8000b12:	2120      	movs	r1, #32
 8000b14:	0028      	movs	r0, r5
 8000b16:	1aca      	subs	r2, r1, r3
 8000b18:	40d0      	lsrs	r0, r2
 8000b1a:	409c      	lsls	r4, r3
 8000b1c:	0002      	movs	r2, r0
 8000b1e:	409d      	lsls	r5, r3
 8000b20:	4322      	orrs	r2, r4
 8000b22:	429f      	cmp	r7, r3
 8000b24:	dd00      	ble.n	8000b28 <__aeabi_dsub+0xf4>
 8000b26:	e177      	b.n	8000e18 <__aeabi_dsub+0x3e4>
 8000b28:	1bd8      	subs	r0, r3, r7
 8000b2a:	3001      	adds	r0, #1
 8000b2c:	1a09      	subs	r1, r1, r0
 8000b2e:	002c      	movs	r4, r5
 8000b30:	408d      	lsls	r5, r1
 8000b32:	40c4      	lsrs	r4, r0
 8000b34:	1e6b      	subs	r3, r5, #1
 8000b36:	419d      	sbcs	r5, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	40c2      	lsrs	r2, r0
 8000b3c:	408b      	lsls	r3, r1
 8000b3e:	4325      	orrs	r5, r4
 8000b40:	2700      	movs	r7, #0
 8000b42:	0014      	movs	r4, r2
 8000b44:	431d      	orrs	r5, r3
 8000b46:	076b      	lsls	r3, r5, #29
 8000b48:	d009      	beq.n	8000b5e <__aeabi_dsub+0x12a>
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	402b      	ands	r3, r5
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	d005      	beq.n	8000b5e <__aeabi_dsub+0x12a>
 8000b52:	1d2b      	adds	r3, r5, #4
 8000b54:	42ab      	cmp	r3, r5
 8000b56:	41ad      	sbcs	r5, r5
 8000b58:	426d      	negs	r5, r5
 8000b5a:	1964      	adds	r4, r4, r5
 8000b5c:	001d      	movs	r5, r3
 8000b5e:	0223      	lsls	r3, r4, #8
 8000b60:	d400      	bmi.n	8000b64 <__aeabi_dsub+0x130>
 8000b62:	e140      	b.n	8000de6 <__aeabi_dsub+0x3b2>
 8000b64:	4a88      	ldr	r2, [pc, #544]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000b66:	3701      	adds	r7, #1
 8000b68:	4297      	cmp	r7, r2
 8000b6a:	d100      	bne.n	8000b6e <__aeabi_dsub+0x13a>
 8000b6c:	e101      	b.n	8000d72 <__aeabi_dsub+0x33e>
 8000b6e:	2601      	movs	r6, #1
 8000b70:	4643      	mov	r3, r8
 8000b72:	4986      	ldr	r1, [pc, #536]	@ (8000d8c <__aeabi_dsub+0x358>)
 8000b74:	08ed      	lsrs	r5, r5, #3
 8000b76:	4021      	ands	r1, r4
 8000b78:	074a      	lsls	r2, r1, #29
 8000b7a:	432a      	orrs	r2, r5
 8000b7c:	057c      	lsls	r4, r7, #21
 8000b7e:	024d      	lsls	r5, r1, #9
 8000b80:	0b2d      	lsrs	r5, r5, #12
 8000b82:	0d64      	lsrs	r4, r4, #21
 8000b84:	401e      	ands	r6, r3
 8000b86:	0524      	lsls	r4, r4, #20
 8000b88:	432c      	orrs	r4, r5
 8000b8a:	07f6      	lsls	r6, r6, #31
 8000b8c:	4334      	orrs	r4, r6
 8000b8e:	0010      	movs	r0, r2
 8000b90:	0021      	movs	r1, r4
 8000b92:	b005      	add	sp, #20
 8000b94:	bcf0      	pop	{r4, r5, r6, r7}
 8000b96:	46bb      	mov	fp, r7
 8000b98:	46b2      	mov	sl, r6
 8000b9a:	46a9      	mov	r9, r5
 8000b9c:	46a0      	mov	r8, r4
 8000b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ba0:	2d00      	cmp	r5, #0
 8000ba2:	dc00      	bgt.n	8000ba6 <__aeabi_dsub+0x172>
 8000ba4:	e2d0      	b.n	8001148 <__aeabi_dsub+0x714>
 8000ba6:	4649      	mov	r1, r9
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	d000      	beq.n	8000bae <__aeabi_dsub+0x17a>
 8000bac:	e0d4      	b.n	8000d58 <__aeabi_dsub+0x324>
 8000bae:	4661      	mov	r1, ip
 8000bb0:	9b02      	ldr	r3, [sp, #8]
 8000bb2:	4319      	orrs	r1, r3
 8000bb4:	d100      	bne.n	8000bb8 <__aeabi_dsub+0x184>
 8000bb6:	e12b      	b.n	8000e10 <__aeabi_dsub+0x3dc>
 8000bb8:	1e69      	subs	r1, r5, #1
 8000bba:	2d01      	cmp	r5, #1
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_dsub+0x18c>
 8000bbe:	e1d9      	b.n	8000f74 <__aeabi_dsub+0x540>
 8000bc0:	4295      	cmp	r5, r2
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_dsub+0x192>
 8000bc4:	e10a      	b.n	8000ddc <__aeabi_dsub+0x3a8>
 8000bc6:	2501      	movs	r5, #1
 8000bc8:	2938      	cmp	r1, #56	@ 0x38
 8000bca:	dc17      	bgt.n	8000bfc <__aeabi_dsub+0x1c8>
 8000bcc:	468a      	mov	sl, r1
 8000bce:	4653      	mov	r3, sl
 8000bd0:	2b1f      	cmp	r3, #31
 8000bd2:	dd00      	ble.n	8000bd6 <__aeabi_dsub+0x1a2>
 8000bd4:	e1e7      	b.n	8000fa6 <__aeabi_dsub+0x572>
 8000bd6:	2220      	movs	r2, #32
 8000bd8:	1ad2      	subs	r2, r2, r3
 8000bda:	9b02      	ldr	r3, [sp, #8]
 8000bdc:	4661      	mov	r1, ip
 8000bde:	4093      	lsls	r3, r2
 8000be0:	001d      	movs	r5, r3
 8000be2:	4653      	mov	r3, sl
 8000be4:	40d9      	lsrs	r1, r3
 8000be6:	4663      	mov	r3, ip
 8000be8:	4093      	lsls	r3, r2
 8000bea:	001a      	movs	r2, r3
 8000bec:	430d      	orrs	r5, r1
 8000bee:	1e51      	subs	r1, r2, #1
 8000bf0:	418a      	sbcs	r2, r1
 8000bf2:	4653      	mov	r3, sl
 8000bf4:	4315      	orrs	r5, r2
 8000bf6:	9a02      	ldr	r2, [sp, #8]
 8000bf8:	40da      	lsrs	r2, r3
 8000bfa:	18a4      	adds	r4, r4, r2
 8000bfc:	182d      	adds	r5, r5, r0
 8000bfe:	4285      	cmp	r5, r0
 8000c00:	4180      	sbcs	r0, r0
 8000c02:	4240      	negs	r0, r0
 8000c04:	1824      	adds	r4, r4, r0
 8000c06:	0223      	lsls	r3, r4, #8
 8000c08:	d400      	bmi.n	8000c0c <__aeabi_dsub+0x1d8>
 8000c0a:	e0b6      	b.n	8000d7a <__aeabi_dsub+0x346>
 8000c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000c0e:	3701      	adds	r7, #1
 8000c10:	429f      	cmp	r7, r3
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dsub+0x1e2>
 8000c14:	e0ad      	b.n	8000d72 <__aeabi_dsub+0x33e>
 8000c16:	2101      	movs	r1, #1
 8000c18:	4b5c      	ldr	r3, [pc, #368]	@ (8000d8c <__aeabi_dsub+0x358>)
 8000c1a:	086a      	lsrs	r2, r5, #1
 8000c1c:	401c      	ands	r4, r3
 8000c1e:	4029      	ands	r1, r5
 8000c20:	430a      	orrs	r2, r1
 8000c22:	07e5      	lsls	r5, r4, #31
 8000c24:	4315      	orrs	r5, r2
 8000c26:	0864      	lsrs	r4, r4, #1
 8000c28:	e78d      	b.n	8000b46 <__aeabi_dsub+0x112>
 8000c2a:	4a59      	ldr	r2, [pc, #356]	@ (8000d90 <__aeabi_dsub+0x35c>)
 8000c2c:	9b02      	ldr	r3, [sp, #8]
 8000c2e:	4692      	mov	sl, r2
 8000c30:	4662      	mov	r2, ip
 8000c32:	44ba      	add	sl, r7
 8000c34:	431a      	orrs	r2, r3
 8000c36:	d02c      	beq.n	8000c92 <__aeabi_dsub+0x25e>
 8000c38:	428e      	cmp	r6, r1
 8000c3a:	d02e      	beq.n	8000c9a <__aeabi_dsub+0x266>
 8000c3c:	4652      	mov	r2, sl
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d060      	beq.n	8000d04 <__aeabi_dsub+0x2d0>
 8000c42:	2f00      	cmp	r7, #0
 8000c44:	d100      	bne.n	8000c48 <__aeabi_dsub+0x214>
 8000c46:	e0db      	b.n	8000e00 <__aeabi_dsub+0x3cc>
 8000c48:	4663      	mov	r3, ip
 8000c4a:	000e      	movs	r6, r1
 8000c4c:	9c02      	ldr	r4, [sp, #8]
 8000c4e:	08d8      	lsrs	r0, r3, #3
 8000c50:	0762      	lsls	r2, r4, #29
 8000c52:	4302      	orrs	r2, r0
 8000c54:	08e4      	lsrs	r4, r4, #3
 8000c56:	0013      	movs	r3, r2
 8000c58:	4323      	orrs	r3, r4
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dsub+0x22a>
 8000c5c:	e254      	b.n	8001108 <__aeabi_dsub+0x6d4>
 8000c5e:	2580      	movs	r5, #128	@ 0x80
 8000c60:	032d      	lsls	r5, r5, #12
 8000c62:	4325      	orrs	r5, r4
 8000c64:	032d      	lsls	r5, r5, #12
 8000c66:	4c48      	ldr	r4, [pc, #288]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000c68:	0b2d      	lsrs	r5, r5, #12
 8000c6a:	e78c      	b.n	8000b86 <__aeabi_dsub+0x152>
 8000c6c:	4661      	mov	r1, ip
 8000c6e:	9b02      	ldr	r3, [sp, #8]
 8000c70:	4319      	orrs	r1, r3
 8000c72:	d100      	bne.n	8000c76 <__aeabi_dsub+0x242>
 8000c74:	e0cc      	b.n	8000e10 <__aeabi_dsub+0x3dc>
 8000c76:	0029      	movs	r1, r5
 8000c78:	3901      	subs	r1, #1
 8000c7a:	2d01      	cmp	r5, #1
 8000c7c:	d100      	bne.n	8000c80 <__aeabi_dsub+0x24c>
 8000c7e:	e188      	b.n	8000f92 <__aeabi_dsub+0x55e>
 8000c80:	4295      	cmp	r5, r2
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dsub+0x252>
 8000c84:	e0aa      	b.n	8000ddc <__aeabi_dsub+0x3a8>
 8000c86:	2501      	movs	r5, #1
 8000c88:	2938      	cmp	r1, #56	@ 0x38
 8000c8a:	dd00      	ble.n	8000c8e <__aeabi_dsub+0x25a>
 8000c8c:	e72f      	b.n	8000aee <__aeabi_dsub+0xba>
 8000c8e:	468a      	mov	sl, r1
 8000c90:	e718      	b.n	8000ac4 <__aeabi_dsub+0x90>
 8000c92:	2201      	movs	r2, #1
 8000c94:	4051      	eors	r1, r2
 8000c96:	428e      	cmp	r6, r1
 8000c98:	d1d0      	bne.n	8000c3c <__aeabi_dsub+0x208>
 8000c9a:	4653      	mov	r3, sl
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d100      	bne.n	8000ca2 <__aeabi_dsub+0x26e>
 8000ca0:	e0be      	b.n	8000e20 <__aeabi_dsub+0x3ec>
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_dsub+0x274>
 8000ca6:	e138      	b.n	8000f1a <__aeabi_dsub+0x4e6>
 8000ca8:	46ca      	mov	sl, r9
 8000caa:	0022      	movs	r2, r4
 8000cac:	4302      	orrs	r2, r0
 8000cae:	d100      	bne.n	8000cb2 <__aeabi_dsub+0x27e>
 8000cb0:	e1e2      	b.n	8001078 <__aeabi_dsub+0x644>
 8000cb2:	4653      	mov	r3, sl
 8000cb4:	1e59      	subs	r1, r3, #1
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dsub+0x288>
 8000cba:	e20d      	b.n	80010d8 <__aeabi_dsub+0x6a4>
 8000cbc:	4a32      	ldr	r2, [pc, #200]	@ (8000d88 <__aeabi_dsub+0x354>)
 8000cbe:	4592      	cmp	sl, r2
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dsub+0x290>
 8000cc2:	e1d2      	b.n	800106a <__aeabi_dsub+0x636>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	2938      	cmp	r1, #56	@ 0x38
 8000cc8:	dc13      	bgt.n	8000cf2 <__aeabi_dsub+0x2be>
 8000cca:	291f      	cmp	r1, #31
 8000ccc:	dd00      	ble.n	8000cd0 <__aeabi_dsub+0x29c>
 8000cce:	e1ee      	b.n	80010ae <__aeabi_dsub+0x67a>
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	9b02      	ldr	r3, [sp, #8]
 8000cd4:	1a52      	subs	r2, r2, r1
 8000cd6:	0025      	movs	r5, r4
 8000cd8:	0007      	movs	r7, r0
 8000cda:	469a      	mov	sl, r3
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4090      	lsls	r0, r2
 8000ce0:	4095      	lsls	r5, r2
 8000ce2:	40cf      	lsrs	r7, r1
 8000ce4:	44a2      	add	sl, r4
 8000ce6:	1e42      	subs	r2, r0, #1
 8000ce8:	4190      	sbcs	r0, r2
 8000cea:	4653      	mov	r3, sl
 8000cec:	432f      	orrs	r7, r5
 8000cee:	4307      	orrs	r7, r0
 8000cf0:	9302      	str	r3, [sp, #8]
 8000cf2:	003d      	movs	r5, r7
 8000cf4:	4465      	add	r5, ip
 8000cf6:	4565      	cmp	r5, ip
 8000cf8:	4192      	sbcs	r2, r2
 8000cfa:	9b02      	ldr	r3, [sp, #8]
 8000cfc:	4252      	negs	r2, r2
 8000cfe:	464f      	mov	r7, r9
 8000d00:	18d4      	adds	r4, r2, r3
 8000d02:	e780      	b.n	8000c06 <__aeabi_dsub+0x1d2>
 8000d04:	4a23      	ldr	r2, [pc, #140]	@ (8000d94 <__aeabi_dsub+0x360>)
 8000d06:	1c7d      	adds	r5, r7, #1
 8000d08:	4215      	tst	r5, r2
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_dsub+0x2da>
 8000d0c:	e0aa      	b.n	8000e64 <__aeabi_dsub+0x430>
 8000d0e:	4662      	mov	r2, ip
 8000d10:	0025      	movs	r5, r4
 8000d12:	9b02      	ldr	r3, [sp, #8]
 8000d14:	4305      	orrs	r5, r0
 8000d16:	431a      	orrs	r2, r3
 8000d18:	2f00      	cmp	r7, #0
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dsub+0x2ea>
 8000d1c:	e0f5      	b.n	8000f0a <__aeabi_dsub+0x4d6>
 8000d1e:	2d00      	cmp	r5, #0
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dsub+0x2f0>
 8000d22:	e16b      	b.n	8000ffc <__aeabi_dsub+0x5c8>
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	d100      	bne.n	8000d2a <__aeabi_dsub+0x2f6>
 8000d28:	e152      	b.n	8000fd0 <__aeabi_dsub+0x59c>
 8000d2a:	4663      	mov	r3, ip
 8000d2c:	1ac5      	subs	r5, r0, r3
 8000d2e:	9b02      	ldr	r3, [sp, #8]
 8000d30:	1ae2      	subs	r2, r4, r3
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	419b      	sbcs	r3, r3
 8000d36:	425b      	negs	r3, r3
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	021a      	lsls	r2, r3, #8
 8000d3c:	d400      	bmi.n	8000d40 <__aeabi_dsub+0x30c>
 8000d3e:	e1d5      	b.n	80010ec <__aeabi_dsub+0x6b8>
 8000d40:	4663      	mov	r3, ip
 8000d42:	1a1d      	subs	r5, r3, r0
 8000d44:	45ac      	cmp	ip, r5
 8000d46:	4192      	sbcs	r2, r2
 8000d48:	2601      	movs	r6, #1
 8000d4a:	9b02      	ldr	r3, [sp, #8]
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	1b1c      	subs	r4, r3, r4
 8000d50:	4688      	mov	r8, r1
 8000d52:	1aa4      	subs	r4, r4, r2
 8000d54:	400e      	ands	r6, r1
 8000d56:	e6f6      	b.n	8000b46 <__aeabi_dsub+0x112>
 8000d58:	4297      	cmp	r7, r2
 8000d5a:	d03f      	beq.n	8000ddc <__aeabi_dsub+0x3a8>
 8000d5c:	4652      	mov	r2, sl
 8000d5e:	2501      	movs	r5, #1
 8000d60:	2a38      	cmp	r2, #56	@ 0x38
 8000d62:	dd00      	ble.n	8000d66 <__aeabi_dsub+0x332>
 8000d64:	e74a      	b.n	8000bfc <__aeabi_dsub+0x1c8>
 8000d66:	2280      	movs	r2, #128	@ 0x80
 8000d68:	9b02      	ldr	r3, [sp, #8]
 8000d6a:	0412      	lsls	r2, r2, #16
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	e72d      	b.n	8000bce <__aeabi_dsub+0x19a>
 8000d72:	003c      	movs	r4, r7
 8000d74:	2500      	movs	r5, #0
 8000d76:	2200      	movs	r2, #0
 8000d78:	e705      	b.n	8000b86 <__aeabi_dsub+0x152>
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	402b      	ands	r3, r5
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d000      	beq.n	8000d84 <__aeabi_dsub+0x350>
 8000d82:	e6e2      	b.n	8000b4a <__aeabi_dsub+0x116>
 8000d84:	e06b      	b.n	8000e5e <__aeabi_dsub+0x42a>
 8000d86:	46c0      	nop			@ (mov r8, r8)
 8000d88:	000007ff 	.word	0x000007ff
 8000d8c:	ff7fffff 	.word	0xff7fffff
 8000d90:	fffff801 	.word	0xfffff801
 8000d94:	000007fe 	.word	0x000007fe
 8000d98:	0028      	movs	r0, r5
 8000d9a:	f000 fa85 	bl	80012a8 <__clzsi2>
 8000d9e:	0003      	movs	r3, r0
 8000da0:	3318      	adds	r3, #24
 8000da2:	2b1f      	cmp	r3, #31
 8000da4:	dc00      	bgt.n	8000da8 <__aeabi_dsub+0x374>
 8000da6:	e6b4      	b.n	8000b12 <__aeabi_dsub+0xde>
 8000da8:	002a      	movs	r2, r5
 8000daa:	3808      	subs	r0, #8
 8000dac:	4082      	lsls	r2, r0
 8000dae:	429f      	cmp	r7, r3
 8000db0:	dd00      	ble.n	8000db4 <__aeabi_dsub+0x380>
 8000db2:	e0b9      	b.n	8000f28 <__aeabi_dsub+0x4f4>
 8000db4:	1bdb      	subs	r3, r3, r7
 8000db6:	1c58      	adds	r0, r3, #1
 8000db8:	281f      	cmp	r0, #31
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_dsub+0x38a>
 8000dbc:	e1a0      	b.n	8001100 <__aeabi_dsub+0x6cc>
 8000dbe:	0015      	movs	r5, r2
 8000dc0:	3b1f      	subs	r3, #31
 8000dc2:	40dd      	lsrs	r5, r3
 8000dc4:	2820      	cmp	r0, #32
 8000dc6:	d005      	beq.n	8000dd4 <__aeabi_dsub+0x3a0>
 8000dc8:	2340      	movs	r3, #64	@ 0x40
 8000dca:	1a1b      	subs	r3, r3, r0
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	1e53      	subs	r3, r2, #1
 8000dd0:	419a      	sbcs	r2, r3
 8000dd2:	4315      	orrs	r5, r2
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	2700      	movs	r7, #0
 8000dd8:	402b      	ands	r3, r5
 8000dda:	e7d0      	b.n	8000d7e <__aeabi_dsub+0x34a>
 8000ddc:	08c0      	lsrs	r0, r0, #3
 8000dde:	0762      	lsls	r2, r4, #29
 8000de0:	4302      	orrs	r2, r0
 8000de2:	08e4      	lsrs	r4, r4, #3
 8000de4:	e737      	b.n	8000c56 <__aeabi_dsub+0x222>
 8000de6:	08ea      	lsrs	r2, r5, #3
 8000de8:	0763      	lsls	r3, r4, #29
 8000dea:	431a      	orrs	r2, r3
 8000dec:	4bd3      	ldr	r3, [pc, #844]	@ (800113c <__aeabi_dsub+0x708>)
 8000dee:	08e4      	lsrs	r4, r4, #3
 8000df0:	429f      	cmp	r7, r3
 8000df2:	d100      	bne.n	8000df6 <__aeabi_dsub+0x3c2>
 8000df4:	e72f      	b.n	8000c56 <__aeabi_dsub+0x222>
 8000df6:	0324      	lsls	r4, r4, #12
 8000df8:	0b25      	lsrs	r5, r4, #12
 8000dfa:	057c      	lsls	r4, r7, #21
 8000dfc:	0d64      	lsrs	r4, r4, #21
 8000dfe:	e6c2      	b.n	8000b86 <__aeabi_dsub+0x152>
 8000e00:	46ca      	mov	sl, r9
 8000e02:	0022      	movs	r2, r4
 8000e04:	4302      	orrs	r2, r0
 8000e06:	d158      	bne.n	8000eba <__aeabi_dsub+0x486>
 8000e08:	4663      	mov	r3, ip
 8000e0a:	000e      	movs	r6, r1
 8000e0c:	9c02      	ldr	r4, [sp, #8]
 8000e0e:	9303      	str	r3, [sp, #12]
 8000e10:	9b03      	ldr	r3, [sp, #12]
 8000e12:	4657      	mov	r7, sl
 8000e14:	08da      	lsrs	r2, r3, #3
 8000e16:	e7e7      	b.n	8000de8 <__aeabi_dsub+0x3b4>
 8000e18:	4cc9      	ldr	r4, [pc, #804]	@ (8001140 <__aeabi_dsub+0x70c>)
 8000e1a:	1aff      	subs	r7, r7, r3
 8000e1c:	4014      	ands	r4, r2
 8000e1e:	e692      	b.n	8000b46 <__aeabi_dsub+0x112>
 8000e20:	4dc8      	ldr	r5, [pc, #800]	@ (8001144 <__aeabi_dsub+0x710>)
 8000e22:	1c7a      	adds	r2, r7, #1
 8000e24:	422a      	tst	r2, r5
 8000e26:	d000      	beq.n	8000e2a <__aeabi_dsub+0x3f6>
 8000e28:	e084      	b.n	8000f34 <__aeabi_dsub+0x500>
 8000e2a:	0022      	movs	r2, r4
 8000e2c:	4302      	orrs	r2, r0
 8000e2e:	2f00      	cmp	r7, #0
 8000e30:	d000      	beq.n	8000e34 <__aeabi_dsub+0x400>
 8000e32:	e0ef      	b.n	8001014 <__aeabi_dsub+0x5e0>
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_dsub+0x406>
 8000e38:	e0e5      	b.n	8001006 <__aeabi_dsub+0x5d2>
 8000e3a:	4662      	mov	r2, ip
 8000e3c:	9902      	ldr	r1, [sp, #8]
 8000e3e:	430a      	orrs	r2, r1
 8000e40:	d100      	bne.n	8000e44 <__aeabi_dsub+0x410>
 8000e42:	e0c5      	b.n	8000fd0 <__aeabi_dsub+0x59c>
 8000e44:	4663      	mov	r3, ip
 8000e46:	18c5      	adds	r5, r0, r3
 8000e48:	468c      	mov	ip, r1
 8000e4a:	4285      	cmp	r5, r0
 8000e4c:	4180      	sbcs	r0, r0
 8000e4e:	4464      	add	r4, ip
 8000e50:	4240      	negs	r0, r0
 8000e52:	1824      	adds	r4, r4, r0
 8000e54:	0223      	lsls	r3, r4, #8
 8000e56:	d502      	bpl.n	8000e5e <__aeabi_dsub+0x42a>
 8000e58:	4bb9      	ldr	r3, [pc, #740]	@ (8001140 <__aeabi_dsub+0x70c>)
 8000e5a:	3701      	adds	r7, #1
 8000e5c:	401c      	ands	r4, r3
 8000e5e:	46ba      	mov	sl, r7
 8000e60:	9503      	str	r5, [sp, #12]
 8000e62:	e7d5      	b.n	8000e10 <__aeabi_dsub+0x3dc>
 8000e64:	4662      	mov	r2, ip
 8000e66:	1a85      	subs	r5, r0, r2
 8000e68:	42a8      	cmp	r0, r5
 8000e6a:	4192      	sbcs	r2, r2
 8000e6c:	4252      	negs	r2, r2
 8000e6e:	4691      	mov	r9, r2
 8000e70:	9b02      	ldr	r3, [sp, #8]
 8000e72:	1ae3      	subs	r3, r4, r3
 8000e74:	001a      	movs	r2, r3
 8000e76:	464b      	mov	r3, r9
 8000e78:	1ad2      	subs	r2, r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	4691      	mov	r9, r2
 8000e7e:	021a      	lsls	r2, r3, #8
 8000e80:	d46c      	bmi.n	8000f5c <__aeabi_dsub+0x528>
 8000e82:	464a      	mov	r2, r9
 8000e84:	464c      	mov	r4, r9
 8000e86:	432a      	orrs	r2, r5
 8000e88:	d000      	beq.n	8000e8c <__aeabi_dsub+0x458>
 8000e8a:	e63a      	b.n	8000b02 <__aeabi_dsub+0xce>
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	2400      	movs	r4, #0
 8000e90:	2500      	movs	r5, #0
 8000e92:	e678      	b.n	8000b86 <__aeabi_dsub+0x152>
 8000e94:	9902      	ldr	r1, [sp, #8]
 8000e96:	4653      	mov	r3, sl
 8000e98:	000d      	movs	r5, r1
 8000e9a:	3a20      	subs	r2, #32
 8000e9c:	40d5      	lsrs	r5, r2
 8000e9e:	2b20      	cmp	r3, #32
 8000ea0:	d006      	beq.n	8000eb0 <__aeabi_dsub+0x47c>
 8000ea2:	2240      	movs	r2, #64	@ 0x40
 8000ea4:	1ad2      	subs	r2, r2, r3
 8000ea6:	000b      	movs	r3, r1
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	4662      	mov	r2, ip
 8000eac:	431a      	orrs	r2, r3
 8000eae:	4693      	mov	fp, r2
 8000eb0:	465b      	mov	r3, fp
 8000eb2:	1e5a      	subs	r2, r3, #1
 8000eb4:	4193      	sbcs	r3, r2
 8000eb6:	431d      	orrs	r5, r3
 8000eb8:	e619      	b.n	8000aee <__aeabi_dsub+0xba>
 8000eba:	4653      	mov	r3, sl
 8000ebc:	1e5a      	subs	r2, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_dsub+0x490>
 8000ec2:	e0c6      	b.n	8001052 <__aeabi_dsub+0x61e>
 8000ec4:	4e9d      	ldr	r6, [pc, #628]	@ (800113c <__aeabi_dsub+0x708>)
 8000ec6:	45b2      	cmp	sl, r6
 8000ec8:	d100      	bne.n	8000ecc <__aeabi_dsub+0x498>
 8000eca:	e6bd      	b.n	8000c48 <__aeabi_dsub+0x214>
 8000ecc:	4688      	mov	r8, r1
 8000ece:	000e      	movs	r6, r1
 8000ed0:	2501      	movs	r5, #1
 8000ed2:	2a38      	cmp	r2, #56	@ 0x38
 8000ed4:	dc10      	bgt.n	8000ef8 <__aeabi_dsub+0x4c4>
 8000ed6:	2a1f      	cmp	r2, #31
 8000ed8:	dc7f      	bgt.n	8000fda <__aeabi_dsub+0x5a6>
 8000eda:	2120      	movs	r1, #32
 8000edc:	0025      	movs	r5, r4
 8000ede:	1a89      	subs	r1, r1, r2
 8000ee0:	0007      	movs	r7, r0
 8000ee2:	4088      	lsls	r0, r1
 8000ee4:	408d      	lsls	r5, r1
 8000ee6:	40d7      	lsrs	r7, r2
 8000ee8:	40d4      	lsrs	r4, r2
 8000eea:	1e41      	subs	r1, r0, #1
 8000eec:	4188      	sbcs	r0, r1
 8000eee:	9b02      	ldr	r3, [sp, #8]
 8000ef0:	433d      	orrs	r5, r7
 8000ef2:	1b1b      	subs	r3, r3, r4
 8000ef4:	4305      	orrs	r5, r0
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	4662      	mov	r2, ip
 8000efa:	1b55      	subs	r5, r2, r5
 8000efc:	45ac      	cmp	ip, r5
 8000efe:	4192      	sbcs	r2, r2
 8000f00:	9b02      	ldr	r3, [sp, #8]
 8000f02:	4252      	negs	r2, r2
 8000f04:	464f      	mov	r7, r9
 8000f06:	1a9c      	subs	r4, r3, r2
 8000f08:	e5f6      	b.n	8000af8 <__aeabi_dsub+0xc4>
 8000f0a:	2d00      	cmp	r5, #0
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_dsub+0x4dc>
 8000f0e:	e0b7      	b.n	8001080 <__aeabi_dsub+0x64c>
 8000f10:	2a00      	cmp	r2, #0
 8000f12:	d100      	bne.n	8000f16 <__aeabi_dsub+0x4e2>
 8000f14:	e0f0      	b.n	80010f8 <__aeabi_dsub+0x6c4>
 8000f16:	2601      	movs	r6, #1
 8000f18:	400e      	ands	r6, r1
 8000f1a:	4663      	mov	r3, ip
 8000f1c:	9802      	ldr	r0, [sp, #8]
 8000f1e:	08d9      	lsrs	r1, r3, #3
 8000f20:	0742      	lsls	r2, r0, #29
 8000f22:	430a      	orrs	r2, r1
 8000f24:	08c4      	lsrs	r4, r0, #3
 8000f26:	e696      	b.n	8000c56 <__aeabi_dsub+0x222>
 8000f28:	4c85      	ldr	r4, [pc, #532]	@ (8001140 <__aeabi_dsub+0x70c>)
 8000f2a:	1aff      	subs	r7, r7, r3
 8000f2c:	4014      	ands	r4, r2
 8000f2e:	0762      	lsls	r2, r4, #29
 8000f30:	08e4      	lsrs	r4, r4, #3
 8000f32:	e760      	b.n	8000df6 <__aeabi_dsub+0x3c2>
 8000f34:	4981      	ldr	r1, [pc, #516]	@ (800113c <__aeabi_dsub+0x708>)
 8000f36:	428a      	cmp	r2, r1
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dsub+0x508>
 8000f3a:	e0c9      	b.n	80010d0 <__aeabi_dsub+0x69c>
 8000f3c:	4663      	mov	r3, ip
 8000f3e:	18c1      	adds	r1, r0, r3
 8000f40:	4281      	cmp	r1, r0
 8000f42:	4180      	sbcs	r0, r0
 8000f44:	9b02      	ldr	r3, [sp, #8]
 8000f46:	4240      	negs	r0, r0
 8000f48:	18e3      	adds	r3, r4, r3
 8000f4a:	181b      	adds	r3, r3, r0
 8000f4c:	07dd      	lsls	r5, r3, #31
 8000f4e:	085c      	lsrs	r4, r3, #1
 8000f50:	2307      	movs	r3, #7
 8000f52:	0849      	lsrs	r1, r1, #1
 8000f54:	430d      	orrs	r5, r1
 8000f56:	0017      	movs	r7, r2
 8000f58:	402b      	ands	r3, r5
 8000f5a:	e710      	b.n	8000d7e <__aeabi_dsub+0x34a>
 8000f5c:	4663      	mov	r3, ip
 8000f5e:	1a1d      	subs	r5, r3, r0
 8000f60:	45ac      	cmp	ip, r5
 8000f62:	4192      	sbcs	r2, r2
 8000f64:	2601      	movs	r6, #1
 8000f66:	9b02      	ldr	r3, [sp, #8]
 8000f68:	4252      	negs	r2, r2
 8000f6a:	1b1c      	subs	r4, r3, r4
 8000f6c:	4688      	mov	r8, r1
 8000f6e:	1aa4      	subs	r4, r4, r2
 8000f70:	400e      	ands	r6, r1
 8000f72:	e5c6      	b.n	8000b02 <__aeabi_dsub+0xce>
 8000f74:	4663      	mov	r3, ip
 8000f76:	18c5      	adds	r5, r0, r3
 8000f78:	9b02      	ldr	r3, [sp, #8]
 8000f7a:	4285      	cmp	r5, r0
 8000f7c:	4180      	sbcs	r0, r0
 8000f7e:	469c      	mov	ip, r3
 8000f80:	4240      	negs	r0, r0
 8000f82:	4464      	add	r4, ip
 8000f84:	1824      	adds	r4, r4, r0
 8000f86:	2701      	movs	r7, #1
 8000f88:	0223      	lsls	r3, r4, #8
 8000f8a:	d400      	bmi.n	8000f8e <__aeabi_dsub+0x55a>
 8000f8c:	e6f5      	b.n	8000d7a <__aeabi_dsub+0x346>
 8000f8e:	2702      	movs	r7, #2
 8000f90:	e641      	b.n	8000c16 <__aeabi_dsub+0x1e2>
 8000f92:	4663      	mov	r3, ip
 8000f94:	1ac5      	subs	r5, r0, r3
 8000f96:	42a8      	cmp	r0, r5
 8000f98:	4180      	sbcs	r0, r0
 8000f9a:	9b02      	ldr	r3, [sp, #8]
 8000f9c:	4240      	negs	r0, r0
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	2701      	movs	r7, #1
 8000fa2:	1a24      	subs	r4, r4, r0
 8000fa4:	e5a8      	b.n	8000af8 <__aeabi_dsub+0xc4>
 8000fa6:	9d02      	ldr	r5, [sp, #8]
 8000fa8:	4652      	mov	r2, sl
 8000faa:	002b      	movs	r3, r5
 8000fac:	3a20      	subs	r2, #32
 8000fae:	40d3      	lsrs	r3, r2
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	4653      	mov	r3, sl
 8000fb4:	2b20      	cmp	r3, #32
 8000fb6:	d006      	beq.n	8000fc6 <__aeabi_dsub+0x592>
 8000fb8:	2240      	movs	r2, #64	@ 0x40
 8000fba:	1ad2      	subs	r2, r2, r3
 8000fbc:	002b      	movs	r3, r5
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	4662      	mov	r2, ip
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	4693      	mov	fp, r2
 8000fc6:	465d      	mov	r5, fp
 8000fc8:	1e6b      	subs	r3, r5, #1
 8000fca:	419d      	sbcs	r5, r3
 8000fcc:	430d      	orrs	r5, r1
 8000fce:	e615      	b.n	8000bfc <__aeabi_dsub+0x1c8>
 8000fd0:	0762      	lsls	r2, r4, #29
 8000fd2:	08c0      	lsrs	r0, r0, #3
 8000fd4:	4302      	orrs	r2, r0
 8000fd6:	08e4      	lsrs	r4, r4, #3
 8000fd8:	e70d      	b.n	8000df6 <__aeabi_dsub+0x3c2>
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0027      	movs	r7, r4
 8000fde:	3920      	subs	r1, #32
 8000fe0:	40cf      	lsrs	r7, r1
 8000fe2:	2a20      	cmp	r2, #32
 8000fe4:	d005      	beq.n	8000ff2 <__aeabi_dsub+0x5be>
 8000fe6:	2140      	movs	r1, #64	@ 0x40
 8000fe8:	1a8a      	subs	r2, r1, r2
 8000fea:	4094      	lsls	r4, r2
 8000fec:	0025      	movs	r5, r4
 8000fee:	4305      	orrs	r5, r0
 8000ff0:	9503      	str	r5, [sp, #12]
 8000ff2:	9d03      	ldr	r5, [sp, #12]
 8000ff4:	1e6a      	subs	r2, r5, #1
 8000ff6:	4195      	sbcs	r5, r2
 8000ff8:	433d      	orrs	r5, r7
 8000ffa:	e77d      	b.n	8000ef8 <__aeabi_dsub+0x4c4>
 8000ffc:	2a00      	cmp	r2, #0
 8000ffe:	d100      	bne.n	8001002 <__aeabi_dsub+0x5ce>
 8001000:	e744      	b.n	8000e8c <__aeabi_dsub+0x458>
 8001002:	2601      	movs	r6, #1
 8001004:	400e      	ands	r6, r1
 8001006:	4663      	mov	r3, ip
 8001008:	08d9      	lsrs	r1, r3, #3
 800100a:	9b02      	ldr	r3, [sp, #8]
 800100c:	075a      	lsls	r2, r3, #29
 800100e:	430a      	orrs	r2, r1
 8001010:	08dc      	lsrs	r4, r3, #3
 8001012:	e6f0      	b.n	8000df6 <__aeabi_dsub+0x3c2>
 8001014:	2a00      	cmp	r2, #0
 8001016:	d028      	beq.n	800106a <__aeabi_dsub+0x636>
 8001018:	4662      	mov	r2, ip
 800101a:	9f02      	ldr	r7, [sp, #8]
 800101c:	08c0      	lsrs	r0, r0, #3
 800101e:	433a      	orrs	r2, r7
 8001020:	d100      	bne.n	8001024 <__aeabi_dsub+0x5f0>
 8001022:	e6dc      	b.n	8000dde <__aeabi_dsub+0x3aa>
 8001024:	0762      	lsls	r2, r4, #29
 8001026:	4310      	orrs	r0, r2
 8001028:	2280      	movs	r2, #128	@ 0x80
 800102a:	08e4      	lsrs	r4, r4, #3
 800102c:	0312      	lsls	r2, r2, #12
 800102e:	4214      	tst	r4, r2
 8001030:	d009      	beq.n	8001046 <__aeabi_dsub+0x612>
 8001032:	08fd      	lsrs	r5, r7, #3
 8001034:	4215      	tst	r5, r2
 8001036:	d106      	bne.n	8001046 <__aeabi_dsub+0x612>
 8001038:	4663      	mov	r3, ip
 800103a:	2601      	movs	r6, #1
 800103c:	002c      	movs	r4, r5
 800103e:	08d8      	lsrs	r0, r3, #3
 8001040:	077b      	lsls	r3, r7, #29
 8001042:	4318      	orrs	r0, r3
 8001044:	400e      	ands	r6, r1
 8001046:	0f42      	lsrs	r2, r0, #29
 8001048:	00c0      	lsls	r0, r0, #3
 800104a:	08c0      	lsrs	r0, r0, #3
 800104c:	0752      	lsls	r2, r2, #29
 800104e:	4302      	orrs	r2, r0
 8001050:	e601      	b.n	8000c56 <__aeabi_dsub+0x222>
 8001052:	4663      	mov	r3, ip
 8001054:	1a1d      	subs	r5, r3, r0
 8001056:	45ac      	cmp	ip, r5
 8001058:	4192      	sbcs	r2, r2
 800105a:	9b02      	ldr	r3, [sp, #8]
 800105c:	4252      	negs	r2, r2
 800105e:	1b1c      	subs	r4, r3, r4
 8001060:	000e      	movs	r6, r1
 8001062:	4688      	mov	r8, r1
 8001064:	2701      	movs	r7, #1
 8001066:	1aa4      	subs	r4, r4, r2
 8001068:	e546      	b.n	8000af8 <__aeabi_dsub+0xc4>
 800106a:	4663      	mov	r3, ip
 800106c:	08d9      	lsrs	r1, r3, #3
 800106e:	9b02      	ldr	r3, [sp, #8]
 8001070:	075a      	lsls	r2, r3, #29
 8001072:	430a      	orrs	r2, r1
 8001074:	08dc      	lsrs	r4, r3, #3
 8001076:	e5ee      	b.n	8000c56 <__aeabi_dsub+0x222>
 8001078:	4663      	mov	r3, ip
 800107a:	9c02      	ldr	r4, [sp, #8]
 800107c:	9303      	str	r3, [sp, #12]
 800107e:	e6c7      	b.n	8000e10 <__aeabi_dsub+0x3dc>
 8001080:	08c0      	lsrs	r0, r0, #3
 8001082:	2a00      	cmp	r2, #0
 8001084:	d100      	bne.n	8001088 <__aeabi_dsub+0x654>
 8001086:	e6aa      	b.n	8000dde <__aeabi_dsub+0x3aa>
 8001088:	0762      	lsls	r2, r4, #29
 800108a:	4310      	orrs	r0, r2
 800108c:	2280      	movs	r2, #128	@ 0x80
 800108e:	08e4      	lsrs	r4, r4, #3
 8001090:	0312      	lsls	r2, r2, #12
 8001092:	4214      	tst	r4, r2
 8001094:	d0d7      	beq.n	8001046 <__aeabi_dsub+0x612>
 8001096:	9f02      	ldr	r7, [sp, #8]
 8001098:	08fd      	lsrs	r5, r7, #3
 800109a:	4215      	tst	r5, r2
 800109c:	d1d3      	bne.n	8001046 <__aeabi_dsub+0x612>
 800109e:	4663      	mov	r3, ip
 80010a0:	2601      	movs	r6, #1
 80010a2:	08d8      	lsrs	r0, r3, #3
 80010a4:	077b      	lsls	r3, r7, #29
 80010a6:	002c      	movs	r4, r5
 80010a8:	4318      	orrs	r0, r3
 80010aa:	400e      	ands	r6, r1
 80010ac:	e7cb      	b.n	8001046 <__aeabi_dsub+0x612>
 80010ae:	000a      	movs	r2, r1
 80010b0:	0027      	movs	r7, r4
 80010b2:	3a20      	subs	r2, #32
 80010b4:	40d7      	lsrs	r7, r2
 80010b6:	2920      	cmp	r1, #32
 80010b8:	d005      	beq.n	80010c6 <__aeabi_dsub+0x692>
 80010ba:	2240      	movs	r2, #64	@ 0x40
 80010bc:	1a52      	subs	r2, r2, r1
 80010be:	4094      	lsls	r4, r2
 80010c0:	0025      	movs	r5, r4
 80010c2:	4305      	orrs	r5, r0
 80010c4:	9503      	str	r5, [sp, #12]
 80010c6:	9d03      	ldr	r5, [sp, #12]
 80010c8:	1e6a      	subs	r2, r5, #1
 80010ca:	4195      	sbcs	r5, r2
 80010cc:	432f      	orrs	r7, r5
 80010ce:	e610      	b.n	8000cf2 <__aeabi_dsub+0x2be>
 80010d0:	0014      	movs	r4, r2
 80010d2:	2500      	movs	r5, #0
 80010d4:	2200      	movs	r2, #0
 80010d6:	e556      	b.n	8000b86 <__aeabi_dsub+0x152>
 80010d8:	9b02      	ldr	r3, [sp, #8]
 80010da:	4460      	add	r0, ip
 80010dc:	4699      	mov	r9, r3
 80010de:	4560      	cmp	r0, ip
 80010e0:	4192      	sbcs	r2, r2
 80010e2:	444c      	add	r4, r9
 80010e4:	4252      	negs	r2, r2
 80010e6:	0005      	movs	r5, r0
 80010e8:	18a4      	adds	r4, r4, r2
 80010ea:	e74c      	b.n	8000f86 <__aeabi_dsub+0x552>
 80010ec:	001a      	movs	r2, r3
 80010ee:	001c      	movs	r4, r3
 80010f0:	432a      	orrs	r2, r5
 80010f2:	d000      	beq.n	80010f6 <__aeabi_dsub+0x6c2>
 80010f4:	e6b3      	b.n	8000e5e <__aeabi_dsub+0x42a>
 80010f6:	e6c9      	b.n	8000e8c <__aeabi_dsub+0x458>
 80010f8:	2480      	movs	r4, #128	@ 0x80
 80010fa:	2600      	movs	r6, #0
 80010fc:	0324      	lsls	r4, r4, #12
 80010fe:	e5ae      	b.n	8000c5e <__aeabi_dsub+0x22a>
 8001100:	2120      	movs	r1, #32
 8001102:	2500      	movs	r5, #0
 8001104:	1a09      	subs	r1, r1, r0
 8001106:	e517      	b.n	8000b38 <__aeabi_dsub+0x104>
 8001108:	2200      	movs	r2, #0
 800110a:	2500      	movs	r5, #0
 800110c:	4c0b      	ldr	r4, [pc, #44]	@ (800113c <__aeabi_dsub+0x708>)
 800110e:	e53a      	b.n	8000b86 <__aeabi_dsub+0x152>
 8001110:	2d00      	cmp	r5, #0
 8001112:	d100      	bne.n	8001116 <__aeabi_dsub+0x6e2>
 8001114:	e5f6      	b.n	8000d04 <__aeabi_dsub+0x2d0>
 8001116:	464b      	mov	r3, r9
 8001118:	1bda      	subs	r2, r3, r7
 800111a:	4692      	mov	sl, r2
 800111c:	2f00      	cmp	r7, #0
 800111e:	d100      	bne.n	8001122 <__aeabi_dsub+0x6ee>
 8001120:	e66f      	b.n	8000e02 <__aeabi_dsub+0x3ce>
 8001122:	2a38      	cmp	r2, #56	@ 0x38
 8001124:	dc05      	bgt.n	8001132 <__aeabi_dsub+0x6fe>
 8001126:	2680      	movs	r6, #128	@ 0x80
 8001128:	0436      	lsls	r6, r6, #16
 800112a:	4334      	orrs	r4, r6
 800112c:	4688      	mov	r8, r1
 800112e:	000e      	movs	r6, r1
 8001130:	e6d1      	b.n	8000ed6 <__aeabi_dsub+0x4a2>
 8001132:	4688      	mov	r8, r1
 8001134:	000e      	movs	r6, r1
 8001136:	2501      	movs	r5, #1
 8001138:	e6de      	b.n	8000ef8 <__aeabi_dsub+0x4c4>
 800113a:	46c0      	nop			@ (mov r8, r8)
 800113c:	000007ff 	.word	0x000007ff
 8001140:	ff7fffff 	.word	0xff7fffff
 8001144:	000007fe 	.word	0x000007fe
 8001148:	2d00      	cmp	r5, #0
 800114a:	d100      	bne.n	800114e <__aeabi_dsub+0x71a>
 800114c:	e668      	b.n	8000e20 <__aeabi_dsub+0x3ec>
 800114e:	464b      	mov	r3, r9
 8001150:	1bd9      	subs	r1, r3, r7
 8001152:	2f00      	cmp	r7, #0
 8001154:	d101      	bne.n	800115a <__aeabi_dsub+0x726>
 8001156:	468a      	mov	sl, r1
 8001158:	e5a7      	b.n	8000caa <__aeabi_dsub+0x276>
 800115a:	2701      	movs	r7, #1
 800115c:	2938      	cmp	r1, #56	@ 0x38
 800115e:	dd00      	ble.n	8001162 <__aeabi_dsub+0x72e>
 8001160:	e5c7      	b.n	8000cf2 <__aeabi_dsub+0x2be>
 8001162:	2280      	movs	r2, #128	@ 0x80
 8001164:	0412      	lsls	r2, r2, #16
 8001166:	4314      	orrs	r4, r2
 8001168:	e5af      	b.n	8000cca <__aeabi_dsub+0x296>
 800116a:	46c0      	nop			@ (mov r8, r8)

0800116c <__aeabi_d2iz>:
 800116c:	000b      	movs	r3, r1
 800116e:	0002      	movs	r2, r0
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	4d16      	ldr	r5, [pc, #88]	@ (80011cc <__aeabi_d2iz+0x60>)
 8001174:	030c      	lsls	r4, r1, #12
 8001176:	b082      	sub	sp, #8
 8001178:	0049      	lsls	r1, r1, #1
 800117a:	2000      	movs	r0, #0
 800117c:	9200      	str	r2, [sp, #0]
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	0b24      	lsrs	r4, r4, #12
 8001182:	0d49      	lsrs	r1, r1, #21
 8001184:	0fde      	lsrs	r6, r3, #31
 8001186:	42a9      	cmp	r1, r5
 8001188:	dd04      	ble.n	8001194 <__aeabi_d2iz+0x28>
 800118a:	4811      	ldr	r0, [pc, #68]	@ (80011d0 <__aeabi_d2iz+0x64>)
 800118c:	4281      	cmp	r1, r0
 800118e:	dd03      	ble.n	8001198 <__aeabi_d2iz+0x2c>
 8001190:	4b10      	ldr	r3, [pc, #64]	@ (80011d4 <__aeabi_d2iz+0x68>)
 8001192:	18f0      	adds	r0, r6, r3
 8001194:	b002      	add	sp, #8
 8001196:	bd70      	pop	{r4, r5, r6, pc}
 8001198:	2080      	movs	r0, #128	@ 0x80
 800119a:	0340      	lsls	r0, r0, #13
 800119c:	4320      	orrs	r0, r4
 800119e:	4c0e      	ldr	r4, [pc, #56]	@ (80011d8 <__aeabi_d2iz+0x6c>)
 80011a0:	1a64      	subs	r4, r4, r1
 80011a2:	2c1f      	cmp	r4, #31
 80011a4:	dd08      	ble.n	80011b8 <__aeabi_d2iz+0x4c>
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <__aeabi_d2iz+0x70>)
 80011a8:	1a5b      	subs	r3, r3, r1
 80011aa:	40d8      	lsrs	r0, r3
 80011ac:	0003      	movs	r3, r0
 80011ae:	4258      	negs	r0, r3
 80011b0:	2e00      	cmp	r6, #0
 80011b2:	d1ef      	bne.n	8001194 <__aeabi_d2iz+0x28>
 80011b4:	0018      	movs	r0, r3
 80011b6:	e7ed      	b.n	8001194 <__aeabi_d2iz+0x28>
 80011b8:	4b09      	ldr	r3, [pc, #36]	@ (80011e0 <__aeabi_d2iz+0x74>)
 80011ba:	9a00      	ldr	r2, [sp, #0]
 80011bc:	469c      	mov	ip, r3
 80011be:	0003      	movs	r3, r0
 80011c0:	4461      	add	r1, ip
 80011c2:	408b      	lsls	r3, r1
 80011c4:	40e2      	lsrs	r2, r4
 80011c6:	4313      	orrs	r3, r2
 80011c8:	e7f1      	b.n	80011ae <__aeabi_d2iz+0x42>
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	000003fe 	.word	0x000003fe
 80011d0:	0000041d 	.word	0x0000041d
 80011d4:	7fffffff 	.word	0x7fffffff
 80011d8:	00000433 	.word	0x00000433
 80011dc:	00000413 	.word	0x00000413
 80011e0:	fffffbed 	.word	0xfffffbed

080011e4 <__aeabi_ui2d>:
 80011e4:	b510      	push	{r4, lr}
 80011e6:	1e04      	subs	r4, r0, #0
 80011e8:	d010      	beq.n	800120c <__aeabi_ui2d+0x28>
 80011ea:	f000 f85d 	bl	80012a8 <__clzsi2>
 80011ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001228 <__aeabi_ui2d+0x44>)
 80011f0:	1a1b      	subs	r3, r3, r0
 80011f2:	055b      	lsls	r3, r3, #21
 80011f4:	0d5b      	lsrs	r3, r3, #21
 80011f6:	280a      	cmp	r0, #10
 80011f8:	dc0f      	bgt.n	800121a <__aeabi_ui2d+0x36>
 80011fa:	220b      	movs	r2, #11
 80011fc:	0021      	movs	r1, r4
 80011fe:	1a12      	subs	r2, r2, r0
 8001200:	40d1      	lsrs	r1, r2
 8001202:	3015      	adds	r0, #21
 8001204:	030a      	lsls	r2, r1, #12
 8001206:	4084      	lsls	r4, r0
 8001208:	0b12      	lsrs	r2, r2, #12
 800120a:	e001      	b.n	8001210 <__aeabi_ui2d+0x2c>
 800120c:	2300      	movs	r3, #0
 800120e:	2200      	movs	r2, #0
 8001210:	051b      	lsls	r3, r3, #20
 8001212:	4313      	orrs	r3, r2
 8001214:	0020      	movs	r0, r4
 8001216:	0019      	movs	r1, r3
 8001218:	bd10      	pop	{r4, pc}
 800121a:	0022      	movs	r2, r4
 800121c:	380b      	subs	r0, #11
 800121e:	4082      	lsls	r2, r0
 8001220:	0312      	lsls	r2, r2, #12
 8001222:	2400      	movs	r4, #0
 8001224:	0b12      	lsrs	r2, r2, #12
 8001226:	e7f3      	b.n	8001210 <__aeabi_ui2d+0x2c>
 8001228:	0000041e 	.word	0x0000041e

0800122c <__aeabi_cdrcmple>:
 800122c:	4684      	mov	ip, r0
 800122e:	0010      	movs	r0, r2
 8001230:	4662      	mov	r2, ip
 8001232:	468c      	mov	ip, r1
 8001234:	0019      	movs	r1, r3
 8001236:	4663      	mov	r3, ip
 8001238:	e000      	b.n	800123c <__aeabi_cdcmpeq>
 800123a:	46c0      	nop			@ (mov r8, r8)

0800123c <__aeabi_cdcmpeq>:
 800123c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800123e:	f000 f915 	bl	800146c <__ledf2>
 8001242:	2800      	cmp	r0, #0
 8001244:	d401      	bmi.n	800124a <__aeabi_cdcmpeq+0xe>
 8001246:	2100      	movs	r1, #0
 8001248:	42c8      	cmn	r0, r1
 800124a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800124c <__aeabi_dcmpeq>:
 800124c:	b510      	push	{r4, lr}
 800124e:	f000 f855 	bl	80012fc <__eqdf2>
 8001252:	4240      	negs	r0, r0
 8001254:	3001      	adds	r0, #1
 8001256:	bd10      	pop	{r4, pc}

08001258 <__aeabi_dcmplt>:
 8001258:	b510      	push	{r4, lr}
 800125a:	f000 f907 	bl	800146c <__ledf2>
 800125e:	2800      	cmp	r0, #0
 8001260:	db01      	blt.n	8001266 <__aeabi_dcmplt+0xe>
 8001262:	2000      	movs	r0, #0
 8001264:	bd10      	pop	{r4, pc}
 8001266:	2001      	movs	r0, #1
 8001268:	bd10      	pop	{r4, pc}
 800126a:	46c0      	nop			@ (mov r8, r8)

0800126c <__aeabi_dcmple>:
 800126c:	b510      	push	{r4, lr}
 800126e:	f000 f8fd 	bl	800146c <__ledf2>
 8001272:	2800      	cmp	r0, #0
 8001274:	dd01      	ble.n	800127a <__aeabi_dcmple+0xe>
 8001276:	2000      	movs	r0, #0
 8001278:	bd10      	pop	{r4, pc}
 800127a:	2001      	movs	r0, #1
 800127c:	bd10      	pop	{r4, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)

08001280 <__aeabi_dcmpgt>:
 8001280:	b510      	push	{r4, lr}
 8001282:	f000 f87f 	bl	8001384 <__gedf2>
 8001286:	2800      	cmp	r0, #0
 8001288:	dc01      	bgt.n	800128e <__aeabi_dcmpgt+0xe>
 800128a:	2000      	movs	r0, #0
 800128c:	bd10      	pop	{r4, pc}
 800128e:	2001      	movs	r0, #1
 8001290:	bd10      	pop	{r4, pc}
 8001292:	46c0      	nop			@ (mov r8, r8)

08001294 <__aeabi_dcmpge>:
 8001294:	b510      	push	{r4, lr}
 8001296:	f000 f875 	bl	8001384 <__gedf2>
 800129a:	2800      	cmp	r0, #0
 800129c:	da01      	bge.n	80012a2 <__aeabi_dcmpge+0xe>
 800129e:	2000      	movs	r0, #0
 80012a0:	bd10      	pop	{r4, pc}
 80012a2:	2001      	movs	r0, #1
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)

080012a8 <__clzsi2>:
 80012a8:	211c      	movs	r1, #28
 80012aa:	2301      	movs	r3, #1
 80012ac:	041b      	lsls	r3, r3, #16
 80012ae:	4298      	cmp	r0, r3
 80012b0:	d301      	bcc.n	80012b6 <__clzsi2+0xe>
 80012b2:	0c00      	lsrs	r0, r0, #16
 80012b4:	3910      	subs	r1, #16
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	4298      	cmp	r0, r3
 80012ba:	d301      	bcc.n	80012c0 <__clzsi2+0x18>
 80012bc:	0a00      	lsrs	r0, r0, #8
 80012be:	3908      	subs	r1, #8
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	4298      	cmp	r0, r3
 80012c4:	d301      	bcc.n	80012ca <__clzsi2+0x22>
 80012c6:	0900      	lsrs	r0, r0, #4
 80012c8:	3904      	subs	r1, #4
 80012ca:	a202      	add	r2, pc, #8	@ (adr r2, 80012d4 <__clzsi2+0x2c>)
 80012cc:	5c10      	ldrb	r0, [r2, r0]
 80012ce:	1840      	adds	r0, r0, r1
 80012d0:	4770      	bx	lr
 80012d2:	46c0      	nop			@ (mov r8, r8)
 80012d4:	02020304 	.word	0x02020304
 80012d8:	01010101 	.word	0x01010101
	...

080012e4 <__clzdi2>:
 80012e4:	b510      	push	{r4, lr}
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d103      	bne.n	80012f2 <__clzdi2+0xe>
 80012ea:	f7ff ffdd 	bl	80012a8 <__clzsi2>
 80012ee:	3020      	adds	r0, #32
 80012f0:	e002      	b.n	80012f8 <__clzdi2+0x14>
 80012f2:	0008      	movs	r0, r1
 80012f4:	f7ff ffd8 	bl	80012a8 <__clzsi2>
 80012f8:	bd10      	pop	{r4, pc}
 80012fa:	46c0      	nop			@ (mov r8, r8)

080012fc <__eqdf2>:
 80012fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fe:	4657      	mov	r7, sl
 8001300:	46de      	mov	lr, fp
 8001302:	464e      	mov	r6, r9
 8001304:	4645      	mov	r5, r8
 8001306:	b5e0      	push	{r5, r6, r7, lr}
 8001308:	000d      	movs	r5, r1
 800130a:	0004      	movs	r4, r0
 800130c:	0fe8      	lsrs	r0, r5, #31
 800130e:	4683      	mov	fp, r0
 8001310:	0309      	lsls	r1, r1, #12
 8001312:	0fd8      	lsrs	r0, r3, #31
 8001314:	0b09      	lsrs	r1, r1, #12
 8001316:	4682      	mov	sl, r0
 8001318:	4819      	ldr	r0, [pc, #100]	@ (8001380 <__eqdf2+0x84>)
 800131a:	468c      	mov	ip, r1
 800131c:	031f      	lsls	r7, r3, #12
 800131e:	0069      	lsls	r1, r5, #1
 8001320:	005e      	lsls	r6, r3, #1
 8001322:	0d49      	lsrs	r1, r1, #21
 8001324:	0b3f      	lsrs	r7, r7, #12
 8001326:	0d76      	lsrs	r6, r6, #21
 8001328:	4281      	cmp	r1, r0
 800132a:	d018      	beq.n	800135e <__eqdf2+0x62>
 800132c:	4286      	cmp	r6, r0
 800132e:	d00f      	beq.n	8001350 <__eqdf2+0x54>
 8001330:	2001      	movs	r0, #1
 8001332:	42b1      	cmp	r1, r6
 8001334:	d10d      	bne.n	8001352 <__eqdf2+0x56>
 8001336:	45bc      	cmp	ip, r7
 8001338:	d10b      	bne.n	8001352 <__eqdf2+0x56>
 800133a:	4294      	cmp	r4, r2
 800133c:	d109      	bne.n	8001352 <__eqdf2+0x56>
 800133e:	45d3      	cmp	fp, sl
 8001340:	d01c      	beq.n	800137c <__eqdf2+0x80>
 8001342:	2900      	cmp	r1, #0
 8001344:	d105      	bne.n	8001352 <__eqdf2+0x56>
 8001346:	4660      	mov	r0, ip
 8001348:	4320      	orrs	r0, r4
 800134a:	1e43      	subs	r3, r0, #1
 800134c:	4198      	sbcs	r0, r3
 800134e:	e000      	b.n	8001352 <__eqdf2+0x56>
 8001350:	2001      	movs	r0, #1
 8001352:	bcf0      	pop	{r4, r5, r6, r7}
 8001354:	46bb      	mov	fp, r7
 8001356:	46b2      	mov	sl, r6
 8001358:	46a9      	mov	r9, r5
 800135a:	46a0      	mov	r8, r4
 800135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135e:	2001      	movs	r0, #1
 8001360:	428e      	cmp	r6, r1
 8001362:	d1f6      	bne.n	8001352 <__eqdf2+0x56>
 8001364:	4661      	mov	r1, ip
 8001366:	4339      	orrs	r1, r7
 8001368:	000f      	movs	r7, r1
 800136a:	4317      	orrs	r7, r2
 800136c:	4327      	orrs	r7, r4
 800136e:	d1f0      	bne.n	8001352 <__eqdf2+0x56>
 8001370:	465b      	mov	r3, fp
 8001372:	4652      	mov	r2, sl
 8001374:	1a98      	subs	r0, r3, r2
 8001376:	1e43      	subs	r3, r0, #1
 8001378:	4198      	sbcs	r0, r3
 800137a:	e7ea      	b.n	8001352 <__eqdf2+0x56>
 800137c:	2000      	movs	r0, #0
 800137e:	e7e8      	b.n	8001352 <__eqdf2+0x56>
 8001380:	000007ff 	.word	0x000007ff

08001384 <__gedf2>:
 8001384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001386:	4657      	mov	r7, sl
 8001388:	464e      	mov	r6, r9
 800138a:	4645      	mov	r5, r8
 800138c:	46de      	mov	lr, fp
 800138e:	b5e0      	push	{r5, r6, r7, lr}
 8001390:	000d      	movs	r5, r1
 8001392:	030f      	lsls	r7, r1, #12
 8001394:	0b39      	lsrs	r1, r7, #12
 8001396:	b083      	sub	sp, #12
 8001398:	0004      	movs	r4, r0
 800139a:	4680      	mov	r8, r0
 800139c:	9101      	str	r1, [sp, #4]
 800139e:	0058      	lsls	r0, r3, #1
 80013a0:	0fe9      	lsrs	r1, r5, #31
 80013a2:	4f31      	ldr	r7, [pc, #196]	@ (8001468 <__gedf2+0xe4>)
 80013a4:	0d40      	lsrs	r0, r0, #21
 80013a6:	468c      	mov	ip, r1
 80013a8:	006e      	lsls	r6, r5, #1
 80013aa:	0319      	lsls	r1, r3, #12
 80013ac:	4682      	mov	sl, r0
 80013ae:	4691      	mov	r9, r2
 80013b0:	0d76      	lsrs	r6, r6, #21
 80013b2:	0b09      	lsrs	r1, r1, #12
 80013b4:	0fd8      	lsrs	r0, r3, #31
 80013b6:	42be      	cmp	r6, r7
 80013b8:	d01f      	beq.n	80013fa <__gedf2+0x76>
 80013ba:	45ba      	cmp	sl, r7
 80013bc:	d00f      	beq.n	80013de <__gedf2+0x5a>
 80013be:	2e00      	cmp	r6, #0
 80013c0:	d12f      	bne.n	8001422 <__gedf2+0x9e>
 80013c2:	4655      	mov	r5, sl
 80013c4:	9e01      	ldr	r6, [sp, #4]
 80013c6:	4334      	orrs	r4, r6
 80013c8:	2d00      	cmp	r5, #0
 80013ca:	d127      	bne.n	800141c <__gedf2+0x98>
 80013cc:	430a      	orrs	r2, r1
 80013ce:	d03a      	beq.n	8001446 <__gedf2+0xc2>
 80013d0:	2c00      	cmp	r4, #0
 80013d2:	d145      	bne.n	8001460 <__gedf2+0xdc>
 80013d4:	2800      	cmp	r0, #0
 80013d6:	d11a      	bne.n	800140e <__gedf2+0x8a>
 80013d8:	2001      	movs	r0, #1
 80013da:	4240      	negs	r0, r0
 80013dc:	e017      	b.n	800140e <__gedf2+0x8a>
 80013de:	4311      	orrs	r1, r2
 80013e0:	d13b      	bne.n	800145a <__gedf2+0xd6>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d102      	bne.n	80013ec <__gedf2+0x68>
 80013e6:	9f01      	ldr	r7, [sp, #4]
 80013e8:	4327      	orrs	r7, r4
 80013ea:	d0f3      	beq.n	80013d4 <__gedf2+0x50>
 80013ec:	4584      	cmp	ip, r0
 80013ee:	d109      	bne.n	8001404 <__gedf2+0x80>
 80013f0:	4663      	mov	r3, ip
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <__gedf2+0x54>
 80013f6:	4660      	mov	r0, ip
 80013f8:	e009      	b.n	800140e <__gedf2+0x8a>
 80013fa:	9f01      	ldr	r7, [sp, #4]
 80013fc:	4327      	orrs	r7, r4
 80013fe:	d12c      	bne.n	800145a <__gedf2+0xd6>
 8001400:	45b2      	cmp	sl, r6
 8001402:	d024      	beq.n	800144e <__gedf2+0xca>
 8001404:	4663      	mov	r3, ip
 8001406:	2002      	movs	r0, #2
 8001408:	3b01      	subs	r3, #1
 800140a:	4018      	ands	r0, r3
 800140c:	3801      	subs	r0, #1
 800140e:	b003      	add	sp, #12
 8001410:	bcf0      	pop	{r4, r5, r6, r7}
 8001412:	46bb      	mov	fp, r7
 8001414:	46b2      	mov	sl, r6
 8001416:	46a9      	mov	r9, r5
 8001418:	46a0      	mov	r8, r4
 800141a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141c:	2c00      	cmp	r4, #0
 800141e:	d0d9      	beq.n	80013d4 <__gedf2+0x50>
 8001420:	e7e4      	b.n	80013ec <__gedf2+0x68>
 8001422:	4654      	mov	r4, sl
 8001424:	2c00      	cmp	r4, #0
 8001426:	d0ed      	beq.n	8001404 <__gedf2+0x80>
 8001428:	4584      	cmp	ip, r0
 800142a:	d1eb      	bne.n	8001404 <__gedf2+0x80>
 800142c:	4556      	cmp	r6, sl
 800142e:	dce9      	bgt.n	8001404 <__gedf2+0x80>
 8001430:	dbde      	blt.n	80013f0 <__gedf2+0x6c>
 8001432:	9b01      	ldr	r3, [sp, #4]
 8001434:	428b      	cmp	r3, r1
 8001436:	d8e5      	bhi.n	8001404 <__gedf2+0x80>
 8001438:	d1da      	bne.n	80013f0 <__gedf2+0x6c>
 800143a:	45c8      	cmp	r8, r9
 800143c:	d8e2      	bhi.n	8001404 <__gedf2+0x80>
 800143e:	2000      	movs	r0, #0
 8001440:	45c8      	cmp	r8, r9
 8001442:	d2e4      	bcs.n	800140e <__gedf2+0x8a>
 8001444:	e7d4      	b.n	80013f0 <__gedf2+0x6c>
 8001446:	2000      	movs	r0, #0
 8001448:	2c00      	cmp	r4, #0
 800144a:	d0e0      	beq.n	800140e <__gedf2+0x8a>
 800144c:	e7da      	b.n	8001404 <__gedf2+0x80>
 800144e:	4311      	orrs	r1, r2
 8001450:	d103      	bne.n	800145a <__gedf2+0xd6>
 8001452:	4584      	cmp	ip, r0
 8001454:	d1d6      	bne.n	8001404 <__gedf2+0x80>
 8001456:	2000      	movs	r0, #0
 8001458:	e7d9      	b.n	800140e <__gedf2+0x8a>
 800145a:	2002      	movs	r0, #2
 800145c:	4240      	negs	r0, r0
 800145e:	e7d6      	b.n	800140e <__gedf2+0x8a>
 8001460:	4584      	cmp	ip, r0
 8001462:	d0e6      	beq.n	8001432 <__gedf2+0xae>
 8001464:	e7ce      	b.n	8001404 <__gedf2+0x80>
 8001466:	46c0      	nop			@ (mov r8, r8)
 8001468:	000007ff 	.word	0x000007ff

0800146c <__ledf2>:
 800146c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146e:	4657      	mov	r7, sl
 8001470:	464e      	mov	r6, r9
 8001472:	4645      	mov	r5, r8
 8001474:	46de      	mov	lr, fp
 8001476:	b5e0      	push	{r5, r6, r7, lr}
 8001478:	000d      	movs	r5, r1
 800147a:	030f      	lsls	r7, r1, #12
 800147c:	0004      	movs	r4, r0
 800147e:	4680      	mov	r8, r0
 8001480:	0fe8      	lsrs	r0, r5, #31
 8001482:	0b39      	lsrs	r1, r7, #12
 8001484:	4684      	mov	ip, r0
 8001486:	b083      	sub	sp, #12
 8001488:	0058      	lsls	r0, r3, #1
 800148a:	4f30      	ldr	r7, [pc, #192]	@ (800154c <__ledf2+0xe0>)
 800148c:	0d40      	lsrs	r0, r0, #21
 800148e:	9101      	str	r1, [sp, #4]
 8001490:	031e      	lsls	r6, r3, #12
 8001492:	0069      	lsls	r1, r5, #1
 8001494:	4682      	mov	sl, r0
 8001496:	4691      	mov	r9, r2
 8001498:	0d49      	lsrs	r1, r1, #21
 800149a:	0b36      	lsrs	r6, r6, #12
 800149c:	0fd8      	lsrs	r0, r3, #31
 800149e:	42b9      	cmp	r1, r7
 80014a0:	d020      	beq.n	80014e4 <__ledf2+0x78>
 80014a2:	45ba      	cmp	sl, r7
 80014a4:	d00f      	beq.n	80014c6 <__ledf2+0x5a>
 80014a6:	2900      	cmp	r1, #0
 80014a8:	d12b      	bne.n	8001502 <__ledf2+0x96>
 80014aa:	9901      	ldr	r1, [sp, #4]
 80014ac:	430c      	orrs	r4, r1
 80014ae:	4651      	mov	r1, sl
 80014b0:	2900      	cmp	r1, #0
 80014b2:	d137      	bne.n	8001524 <__ledf2+0xb8>
 80014b4:	4332      	orrs	r2, r6
 80014b6:	d038      	beq.n	800152a <__ledf2+0xbe>
 80014b8:	2c00      	cmp	r4, #0
 80014ba:	d144      	bne.n	8001546 <__ledf2+0xda>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d119      	bne.n	80014f4 <__ledf2+0x88>
 80014c0:	2001      	movs	r0, #1
 80014c2:	4240      	negs	r0, r0
 80014c4:	e016      	b.n	80014f4 <__ledf2+0x88>
 80014c6:	4316      	orrs	r6, r2
 80014c8:	d113      	bne.n	80014f2 <__ledf2+0x86>
 80014ca:	2900      	cmp	r1, #0
 80014cc:	d102      	bne.n	80014d4 <__ledf2+0x68>
 80014ce:	9f01      	ldr	r7, [sp, #4]
 80014d0:	4327      	orrs	r7, r4
 80014d2:	d0f3      	beq.n	80014bc <__ledf2+0x50>
 80014d4:	4584      	cmp	ip, r0
 80014d6:	d020      	beq.n	800151a <__ledf2+0xae>
 80014d8:	4663      	mov	r3, ip
 80014da:	2002      	movs	r0, #2
 80014dc:	3b01      	subs	r3, #1
 80014de:	4018      	ands	r0, r3
 80014e0:	3801      	subs	r0, #1
 80014e2:	e007      	b.n	80014f4 <__ledf2+0x88>
 80014e4:	9f01      	ldr	r7, [sp, #4]
 80014e6:	4327      	orrs	r7, r4
 80014e8:	d103      	bne.n	80014f2 <__ledf2+0x86>
 80014ea:	458a      	cmp	sl, r1
 80014ec:	d1f4      	bne.n	80014d8 <__ledf2+0x6c>
 80014ee:	4316      	orrs	r6, r2
 80014f0:	d01f      	beq.n	8001532 <__ledf2+0xc6>
 80014f2:	2002      	movs	r0, #2
 80014f4:	b003      	add	sp, #12
 80014f6:	bcf0      	pop	{r4, r5, r6, r7}
 80014f8:	46bb      	mov	fp, r7
 80014fa:	46b2      	mov	sl, r6
 80014fc:	46a9      	mov	r9, r5
 80014fe:	46a0      	mov	r8, r4
 8001500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001502:	4654      	mov	r4, sl
 8001504:	2c00      	cmp	r4, #0
 8001506:	d0e7      	beq.n	80014d8 <__ledf2+0x6c>
 8001508:	4584      	cmp	ip, r0
 800150a:	d1e5      	bne.n	80014d8 <__ledf2+0x6c>
 800150c:	4551      	cmp	r1, sl
 800150e:	dce3      	bgt.n	80014d8 <__ledf2+0x6c>
 8001510:	db03      	blt.n	800151a <__ledf2+0xae>
 8001512:	9b01      	ldr	r3, [sp, #4]
 8001514:	42b3      	cmp	r3, r6
 8001516:	d8df      	bhi.n	80014d8 <__ledf2+0x6c>
 8001518:	d00f      	beq.n	800153a <__ledf2+0xce>
 800151a:	4663      	mov	r3, ip
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0cf      	beq.n	80014c0 <__ledf2+0x54>
 8001520:	4660      	mov	r0, ip
 8001522:	e7e7      	b.n	80014f4 <__ledf2+0x88>
 8001524:	2c00      	cmp	r4, #0
 8001526:	d0c9      	beq.n	80014bc <__ledf2+0x50>
 8001528:	e7d4      	b.n	80014d4 <__ledf2+0x68>
 800152a:	2000      	movs	r0, #0
 800152c:	2c00      	cmp	r4, #0
 800152e:	d0e1      	beq.n	80014f4 <__ledf2+0x88>
 8001530:	e7d2      	b.n	80014d8 <__ledf2+0x6c>
 8001532:	4584      	cmp	ip, r0
 8001534:	d1d0      	bne.n	80014d8 <__ledf2+0x6c>
 8001536:	2000      	movs	r0, #0
 8001538:	e7dc      	b.n	80014f4 <__ledf2+0x88>
 800153a:	45c8      	cmp	r8, r9
 800153c:	d8cc      	bhi.n	80014d8 <__ledf2+0x6c>
 800153e:	2000      	movs	r0, #0
 8001540:	45c8      	cmp	r8, r9
 8001542:	d2d7      	bcs.n	80014f4 <__ledf2+0x88>
 8001544:	e7e9      	b.n	800151a <__ledf2+0xae>
 8001546:	4584      	cmp	ip, r0
 8001548:	d0e3      	beq.n	8001512 <__ledf2+0xa6>
 800154a:	e7c5      	b.n	80014d8 <__ledf2+0x6c>
 800154c:	000007ff 	.word	0x000007ff

08001550 <init_timer_for_microseconds>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define TIMER_FREQUENCY_MHZ 1.9841 // Assurez-vous que cette valeur correspond à la configuration de votre timer

void init_timer_for_microseconds() {
 8001550:	b580      	push	{r7, lr}
 8001552:	b090      	sub	sp, #64	@ 0x40
 8001554:	af00      	add	r7, sp, #0
    __HAL_RCC_TIM2_CLK_ENABLE(); // Activer l'horloge du TIM2
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <init_timer_for_microseconds+0x60>)
 8001558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <init_timer_for_microseconds+0x60>)
 800155c:	2101      	movs	r1, #1
 800155e:	430a      	orrs	r2, r1
 8001560:	639a      	str	r2, [r3, #56]	@ 0x38

    TIM_HandleTypeDef htim2;
    htim2.Instance = TIM2;
 8001562:	003b      	movs	r3, r7
 8001564:	2280      	movs	r2, #128	@ 0x80
 8001566:	05d2      	lsls	r2, r2, #23
 8001568:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = (uint32_t)((SystemCoreClock / 1000000) - 1); // Configurer pour 1 MHz
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <init_timer_for_microseconds+0x64>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4912      	ldr	r1, [pc, #72]	@ (80015b8 <init_timer_for_microseconds+0x68>)
 8001570:	0018      	movs	r0, r3
 8001572:	f7fe fdd3 	bl	800011c <__udivsi3>
 8001576:	0003      	movs	r3, r0
 8001578:	1e5a      	subs	r2, r3, #1
 800157a:	003b      	movs	r3, r7
 800157c:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	003b      	movs	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 0xFFFF; // Maximum possible
 8001584:	003b      	movs	r3, r7
 8001586:	4a0d      	ldr	r2, [pc, #52]	@ (80015bc <init_timer_for_microseconds+0x6c>)
 8001588:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158a:	003b      	movs	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001590:	003b      	movs	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	615a      	str	r2, [r3, #20]
    HAL_TIM_Base_Init(&htim2);
 8001596:	003b      	movs	r3, r7
 8001598:	0018      	movs	r0, r3
 800159a:	f002 fde8 	bl	800416e <HAL_TIM_Base_Init>

    HAL_TIM_Base_Start(&htim2); // Démarrer le timer
 800159e:	003b      	movs	r3, r7
 80015a0:	0018      	movs	r0, r3
 80015a2:	f002 fe25 	bl	80041f0 <HAL_TIM_Base_Start>
}
 80015a6:	46c0      	nop			@ (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b010      	add	sp, #64	@ 0x40
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	46c0      	nop			@ (mov r8, r8)
 80015b0:	40021000 	.word	0x40021000
 80015b4:	20000000 	.word	0x20000000
 80015b8:	000f4240 	.word	0x000f4240
 80015bc:	0000ffff 	.word	0x0000ffff

080015c0 <get_microseconds>:

uint32_t get_microseconds() {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
    return __HAL_TIM_GET_COUNTER(&htim2); // Lire le compteur du TIM2
 80015c4:	4b02      	ldr	r3, [pc, #8]	@ (80015d0 <get_microseconds+0x10>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80015ca:	0018      	movs	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200000a8 	.word	0x200000a8

080015d4 <delay_us>:
    // Configuration de SysTick pour compter à 1MHz
    // Supposons que SystemCoreClock est la fréquence du CPU en Hz
    SysTick_Config(1);
}

void delay_us(uint32_t microseconds) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    uint32_t ticks = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
    uint32_t t = microseconds * 1.86478099624; //64 de diff
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fdff 	bl	80011e4 <__aeabi_ui2d>
 80015e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001618 <delay_us+0x44>)
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <delay_us+0x48>)
 80015ea:	f7fe ff5b 	bl	80004a4 <__aeabi_dmul>
 80015ee:	0002      	movs	r2, r0
 80015f0:	000b      	movs	r3, r1
 80015f2:	0010      	movs	r0, r2
 80015f4:	0019      	movs	r1, r3
 80015f6:	f7fe fe6b 	bl	80002d0 <__aeabi_d2uiz>
 80015fa:	0003      	movs	r3, r0
 80015fc:	60bb      	str	r3, [r7, #8]
    while (ticks < t) {
 80015fe:	e002      	b.n	8001606 <delay_us+0x32>
        ticks ++;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	3301      	adds	r3, #1
 8001604:	60fb      	str	r3, [r7, #12]
    while (ticks < t) {
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	429a      	cmp	r2, r3
 800160c:	d3f8      	bcc.n	8001600 <delay_us+0x2c>
        //printf("%ld\n", ticks);
    }
}
 800160e:	46c0      	nop			@ (mov r8, r8)
 8001610:	46c0      	nop			@ (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	b004      	add	sp, #16
 8001616:	bd80      	pop	{r7, pc}
 8001618:	9910d97e 	.word	0x9910d97e
 800161c:	3ffdd624 	.word	0x3ffdd624

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t start = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
	uint32_t end = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
	uint32_t duree = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
	uint32_t distance = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
	uint32_t begin = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163a:	f000 fe1b 	bl	8002274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163e:	f000 f88f 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001642:	f000 fa8d 	bl	8001b60 <MX_GPIO_Init>
  MX_RTC_Init();
 8001646:	f000 f905 	bl	8001854 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800164a:	f000 fa59 	bl	8001b00 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800164e:	f000 f9a1 	bl	8001994 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001652:	f000 fa1b 	bl	8001a8c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart2);
 8001656:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <main+0x12c>)
 8001658:	0018      	movs	r0, r3
 800165a:	f000 fb77 	bl	8001d4c <RetargetInit>
  init_timer_for_microseconds();
 800165e:	f7ff ff77 	bl	8001550 <init_timer_for_microseconds>
//		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
//		delay_us(1000000);
//	}


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	483a      	ldr	r0, [pc, #232]	@ (8001750 <main+0x130>)
 8001668:	2200      	movs	r2, #0
 800166a:	0019      	movs	r1, r3
 800166c:	f001 f997 	bl	800299e <HAL_GPIO_WritePin>
	delay_us(2);
 8001670:	2002      	movs	r0, #2
 8001672:	f7ff ffaf 	bl	80015d4 <delay_us>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 1);
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	4835      	ldr	r0, [pc, #212]	@ (8001750 <main+0x130>)
 800167c:	2201      	movs	r2, #1
 800167e:	0019      	movs	r1, r3
 8001680:	f001 f98d 	bl	800299e <HAL_GPIO_WritePin>
	delay_us(10);
 8001684:	200a      	movs	r0, #10
 8001686:	f7ff ffa5 	bl	80015d4 <delay_us>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4830      	ldr	r0, [pc, #192]	@ (8001750 <main+0x130>)
 8001690:	2200      	movs	r2, #0
 8001692:	0019      	movs	r1, r3
 8001694:	f001 f983 	bl	800299e <HAL_GPIO_WritePin>
	begin = HAL_GetTick();
 8001698:	f000 fe52 	bl	8002340 <HAL_GetTick>
 800169c:	0003      	movs	r3, r0
 800169e:	607b      	str	r3, [r7, #4]
	while(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) && (HAL_GetTick() - 100) < begin)
 80016a0:	46c0      	nop			@ (mov r8, r8)
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001750 <main+0x130>)
 80016a8:	0019      	movs	r1, r3
 80016aa:	0010      	movs	r0, r2
 80016ac:	f001 f95a 	bl	8002964 <HAL_GPIO_ReadPin>
 80016b0:	1e03      	subs	r3, r0, #0
 80016b2:	d106      	bne.n	80016c2 <main+0xa2>
 80016b4:	f000 fe44 	bl	8002340 <HAL_GetTick>
 80016b8:	0003      	movs	r3, r0
 80016ba:	3b64      	subs	r3, #100	@ 0x64
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d8ef      	bhi.n	80016a2 <main+0x82>
	{
		//printf("readpin : %d \n",HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8));
	}
	if ((HAL_GetTick() - 100) < begin)
 80016c2:	f000 fe3d 	bl	8002340 <HAL_GetTick>
 80016c6:	0003      	movs	r3, r0
 80016c8:	3b64      	subs	r3, #100	@ 0x64
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d933      	bls.n	8001738 <main+0x118>
	{
		start = get_microseconds();
 80016d0:	f7ff ff76 	bl	80015c0 <get_microseconds>
 80016d4:	0003      	movs	r3, r0
 80016d6:	617b      	str	r3, [r7, #20]

		while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8));
 80016d8:	46c0      	nop			@ (mov r8, r8)
 80016da:	2380      	movs	r3, #128	@ 0x80
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4a1c      	ldr	r2, [pc, #112]	@ (8001750 <main+0x130>)
 80016e0:	0019      	movs	r1, r3
 80016e2:	0010      	movs	r0, r2
 80016e4:	f001 f93e 	bl	8002964 <HAL_GPIO_ReadPin>
 80016e8:	1e03      	subs	r3, r0, #0
 80016ea:	d1f6      	bne.n	80016da <main+0xba>

		end = get_microseconds();
 80016ec:	f7ff ff68 	bl	80015c0 <get_microseconds>
 80016f0:	0003      	movs	r3, r0
 80016f2:	613b      	str	r3, [r7, #16]

		duree = end - start ;
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	60fb      	str	r3, [r7, #12]

		distance = duree * 340 / 2 / 10000;
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	0013      	movs	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	189b      	adds	r3, r3, r2
 8001704:	011a      	lsls	r2, r3, #4
 8001706:	189b      	adds	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4912      	ldr	r1, [pc, #72]	@ (8001754 <main+0x134>)
 800170c:	0018      	movs	r0, r3
 800170e:	f7fe fd05 	bl	800011c <__udivsi3>
 8001712:	0003      	movs	r3, r0
 8001714:	60bb      	str	r3, [r7, #8]
		if (distance < 500)
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	23fa      	movs	r3, #250	@ 0xfa
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	429a      	cmp	r2, r3
 800171e:	d206      	bcs.n	800172e <main+0x10e>
		{
			printf("distance : %ld cm \n", distance);
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <main+0x138>)
 8001724:	0011      	movs	r1, r2
 8001726:	0018      	movs	r0, r3
 8001728:	f004 fda4 	bl	8006274 <iprintf>
 800172c:	e008      	b.n	8001740 <main+0x120>
		}
		else
		{
			printf("erreur de mesure\n");
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <main+0x13c>)
 8001730:	0018      	movs	r0, r3
 8001732:	f004 fe05 	bl	8006340 <puts>
 8001736:	e003      	b.n	8001740 <main+0x120>
		}

	}
	else
	{
		printf("erreur de mesure\n");
 8001738:	4b08      	ldr	r3, [pc, #32]	@ (800175c <main+0x13c>)
 800173a:	0018      	movs	r0, r3
 800173c:	f004 fe00 	bl	8006340 <puts>
	}

	HAL_Delay(500);
 8001740:	23fa      	movs	r3, #250	@ 0xfa
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	0018      	movs	r0, r3
 8001746:	f000 fe05 	bl	8002354 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, 0);
 800174a:	e78a      	b.n	8001662 <main+0x42>
 800174c:	20000128 	.word	0x20000128
 8001750:	50000400 	.word	0x50000400
 8001754:	00004e20 	.word	0x00004e20
 8001758:	08007208 	.word	0x08007208
 800175c:	0800721c 	.word	0x0800721c

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b09d      	sub	sp, #116	@ 0x74
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	2438      	movs	r4, #56	@ 0x38
 8001768:	193b      	adds	r3, r7, r4
 800176a:	0018      	movs	r0, r3
 800176c:	2338      	movs	r3, #56	@ 0x38
 800176e:	001a      	movs	r2, r3
 8001770:	2100      	movs	r1, #0
 8001772:	f004 ff91 	bl	8006698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001776:	2324      	movs	r3, #36	@ 0x24
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	0018      	movs	r0, r3
 800177c:	2314      	movs	r3, #20
 800177e:	001a      	movs	r2, r3
 8001780:	2100      	movs	r1, #0
 8001782:	f004 ff89 	bl	8006698 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001786:	003b      	movs	r3, r7
 8001788:	0018      	movs	r0, r3
 800178a:	2324      	movs	r3, #36	@ 0x24
 800178c:	001a      	movs	r2, r3
 800178e:	2100      	movs	r1, #0
 8001790:	f004 ff82 	bl	8006698 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001794:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <SystemClock_Config+0xec>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2d      	ldr	r2, [pc, #180]	@ (8001850 <SystemClock_Config+0xf0>)
 800179a:	401a      	ands	r2, r3
 800179c:	4b2b      	ldr	r3, [pc, #172]	@ (800184c <SystemClock_Config+0xec>)
 800179e:	2180      	movs	r1, #128	@ 0x80
 80017a0:	0109      	lsls	r1, r1, #4
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80017a6:	0021      	movs	r1, r4
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	220a      	movs	r2, #10
 80017ac:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	2201      	movs	r2, #1
 80017b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017b4:	187b      	adds	r3, r7, r1
 80017b6:	2210      	movs	r2, #16
 80017b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017ba:	187b      	adds	r3, r7, r1
 80017bc:	2201      	movs	r2, #1
 80017be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	2202      	movs	r2, #2
 80017c4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2200      	movs	r2, #0
 80017ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2280      	movs	r2, #128	@ 0x80
 80017d0:	0312      	lsls	r2, r2, #12
 80017d2:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	2280      	movs	r2, #128	@ 0x80
 80017d8:	0412      	lsls	r2, r2, #16
 80017da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017dc:	187b      	adds	r3, r7, r1
 80017de:	0018      	movs	r0, r3
 80017e0:	f001 f920 	bl	8002a24 <HAL_RCC_OscConfig>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017e8:	f000 faaa 	bl	8001d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ec:	2124      	movs	r1, #36	@ 0x24
 80017ee:	187b      	adds	r3, r7, r1
 80017f0:	220f      	movs	r2, #15
 80017f2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	2203      	movs	r2, #3
 80017f8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800180c:	187b      	adds	r3, r7, r1
 800180e:	2101      	movs	r1, #1
 8001810:	0018      	movs	r0, r3
 8001812:	f001 fcdb 	bl	80031cc <HAL_RCC_ClockConfig>
 8001816:	1e03      	subs	r3, r0, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800181a:	f000 fa91 	bl	8001d40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 800181e:	003b      	movs	r3, r7
 8001820:	2222      	movs	r2, #34	@ 0x22
 8001822:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001824:	003b      	movs	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800182a:	003b      	movs	r3, r7
 800182c:	2280      	movs	r2, #128	@ 0x80
 800182e:	0292      	lsls	r2, r2, #10
 8001830:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001832:	003b      	movs	r3, r7
 8001834:	0018      	movs	r0, r3
 8001836:	f001 feed 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 800183a:	1e03      	subs	r3, r0, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800183e:	f000 fa7f 	bl	8001d40 <Error_Handler>
  }
}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	46bd      	mov	sp, r7
 8001846:	b01d      	add	sp, #116	@ 0x74
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	40007000 	.word	0x40007000
 8001850:	ffffe7ff 	.word	0xffffe7ff

08001854 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b090      	sub	sp, #64	@ 0x40
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800185a:	232c      	movs	r3, #44	@ 0x2c
 800185c:	18fb      	adds	r3, r7, r3
 800185e:	0018      	movs	r0, r3
 8001860:	2314      	movs	r3, #20
 8001862:	001a      	movs	r2, r3
 8001864:	2100      	movs	r1, #0
 8001866:	f004 ff17 	bl	8006698 <memset>
  RTC_DateTypeDef sDate = {0};
 800186a:	2328      	movs	r3, #40	@ 0x28
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8001872:	003b      	movs	r3, r7
 8001874:	0018      	movs	r0, r3
 8001876:	2328      	movs	r3, #40	@ 0x28
 8001878:	001a      	movs	r2, r3
 800187a:	2100      	movs	r1, #0
 800187c:	f004 ff0c 	bl	8006698 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001880:	4b41      	ldr	r3, [pc, #260]	@ (8001988 <MX_RTC_Init+0x134>)
 8001882:	4a42      	ldr	r2, [pc, #264]	@ (800198c <MX_RTC_Init+0x138>)
 8001884:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001886:	4b40      	ldr	r3, [pc, #256]	@ (8001988 <MX_RTC_Init+0x134>)
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 800188c:	4b3e      	ldr	r3, [pc, #248]	@ (8001988 <MX_RTC_Init+0x134>)
 800188e:	221f      	movs	r2, #31
 8001890:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 8001892:	4b3d      	ldr	r3, [pc, #244]	@ (8001988 <MX_RTC_Init+0x134>)
 8001894:	4a3e      	ldr	r2, [pc, #248]	@ (8001990 <MX_RTC_Init+0x13c>)
 8001896:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001898:	4b3b      	ldr	r3, [pc, #236]	@ (8001988 <MX_RTC_Init+0x134>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800189e:	4b3a      	ldr	r3, [pc, #232]	@ (8001988 <MX_RTC_Init+0x134>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018a4:	4b38      	ldr	r3, [pc, #224]	@ (8001988 <MX_RTC_Init+0x134>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018aa:	4b37      	ldr	r3, [pc, #220]	@ (8001988 <MX_RTC_Init+0x134>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018b0:	4b35      	ldr	r3, [pc, #212]	@ (8001988 <MX_RTC_Init+0x134>)
 80018b2:	0018      	movs	r0, r3
 80018b4:	f002 f80a 	bl	80038cc <HAL_RTC_Init>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d001      	beq.n	80018c0 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 80018bc:	f000 fa40 	bl	8001d40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80018c0:	212c      	movs	r1, #44	@ 0x2c
 80018c2:	187b      	adds	r3, r7, r1
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 80018c8:	187b      	adds	r3, r7, r1
 80018ca:	2200      	movs	r2, #0
 80018cc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80018ce:	187b      	adds	r3, r7, r1
 80018d0:	2200      	movs	r2, #0
 80018d2:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80018e0:	1879      	adds	r1, r7, r1
 80018e2:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <MX_RTC_Init+0x134>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	0018      	movs	r0, r3
 80018e8:	f002 f88c 	bl	8003a04 <HAL_RTC_SetTime>
 80018ec:	1e03      	subs	r3, r0, #0
 80018ee:	d001      	beq.n	80018f4 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80018f0:	f000 fa26 	bl	8001d40 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018f4:	2128      	movs	r1, #40	@ 0x28
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2201      	movs	r2, #1
 8001900:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8001902:	187b      	adds	r3, r7, r1
 8001904:	2201      	movs	r2, #1
 8001906:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8001908:	187b      	adds	r3, r7, r1
 800190a:	2200      	movs	r2, #0
 800190c:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800190e:	1879      	adds	r1, r7, r1
 8001910:	4b1d      	ldr	r3, [pc, #116]	@ (8001988 <MX_RTC_Init+0x134>)
 8001912:	2200      	movs	r2, #0
 8001914:	0018      	movs	r0, r3
 8001916:	f002 f91f 	bl	8003b58 <HAL_RTC_SetDate>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d001      	beq.n	8001922 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 800191e:	f000 fa0f 	bl	8001d40 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001922:	003b      	movs	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001928:	003b      	movs	r3, r7
 800192a:	2200      	movs	r2, #0
 800192c:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 800192e:	003b      	movs	r3, r7
 8001930:	2200      	movs	r2, #0
 8001932:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001934:	003b      	movs	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800193a:	003b      	movs	r3, r7
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001940:	003b      	movs	r3, r7
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001946:	003b      	movs	r3, r7
 8001948:	2200      	movs	r2, #0
 800194a:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800194c:	003b      	movs	r3, r7
 800194e:	22f0      	movs	r2, #240	@ 0xf0
 8001950:	0512      	lsls	r2, r2, #20
 8001952:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001954:	003b      	movs	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 800195a:	003b      	movs	r3, r7
 800195c:	2220      	movs	r2, #32
 800195e:	2101      	movs	r1, #1
 8001960:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8001962:	003b      	movs	r3, r7
 8001964:	2280      	movs	r2, #128	@ 0x80
 8001966:	0052      	lsls	r2, r2, #1
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800196a:	0039      	movs	r1, r7
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_RTC_Init+0x134>)
 800196e:	2200      	movs	r2, #0
 8001970:	0018      	movs	r0, r3
 8001972:	f002 f985 	bl	8003c80 <HAL_RTC_SetAlarm_IT>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d001      	beq.n	800197e <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 800197a:	f000 f9e1 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	46bd      	mov	sp, r7
 8001982:	b010      	add	sp, #64	@ 0x40
 8001984:	bd80      	pop	{r7, pc}
 8001986:	46c0      	nop			@ (mov r8, r8)
 8001988:	20000084 	.word	0x20000084
 800198c:	40002800 	.word	0x40002800
 8001990:	000003ff 	.word	0x000003ff

08001994 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08a      	sub	sp, #40	@ 0x28
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800199a:	2318      	movs	r3, #24
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	0018      	movs	r0, r3
 80019a0:	2310      	movs	r3, #16
 80019a2:	001a      	movs	r2, r3
 80019a4:	2100      	movs	r1, #0
 80019a6:	f004 fe77 	bl	8006698 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019aa:	2310      	movs	r3, #16
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	0018      	movs	r0, r3
 80019b0:	2308      	movs	r3, #8
 80019b2:	001a      	movs	r2, r3
 80019b4:	2100      	movs	r1, #0
 80019b6:	f004 fe6f 	bl	8006698 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80019ba:	003b      	movs	r3, r7
 80019bc:	0018      	movs	r0, r3
 80019be:	2310      	movs	r3, #16
 80019c0:	001a      	movs	r2, r3
 80019c2:	2100      	movs	r1, #0
 80019c4:	f004 fe68 	bl	8006698 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c8:	4b2e      	ldr	r3, [pc, #184]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 80019ca:	2280      	movs	r2, #128	@ 0x80
 80019cc:	05d2      	lsls	r2, r2, #23
 80019ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 80019d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 80019d2:	221f      	movs	r2, #31
 80019d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff -1;
 80019dc:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 80019de:	4a2a      	ldr	r2, [pc, #168]	@ (8001a88 <MX_TIM2_Init+0xf4>)
 80019e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e2:	4b28      	ldr	r3, [pc, #160]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019e8:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019ee:	4b25      	ldr	r3, [pc, #148]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 80019f0:	0018      	movs	r0, r3
 80019f2:	f002 fbbc 	bl	800416e <HAL_TIM_Base_Init>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80019fa:	f000 f9a1 	bl	8001d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fe:	2118      	movs	r1, #24
 8001a00:	187b      	adds	r3, r7, r1
 8001a02:	2280      	movs	r2, #128	@ 0x80
 8001a04:	0152      	lsls	r2, r2, #5
 8001a06:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a08:	187a      	adds	r2, r7, r1
 8001a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 8001a0c:	0011      	movs	r1, r2
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f002 fe0c 	bl	800462c <HAL_TIM_ConfigClockSource>
 8001a14:	1e03      	subs	r3, r0, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001a18:	f000 f992 	bl	8001d40 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a1c:	4b19      	ldr	r3, [pc, #100]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f002 fc30 	bl	8004284 <HAL_TIM_IC_Init>
 8001a24:	1e03      	subs	r3, r0, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001a28:	f000 f98a 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2110      	movs	r1, #16
 8001a2e:	187b      	adds	r3, r7, r1
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a3a:	187a      	adds	r2, r7, r1
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 8001a3e:	0011      	movs	r1, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f003 f90b 	bl	8004c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001a46:	1e03      	subs	r3, r0, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001a4a:	f000 f979 	bl	8001d40 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001a4e:	003b      	movs	r3, r7
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001a54:	003b      	movs	r3, r7
 8001a56:	2201      	movs	r2, #1
 8001a58:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001a5a:	003b      	movs	r3, r7
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001a60:	003b      	movs	r3, r7
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001a66:	0039      	movs	r1, r7
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <MX_TIM2_Init+0xf0>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f002 fd39 	bl	80044e4 <HAL_TIM_IC_ConfigChannel>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8001a76:	f000 f963 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b00a      	add	sp, #40	@ 0x28
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	200000a8 	.word	0x200000a8
 8001a88:	0000fffe 	.word	0x0000fffe

08001a8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a92:	003b      	movs	r3, r7
 8001a94:	0018      	movs	r0, r3
 8001a96:	2308      	movs	r3, #8
 8001a98:	001a      	movs	r2, r3
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	f004 fdfc 	bl	8006698 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001aa0:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <MX_TIM6_Init+0x6c>)
 8001aa2:	4a16      	ldr	r2, [pc, #88]	@ (8001afc <MX_TIM6_Init+0x70>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001aa6:	4b14      	ldr	r3, [pc, #80]	@ (8001af8 <MX_TIM6_Init+0x6c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <MX_TIM6_Init+0x6c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 29;
 8001ab2:	4b11      	ldr	r3, [pc, #68]	@ (8001af8 <MX_TIM6_Init+0x6c>)
 8001ab4:	221d      	movs	r2, #29
 8001ab6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <MX_TIM6_Init+0x6c>)
 8001aba:	2280      	movs	r2, #128	@ 0x80
 8001abc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <MX_TIM6_Init+0x6c>)
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f002 fb54 	bl	800416e <HAL_TIM_Base_Init>
 8001ac6:	1e03      	subs	r3, r0, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001aca:	f000 f939 	bl	8001d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ace:	003b      	movs	r3, r7
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	003b      	movs	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ada:	003a      	movs	r2, r7
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <MX_TIM6_Init+0x6c>)
 8001ade:	0011      	movs	r1, r2
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f003 f8bb 	bl	8004c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	1e03      	subs	r3, r0, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001aea:	f000 f929 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			@ (mov r8, r8)
 8001af8:	200000e8 	.word	0x200000e8
 8001afc:	40001000 	.word	0x40001000

08001b00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b04:	4b14      	ldr	r3, [pc, #80]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b06:	4a15      	ldr	r2, [pc, #84]	@ (8001b5c <MX_USART2_UART_Init+0x5c>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b0a:	4b13      	ldr	r3, [pc, #76]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b0c:	22e1      	movs	r2, #225	@ 0xe1
 8001b0e:	0252      	lsls	r2, r2, #9
 8001b10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b11      	ldr	r3, [pc, #68]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b36:	4b08      	ldr	r3, [pc, #32]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b3c:	4b06      	ldr	r3, [pc, #24]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b42:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <MX_USART2_UART_Init+0x58>)
 8001b44:	0018      	movs	r0, r3
 8001b46:	f003 f8e7 	bl	8004d18 <HAL_UART_Init>
 8001b4a:	1e03      	subs	r3, r0, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b4e:	f000 f8f7 	bl	8001d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000128 	.word	0x20000128
 8001b5c:	40004400 	.word	0x40004400

08001b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b08b      	sub	sp, #44	@ 0x2c
 8001b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	2414      	movs	r4, #20
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	2314      	movs	r3, #20
 8001b6e:	001a      	movs	r2, r3
 8001b70:	2100      	movs	r1, #0
 8001b72:	f004 fd91 	bl	8006698 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	4b6e      	ldr	r3, [pc, #440]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b82:	4b6b      	ldr	r3, [pc, #428]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b86:	2201      	movs	r2, #1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b68      	ldr	r3, [pc, #416]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b92:	4b67      	ldr	r3, [pc, #412]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001b94:	2102      	movs	r1, #2
 8001b96:	430a      	orrs	r2, r1
 8001b98:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b9a:	4b65      	ldr	r3, [pc, #404]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba6:	4b62      	ldr	r3, [pc, #392]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001ba8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001baa:	4b61      	ldr	r3, [pc, #388]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001bac:	2104      	movs	r1, #4
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bc2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001bc4:	2180      	movs	r1, #128	@ 0x80
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001bca:	4b59      	ldr	r3, [pc, #356]	@ (8001d30 <MX_GPIO_Init+0x1d0>)
 8001bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bce:	2280      	movs	r2, #128	@ 0x80
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin, GPIO_PIN_RESET);
 8001bd6:	4957      	ldr	r1, [pc, #348]	@ (8001d34 <MX_GPIO_Init+0x1d4>)
 8001bd8:	23a0      	movs	r3, #160	@ 0xa0
 8001bda:	05db      	lsls	r3, r3, #23
 8001bdc:	2200      	movs	r2, #0
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 fedd 	bl	800299e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9, GPIO_PIN_RESET);
 8001be4:	2388      	movs	r3, #136	@ 0x88
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4853      	ldr	r0, [pc, #332]	@ (8001d38 <MX_GPIO_Init+0x1d8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	0019      	movs	r1, r3
 8001bee:	f000 fed6 	bl	800299e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 8001bf2:	4b52      	ldr	r3, [pc, #328]	@ (8001d3c <MX_GPIO_Init+0x1dc>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2107      	movs	r1, #7
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f000 fed0 	bl	800299e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 8001bfe:	193b      	adds	r3, r7, r4
 8001c00:	4a4c      	ldr	r2, [pc, #304]	@ (8001d34 <MX_GPIO_Init+0x1d4>)
 8001c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	193b      	adds	r3, r7, r4
 8001c06:	2201      	movs	r2, #1
 8001c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	193b      	adds	r3, r7, r4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c10:	193b      	adds	r3, r7, r4
 8001c12:	2202      	movs	r2, #2
 8001c14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	193a      	adds	r2, r7, r4
 8001c18:	23a0      	movs	r3, #160	@ 0xa0
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	0011      	movs	r1, r2
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 fd22 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c24:	193b      	adds	r3, r7, r4
 8001c26:	2220      	movs	r2, #32
 8001c28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	193b      	adds	r3, r7, r4
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	193b      	adds	r3, r7, r4
 8001c38:	2203      	movs	r2, #3
 8001c3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	193b      	adds	r3, r7, r4
 8001c3e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d38 <MX_GPIO_Init+0x1d8>)
 8001c40:	0019      	movs	r1, r3
 8001c42:	0010      	movs	r0, r2
 8001c44:	f000 fd10 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c48:	0021      	movs	r1, r4
 8001c4a:	187b      	adds	r3, r7, r1
 8001c4c:	2280      	movs	r2, #128	@ 0x80
 8001c4e:	0092      	lsls	r2, r2, #2
 8001c50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	000c      	movs	r4, r1
 8001c54:	193b      	adds	r3, r7, r4
 8001c56:	2201      	movs	r2, #1
 8001c58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	193b      	adds	r3, r7, r4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	2202      	movs	r2, #2
 8001c64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	4a33      	ldr	r2, [pc, #204]	@ (8001d38 <MX_GPIO_Init+0x1d8>)
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	0010      	movs	r0, r2
 8001c6e:	f000 fcfb 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 8001c72:	0021      	movs	r1, r4
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2213      	movs	r2, #19
 8001c78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7a:	187b      	adds	r3, r7, r1
 8001c7c:	2288      	movs	r2, #136	@ 0x88
 8001c7e:	0352      	lsls	r2, r2, #13
 8001c80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2200      	movs	r2, #0
 8001c86:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	000c      	movs	r4, r1
 8001c8a:	187b      	adds	r3, r7, r1
 8001c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8001d38 <MX_GPIO_Init+0x1d8>)
 8001c8e:	0019      	movs	r1, r3
 8001c90:	0010      	movs	r0, r2
 8001c92:	f000 fce9 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c96:	0021      	movs	r1, r4
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2280      	movs	r2, #128	@ 0x80
 8001c9c:	0052      	lsls	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ca0:	000c      	movs	r4, r1
 8001ca2:	193b      	adds	r3, r7, r4
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	193b      	adds	r3, r7, r4
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cae:	193b      	adds	r3, r7, r4
 8001cb0:	4a21      	ldr	r2, [pc, #132]	@ (8001d38 <MX_GPIO_Init+0x1d8>)
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	0010      	movs	r0, r2
 8001cb6:	f000 fcd7 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC13_RESERVED_Pin;
 8001cba:	0021      	movs	r1, r4
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2280      	movs	r2, #128	@ 0x80
 8001cc0:	0192      	lsls	r2, r2, #6
 8001cc2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	2288      	movs	r2, #136	@ 0x88
 8001cc8:	0352      	lsls	r2, r2, #13
 8001cca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	187b      	adds	r3, r7, r1
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PC13_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8001cd2:	000c      	movs	r4, r1
 8001cd4:	187b      	adds	r3, r7, r1
 8001cd6:	4a19      	ldr	r2, [pc, #100]	@ (8001d3c <MX_GPIO_Init+0x1dc>)
 8001cd8:	0019      	movs	r1, r3
 8001cda:	0010      	movs	r0, r2
 8001cdc:	f000 fcc4 	bl	8002668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8001ce0:	0021      	movs	r1, r4
 8001ce2:	187b      	adds	r3, r7, r1
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	2201      	movs	r2, #1
 8001cec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8001d3c <MX_GPIO_Init+0x1dc>)
 8001cfe:	0019      	movs	r1, r3
 8001d00:	0010      	movs	r0, r2
 8001d02:	f000 fcb1 	bl	8002668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2100      	movs	r1, #0
 8001d0a:	2005      	movs	r0, #5
 8001d0c:	f000 fbf2 	bl	80024f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001d10:	2005      	movs	r0, #5
 8001d12:	f000 fc04 	bl	800251e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	2007      	movs	r0, #7
 8001d1c:	f000 fbea 	bl	80024f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001d20:	2007      	movs	r0, #7
 8001d22:	f000 fbfc 	bl	800251e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b00b      	add	sp, #44	@ 0x2c
 8001d2c:	bd90      	pop	{r4, r7, pc}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	40021000 	.word	0x40021000
 8001d34:	00009002 	.word	0x00009002
 8001d38:	50000400 	.word	0x50000400
 8001d3c:	50000800 	.word	0x50000800

08001d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d44:	b672      	cpsid	i
}
 8001d46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d48:	46c0      	nop			@ (mov r8, r8)
 8001d4a:	e7fd      	b.n	8001d48 <Error_Handler+0x8>

08001d4c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001d54:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <RetargetInit+0x28>)
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001d5a:	4b07      	ldr	r3, [pc, #28]	@ (8001d78 <RetargetInit+0x2c>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6898      	ldr	r0, [r3, #8]
 8001d60:	2300      	movs	r3, #0
 8001d62:	2202      	movs	r2, #2
 8001d64:	2100      	movs	r1, #0
 8001d66:	f004 faf5 	bl	8006354 <setvbuf>
}
 8001d6a:	46c0      	nop			@ (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	46c0      	nop			@ (mov r8, r8)
 8001d74:	200001b0 	.word	0x200001b0
 8001d78:	20000018 	.word	0x20000018

08001d7c <_isatty>:

int _isatty(int fd) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db04      	blt.n	8001d94 <_isatty+0x18>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	dc01      	bgt.n	8001d94 <_isatty+0x18>
    return 1;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e005      	b.n	8001da0 <_isatty+0x24>

  errno = EBADF;
 8001d94:	f004 fcd6 	bl	8006744 <__errno>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	2209      	movs	r2, #9
 8001d9c:	601a      	str	r2, [r3, #0]
  return 0;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	0018      	movs	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_write>:

int _write(int fd, char* ptr, int len) {
 8001da8:	b5b0      	push	{r4, r5, r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d002      	beq.n	8001dc0 <_write+0x18>
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d114      	bne.n	8001dea <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e00 <_write+0x58>)
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	2517      	movs	r5, #23
 8001dca:	197c      	adds	r4, r7, r5
 8001dcc:	2301      	movs	r3, #1
 8001dce:	425b      	negs	r3, r3
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	f002 fff5 	bl	8004dc0 <HAL_UART_Transmit>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001dda:	197b      	adds	r3, r7, r5
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <_write+0x3e>
      return len;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	e008      	b.n	8001df8 <_write+0x50>
    else
      return EIO;
 8001de6:	2305      	movs	r3, #5
 8001de8:	e006      	b.n	8001df8 <_write+0x50>
  }
  errno = EBADF;
 8001dea:	f004 fcab 	bl	8006744 <__errno>
 8001dee:	0003      	movs	r3, r0
 8001df0:	2209      	movs	r2, #9
 8001df2:	601a      	str	r2, [r3, #0]
  return -1;
 8001df4:	2301      	movs	r3, #1
 8001df6:	425b      	negs	r3, r3
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b006      	add	sp, #24
 8001dfe:	bdb0      	pop	{r4, r5, r7, pc}
 8001e00:	200001b0 	.word	0x200001b0

08001e04 <_close>:

int _close(int fd) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	db04      	blt.n	8001e1c <_close+0x18>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	dc01      	bgt.n	8001e1c <_close+0x18>
    return 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e006      	b.n	8001e2a <_close+0x26>

  errno = EBADF;
 8001e1c:	f004 fc92 	bl	8006744 <__errno>
 8001e20:	0003      	movs	r3, r0
 8001e22:	2209      	movs	r2, #9
 8001e24:	601a      	str	r2, [r3, #0]
  return -1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	425b      	negs	r3, r3
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b002      	add	sp, #8
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b084      	sub	sp, #16
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001e3e:	f004 fc81 	bl	8006744 <__errno>
 8001e42:	0003      	movs	r3, r0
 8001e44:	2209      	movs	r2, #9
 8001e46:	601a      	str	r2, [r3, #0]
  return -1;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	425b      	negs	r3, r3
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b004      	add	sp, #16
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_read>:

int _read(int fd, char* ptr, int len) {
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d113      	bne.n	8001e8e <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001e66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea4 <_read+0x50>)
 8001e68:	6818      	ldr	r0, [r3, #0]
 8001e6a:	2517      	movs	r5, #23
 8001e6c:	197c      	adds	r4, r7, r5
 8001e6e:	2301      	movs	r3, #1
 8001e70:	425b      	negs	r3, r3
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	2201      	movs	r2, #1
 8001e76:	f003 f843 	bl	8004f00 <HAL_UART_Receive>
 8001e7a:	0003      	movs	r3, r0
 8001e7c:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8001e7e:	197b      	adds	r3, r7, r5
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <_read+0x36>
      return 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e008      	b.n	8001e9c <_read+0x48>
    else
      return EIO;
 8001e8a:	2305      	movs	r3, #5
 8001e8c:	e006      	b.n	8001e9c <_read+0x48>
  }
  errno = EBADF;
 8001e8e:	f004 fc59 	bl	8006744 <__errno>
 8001e92:	0003      	movs	r3, r0
 8001e94:	2209      	movs	r2, #9
 8001e96:	601a      	str	r2, [r3, #0]
  return -1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	425b      	negs	r3, r3
}
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b006      	add	sp, #24
 8001ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea4:	200001b0 	.word	0x200001b0

08001ea8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db08      	blt.n	8001eca <_fstat+0x22>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	dc05      	bgt.n	8001eca <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2280      	movs	r2, #128	@ 0x80
 8001ec2:	0192      	lsls	r2, r2, #6
 8001ec4:	605a      	str	r2, [r3, #4]
    return 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e005      	b.n	8001ed6 <_fstat+0x2e>
  }

  errno = EBADF;
 8001eca:	f004 fc3b 	bl	8006744 <__errno>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	2209      	movs	r2, #9
 8001ed2:	601a      	str	r2, [r3, #0]
  return 0;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
	...

08001ee0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee4:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <HAL_MspInit+0x24>)
 8001ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_MspInit+0x24>)
 8001eea:	2101      	movs	r1, #1
 8001eec:	430a      	orrs	r2, r1
 8001eee:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	4b04      	ldr	r3, [pc, #16]	@ (8001f04 <HAL_MspInit+0x24>)
 8001ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <HAL_MspInit+0x24>)
 8001ef6:	2180      	movs	r1, #128	@ 0x80
 8001ef8:	0549      	lsls	r1, r1, #21
 8001efa:	430a      	orrs	r2, r1
 8001efc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efe:	46c0      	nop			@ (mov r8, r8)
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40021000 	.word	0x40021000

08001f08 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0a      	ldr	r2, [pc, #40]	@ (8001f40 <HAL_RTC_MspInit+0x38>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d10e      	bne.n	8001f38 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <HAL_RTC_MspInit+0x3c>)
 8001f1c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f1e:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <HAL_RTC_MspInit+0x3c>)
 8001f20:	2180      	movs	r1, #128	@ 0x80
 8001f22:	02c9      	lsls	r1, r1, #11
 8001f24:	430a      	orrs	r2, r1
 8001f26:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	f000 fae1 	bl	80024f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001f32:	2002      	movs	r0, #2
 8001f34:	f000 faf3 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f38:	46c0      	nop			@ (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40002800 	.word	0x40002800
 8001f44:	40021000 	.word	0x40021000

08001f48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b08b      	sub	sp, #44	@ 0x2c
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	2414      	movs	r4, #20
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	0018      	movs	r0, r3
 8001f56:	2314      	movs	r3, #20
 8001f58:	001a      	movs	r2, r3
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f004 fb9c 	bl	8006698 <memset>
  if(htim_base->Instance==TIM2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2380      	movs	r3, #128	@ 0x80
 8001f66:	05db      	lsls	r3, r3, #23
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d152      	bne.n	8002012 <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f6c:	4b34      	ldr	r3, [pc, #208]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 8001f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f70:	4b33      	ldr	r3, [pc, #204]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	430a      	orrs	r2, r1
 8001f76:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f78:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 8001f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f7c:	4b30      	ldr	r3, [pc, #192]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 8001f7e:	2102      	movs	r1, #2
 8001f80:	430a      	orrs	r2, r1
 8001f82:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f84:	4b2e      	ldr	r3, [pc, #184]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
 8001f8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	4b2b      	ldr	r3, [pc, #172]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 8001f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f94:	4b2a      	ldr	r3, [pc, #168]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001f9c:	4b28      	ldr	r3, [pc, #160]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fa8:	193b      	adds	r3, r7, r4
 8001faa:	2208      	movs	r2, #8
 8001fac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	193b      	adds	r3, r7, r4
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	193b      	adds	r3, r7, r4
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	193b      	adds	r3, r7, r4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001fc0:	193b      	adds	r3, r7, r4
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	193b      	adds	r3, r7, r4
 8001fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8002044 <HAL_TIM_Base_MspInit+0xfc>)
 8001fca:	0019      	movs	r1, r3
 8001fcc:	0010      	movs	r0, r2
 8001fce:	f000 fb4b 	bl	8002668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fd2:	0021      	movs	r1, r4
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fda:	187b      	adds	r3, r7, r1
 8001fdc:	2202      	movs	r2, #2
 8001fde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	187b      	adds	r3, r7, r1
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe6:	187b      	adds	r3, r7, r1
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8001fec:	187b      	adds	r3, r7, r1
 8001fee:	2202      	movs	r2, #2
 8001ff0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	187a      	adds	r2, r7, r1
 8001ff4:	23a0      	movs	r3, #160	@ 0xa0
 8001ff6:	05db      	lsls	r3, r3, #23
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fb34 	bl	8002668 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002000:	2200      	movs	r2, #0
 8002002:	2100      	movs	r1, #0
 8002004:	200f      	movs	r0, #15
 8002006:	f000 fa75 	bl	80024f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800200a:	200f      	movs	r0, #15
 800200c:	f000 fa87 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002010:	e012      	b.n	8002038 <HAL_TIM_Base_MspInit+0xf0>
  else if(htim_base->Instance==TIM6)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0c      	ldr	r2, [pc, #48]	@ (8002048 <HAL_TIM_Base_MspInit+0x100>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d10d      	bne.n	8002038 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 800201e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002020:	4b07      	ldr	r3, [pc, #28]	@ (8002040 <HAL_TIM_Base_MspInit+0xf8>)
 8002022:	2110      	movs	r1, #16
 8002024:	430a      	orrs	r2, r1
 8002026:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	2100      	movs	r1, #0
 800202c:	2011      	movs	r0, #17
 800202e:	f000 fa61 	bl	80024f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002032:	2011      	movs	r0, #17
 8002034:	f000 fa73 	bl	800251e <HAL_NVIC_EnableIRQ>
}
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	b00b      	add	sp, #44	@ 0x2c
 800203e:	bd90      	pop	{r4, r7, pc}
 8002040:	40021000 	.word	0x40021000
 8002044:	50000400 	.word	0x50000400
 8002048:	40001000 	.word	0x40001000

0800204c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	240c      	movs	r4, #12
 8002056:	193b      	adds	r3, r7, r4
 8002058:	0018      	movs	r0, r3
 800205a:	2314      	movs	r3, #20
 800205c:	001a      	movs	r2, r3
 800205e:	2100      	movs	r1, #0
 8002060:	f004 fb1a 	bl	8006698 <memset>
  if(huart->Instance==USART2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1c      	ldr	r2, [pc, #112]	@ (80020dc <HAL_UART_MspInit+0x90>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d131      	bne.n	80020d2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800206e:	4b1c      	ldr	r3, [pc, #112]	@ (80020e0 <HAL_UART_MspInit+0x94>)
 8002070:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002072:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_UART_MspInit+0x94>)
 8002074:	2180      	movs	r1, #128	@ 0x80
 8002076:	0289      	lsls	r1, r1, #10
 8002078:	430a      	orrs	r2, r1
 800207a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b18      	ldr	r3, [pc, #96]	@ (80020e0 <HAL_UART_MspInit+0x94>)
 800207e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002080:	4b17      	ldr	r3, [pc, #92]	@ (80020e0 <HAL_UART_MspInit+0x94>)
 8002082:	2101      	movs	r1, #1
 8002084:	430a      	orrs	r2, r1
 8002086:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002088:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <HAL_UART_MspInit+0x94>)
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002094:	0021      	movs	r1, r4
 8002096:	187b      	adds	r3, r7, r1
 8002098:	220c      	movs	r2, #12
 800209a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209c:	187b      	adds	r3, r7, r1
 800209e:	2202      	movs	r2, #2
 80020a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	187b      	adds	r3, r7, r1
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	2203      	movs	r2, #3
 80020ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80020ae:	187b      	adds	r3, r7, r1
 80020b0:	2204      	movs	r2, #4
 80020b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	187a      	adds	r2, r7, r1
 80020b6:	23a0      	movs	r3, #160	@ 0xa0
 80020b8:	05db      	lsls	r3, r3, #23
 80020ba:	0011      	movs	r1, r2
 80020bc:	0018      	movs	r0, r3
 80020be:	f000 fad3 	bl	8002668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	201c      	movs	r0, #28
 80020c8:	f000 fa14 	bl	80024f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020cc:	201c      	movs	r0, #28
 80020ce:	f000 fa26 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020d2:	46c0      	nop			@ (mov r8, r8)
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b009      	add	sp, #36	@ 0x24
 80020d8:	bd90      	pop	{r4, r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	40004400 	.word	0x40004400
 80020e0:	40021000 	.word	0x40021000

080020e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020e8:	46c0      	nop			@ (mov r8, r8)
 80020ea:	e7fd      	b.n	80020e8 <NMI_Handler+0x4>

080020ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f0:	46c0      	nop			@ (mov r8, r8)
 80020f2:	e7fd      	b.n	80020f0 <HardFault_Handler+0x4>

080020f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80020f8:	46c0      	nop			@ (mov r8, r8)
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002102:	46c0      	nop			@ (mov r8, r8)
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800210c:	f000 f906 	bl	800231c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002110:	46c0      	nop			@ (mov r8, r8)
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <RTC_IRQHandler+0x14>)
 800211e:	0018      	movs	r0, r3
 8002120:	f001 ff10 	bl	8003f44 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8002124:	46c0      	nop			@ (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	20000084 	.word	0x20000084

08002130 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8002134:	2001      	movs	r0, #1
 8002136:	f000 fc4f 	bl	80029d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 800213a:	2002      	movs	r0, #2
 800213c:	f000 fc4c 	bl	80029d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002140:	46c0      	nop			@ (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 800214a:	2010      	movs	r0, #16
 800214c:	f000 fc44 	bl	80029d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PC13_RESERVED_Pin);
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	019b      	lsls	r3, r3, #6
 8002154:	0018      	movs	r0, r3
 8002156:	f000 fc3f 	bl	80029d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <TIM2_IRQHandler+0x14>)
 8002166:	0018      	movs	r0, r3
 8002168:	f002 f8d4 	bl	8004314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800216c:	46c0      	nop			@ (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	200000a8 	.word	0x200000a8

08002178 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800217c:	4b03      	ldr	r3, [pc, #12]	@ (800218c <TIM6_DAC_IRQHandler+0x14>)
 800217e:	0018      	movs	r0, r3
 8002180:	f002 f8c8 	bl	8004314 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002184:	46c0      	nop			@ (mov r8, r8)
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	200000e8 	.word	0x200000e8

08002190 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002194:	4b03      	ldr	r3, [pc, #12]	@ (80021a4 <USART2_IRQHandler+0x14>)
 8002196:	0018      	movs	r0, r3
 8002198:	f002 ff98 	bl	80050cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800219c:	46c0      	nop			@ (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	46c0      	nop			@ (mov r8, r8)
 80021a4:	20000128 	.word	0x20000128

080021a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021b0:	4a14      	ldr	r2, [pc, #80]	@ (8002204 <_sbrk+0x5c>)
 80021b2:	4b15      	ldr	r3, [pc, #84]	@ (8002208 <_sbrk+0x60>)
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021bc:	4b13      	ldr	r3, [pc, #76]	@ (800220c <_sbrk+0x64>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <_sbrk+0x64>)
 80021c6:	4a12      	ldr	r2, [pc, #72]	@ (8002210 <_sbrk+0x68>)
 80021c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <_sbrk+0x64>)
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	18d3      	adds	r3, r2, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d207      	bcs.n	80021e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d8:	f004 fab4 	bl	8006744 <__errno>
 80021dc:	0003      	movs	r3, r0
 80021de:	220c      	movs	r2, #12
 80021e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	425b      	negs	r3, r3
 80021e6:	e009      	b.n	80021fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e8:	4b08      	ldr	r3, [pc, #32]	@ (800220c <_sbrk+0x64>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ee:	4b07      	ldr	r3, [pc, #28]	@ (800220c <_sbrk+0x64>)
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	18d2      	adds	r2, r2, r3
 80021f6:	4b05      	ldr	r3, [pc, #20]	@ (800220c <_sbrk+0x64>)
 80021f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80021fa:	68fb      	ldr	r3, [r7, #12]
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b006      	add	sp, #24
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20005000 	.word	0x20005000
 8002208:	00000400 	.word	0x00000400
 800220c:	200001b4 	.word	0x200001b4
 8002210:	20000308 	.word	0x20000308

08002214 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
	...

08002220 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002220:	480d      	ldr	r0, [pc, #52]	@ (8002258 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002222:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002224:	f7ff fff6 	bl	8002214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002228:	480c      	ldr	r0, [pc, #48]	@ (800225c <LoopForever+0x6>)
  ldr r1, =_edata
 800222a:	490d      	ldr	r1, [pc, #52]	@ (8002260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800222c:	4a0d      	ldr	r2, [pc, #52]	@ (8002264 <LoopForever+0xe>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002230:	e002      	b.n	8002238 <LoopCopyDataInit>

08002232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002236:	3304      	adds	r3, #4

08002238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800223c:	d3f9      	bcc.n	8002232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800223e:	4a0a      	ldr	r2, [pc, #40]	@ (8002268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002240:	4c0a      	ldr	r4, [pc, #40]	@ (800226c <LoopForever+0x16>)
  movs r3, #0
 8002242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002244:	e001      	b.n	800224a <LoopFillZerobss>

08002246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002248:	3204      	adds	r2, #4

0800224a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800224c:	d3fb      	bcc.n	8002246 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800224e:	f004 fa7f 	bl	8006750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002252:	f7ff f9e5 	bl	8001620 <main>

08002256 <LoopForever>:

LoopForever:
    b LoopForever
 8002256:	e7fe      	b.n	8002256 <LoopForever>
   ldr   r0, =_estack
 8002258:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800225c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002260:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002264:	080072e0 	.word	0x080072e0
  ldr r2, =_sbss
 8002268:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800226c:	20000308 	.word	0x20000308

08002270 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002270:	e7fe      	b.n	8002270 <ADC1_COMP_IRQHandler>
	...

08002274 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002280:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <HAL_Init+0x3c>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b0a      	ldr	r3, [pc, #40]	@ (80022b0 <HAL_Init+0x3c>)
 8002286:	2140      	movs	r1, #64	@ 0x40
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800228c:	2000      	movs	r0, #0
 800228e:	f000 f811 	bl	80022b4 <HAL_InitTick>
 8002292:	1e03      	subs	r3, r0, #0
 8002294:	d003      	beq.n	800229e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002296:	1dfb      	adds	r3, r7, #7
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	e001      	b.n	80022a2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800229e:	f7ff fe1f 	bl	8001ee0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b002      	add	sp, #8
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	46c0      	nop			@ (mov r8, r8)
 80022b0:	40022000 	.word	0x40022000

080022b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b590      	push	{r4, r7, lr}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022bc:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <HAL_InitTick+0x5c>)
 80022be:	681c      	ldr	r4, [r3, #0]
 80022c0:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <HAL_InitTick+0x60>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	0019      	movs	r1, r3
 80022c6:	23fa      	movs	r3, #250	@ 0xfa
 80022c8:	0098      	lsls	r0, r3, #2
 80022ca:	f7fd ff27 	bl	800011c <__udivsi3>
 80022ce:	0003      	movs	r3, r0
 80022d0:	0019      	movs	r1, r3
 80022d2:	0020      	movs	r0, r4
 80022d4:	f7fd ff22 	bl	800011c <__udivsi3>
 80022d8:	0003      	movs	r3, r0
 80022da:	0018      	movs	r0, r3
 80022dc:	f000 f92f 	bl	800253e <HAL_SYSTICK_Config>
 80022e0:	1e03      	subs	r3, r0, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e00f      	b.n	8002308 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d80b      	bhi.n	8002306 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	2301      	movs	r3, #1
 80022f2:	425b      	negs	r3, r3
 80022f4:	2200      	movs	r2, #0
 80022f6:	0018      	movs	r0, r3
 80022f8:	f000 f8fc 	bl	80024f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_InitTick+0x64>)
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b003      	add	sp, #12
 800230e:	bd90      	pop	{r4, r7, pc}
 8002310:	20000000 	.word	0x20000000
 8002314:	20000008 	.word	0x20000008
 8002318:	20000004 	.word	0x20000004

0800231c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <HAL_IncTick+0x1c>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	001a      	movs	r2, r3
 8002326:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_IncTick+0x20>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	18d2      	adds	r2, r2, r3
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_IncTick+0x20>)
 800232e:	601a      	str	r2, [r3, #0]
}
 8002330:	46c0      	nop			@ (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	20000008 	.word	0x20000008
 800233c:	200001b8 	.word	0x200001b8

08002340 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  return uwTick;
 8002344:	4b02      	ldr	r3, [pc, #8]	@ (8002350 <HAL_GetTick+0x10>)
 8002346:	681b      	ldr	r3, [r3, #0]
}
 8002348:	0018      	movs	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	200001b8 	.word	0x200001b8

08002354 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800235c:	f7ff fff0 	bl	8002340 <HAL_GetTick>
 8002360:	0003      	movs	r3, r0
 8002362:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3301      	adds	r3, #1
 800236c:	d005      	beq.n	800237a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800236e:	4b0a      	ldr	r3, [pc, #40]	@ (8002398 <HAL_Delay+0x44>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	001a      	movs	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	189b      	adds	r3, r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	f7ff ffe0 	bl	8002340 <HAL_GetTick>
 8002380:	0002      	movs	r2, r0
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	429a      	cmp	r2, r3
 800238a:	d8f7      	bhi.n	800237c <HAL_Delay+0x28>
  {
  }
}
 800238c:	46c0      	nop			@ (mov r8, r8)
 800238e:	46c0      	nop			@ (mov r8, r8)
 8002390:	46bd      	mov	sp, r7
 8002392:	b004      	add	sp, #16
 8002394:	bd80      	pop	{r7, pc}
 8002396:	46c0      	nop			@ (mov r8, r8)
 8002398:	20000008 	.word	0x20000008

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	0002      	movs	r2, r0
 80023a4:	1dfb      	adds	r3, r7, #7
 80023a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023a8:	1dfb      	adds	r3, r7, #7
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80023ae:	d809      	bhi.n	80023c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b0:	1dfb      	adds	r3, r7, #7
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	001a      	movs	r2, r3
 80023b6:	231f      	movs	r3, #31
 80023b8:	401a      	ands	r2, r3
 80023ba:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <__NVIC_EnableIRQ+0x30>)
 80023bc:	2101      	movs	r1, #1
 80023be:	4091      	lsls	r1, r2
 80023c0:	000a      	movs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
  }
}
 80023c4:	46c0      	nop			@ (mov r8, r8)
 80023c6:	46bd      	mov	sp, r7
 80023c8:	b002      	add	sp, #8
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	0002      	movs	r2, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	1dfb      	adds	r3, r7, #7
 80023dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80023e4:	d828      	bhi.n	8002438 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023e6:	4a2f      	ldr	r2, [pc, #188]	@ (80024a4 <__NVIC_SetPriority+0xd4>)
 80023e8:	1dfb      	adds	r3, r7, #7
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	b25b      	sxtb	r3, r3
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	33c0      	adds	r3, #192	@ 0xc0
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	589b      	ldr	r3, [r3, r2]
 80023f6:	1dfa      	adds	r2, r7, #7
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	0011      	movs	r1, r2
 80023fc:	2203      	movs	r2, #3
 80023fe:	400a      	ands	r2, r1
 8002400:	00d2      	lsls	r2, r2, #3
 8002402:	21ff      	movs	r1, #255	@ 0xff
 8002404:	4091      	lsls	r1, r2
 8002406:	000a      	movs	r2, r1
 8002408:	43d2      	mvns	r2, r2
 800240a:	401a      	ands	r2, r3
 800240c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	019b      	lsls	r3, r3, #6
 8002412:	22ff      	movs	r2, #255	@ 0xff
 8002414:	401a      	ands	r2, r3
 8002416:	1dfb      	adds	r3, r7, #7
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	0018      	movs	r0, r3
 800241c:	2303      	movs	r3, #3
 800241e:	4003      	ands	r3, r0
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002424:	481f      	ldr	r0, [pc, #124]	@ (80024a4 <__NVIC_SetPriority+0xd4>)
 8002426:	1dfb      	adds	r3, r7, #7
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	b25b      	sxtb	r3, r3
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	430a      	orrs	r2, r1
 8002430:	33c0      	adds	r3, #192	@ 0xc0
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002436:	e031      	b.n	800249c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002438:	4a1b      	ldr	r2, [pc, #108]	@ (80024a8 <__NVIC_SetPriority+0xd8>)
 800243a:	1dfb      	adds	r3, r7, #7
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	0019      	movs	r1, r3
 8002440:	230f      	movs	r3, #15
 8002442:	400b      	ands	r3, r1
 8002444:	3b08      	subs	r3, #8
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3306      	adds	r3, #6
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	18d3      	adds	r3, r2, r3
 800244e:	3304      	adds	r3, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	1dfa      	adds	r2, r7, #7
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	0011      	movs	r1, r2
 8002458:	2203      	movs	r2, #3
 800245a:	400a      	ands	r2, r1
 800245c:	00d2      	lsls	r2, r2, #3
 800245e:	21ff      	movs	r1, #255	@ 0xff
 8002460:	4091      	lsls	r1, r2
 8002462:	000a      	movs	r2, r1
 8002464:	43d2      	mvns	r2, r2
 8002466:	401a      	ands	r2, r3
 8002468:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	22ff      	movs	r2, #255	@ 0xff
 8002470:	401a      	ands	r2, r3
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	0018      	movs	r0, r3
 8002478:	2303      	movs	r3, #3
 800247a:	4003      	ands	r3, r0
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002480:	4809      	ldr	r0, [pc, #36]	@ (80024a8 <__NVIC_SetPriority+0xd8>)
 8002482:	1dfb      	adds	r3, r7, #7
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	001c      	movs	r4, r3
 8002488:	230f      	movs	r3, #15
 800248a:	4023      	ands	r3, r4
 800248c:	3b08      	subs	r3, #8
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	430a      	orrs	r2, r1
 8002492:	3306      	adds	r3, #6
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	18c3      	adds	r3, r0, r3
 8002498:	3304      	adds	r3, #4
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	46c0      	nop			@ (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	b003      	add	sp, #12
 80024a2:	bd90      	pop	{r4, r7, pc}
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	1e5a      	subs	r2, r3, #1
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	045b      	lsls	r3, r3, #17
 80024bc:	429a      	cmp	r2, r3
 80024be:	d301      	bcc.n	80024c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c0:	2301      	movs	r3, #1
 80024c2:	e010      	b.n	80024e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c4:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <SysTick_Config+0x44>)
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	3a01      	subs	r2, #1
 80024ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024cc:	2301      	movs	r3, #1
 80024ce:	425b      	negs	r3, r3
 80024d0:	2103      	movs	r1, #3
 80024d2:	0018      	movs	r0, r3
 80024d4:	f7ff ff7c 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d8:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <SysTick_Config+0x44>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024de:	4b04      	ldr	r3, [pc, #16]	@ (80024f0 <SysTick_Config+0x44>)
 80024e0:	2207      	movs	r2, #7
 80024e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	0018      	movs	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b002      	add	sp, #8
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	e000e010 	.word	0xe000e010

080024f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	210f      	movs	r1, #15
 8002500:	187b      	adds	r3, r7, r1
 8002502:	1c02      	adds	r2, r0, #0
 8002504:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	187b      	adds	r3, r7, r1
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b25b      	sxtb	r3, r3
 800250e:	0011      	movs	r1, r2
 8002510:	0018      	movs	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b004      	add	sp, #16
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	0002      	movs	r2, r0
 8002526:	1dfb      	adds	r3, r7, #7
 8002528:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	b25b      	sxtb	r3, r3
 8002530:	0018      	movs	r0, r3
 8002532:	f7ff ff33 	bl	800239c <__NVIC_EnableIRQ>
}
 8002536:	46c0      	nop			@ (mov r8, r8)
 8002538:	46bd      	mov	sp, r7
 800253a:	b002      	add	sp, #8
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b082      	sub	sp, #8
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff ffaf 	bl	80024ac <SysTick_Config>
 800254e:	0003      	movs	r3, r0
}
 8002550:	0018      	movs	r0, r3
 8002552:	46bd      	mov	sp, r7
 8002554:	b002      	add	sp, #8
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002560:	230f      	movs	r3, #15
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2225      	movs	r2, #37	@ 0x25
 800256c:	5c9b      	ldrb	r3, [r3, r2]
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d008      	beq.n	8002586 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2204      	movs	r2, #4
 8002578:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2224      	movs	r2, #36	@ 0x24
 800257e:	2100      	movs	r1, #0
 8002580:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e024      	b.n	80025d0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	210e      	movs	r1, #14
 8002592:	438a      	bics	r2, r1
 8002594:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2101      	movs	r1, #1
 80025a2:	438a      	bics	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	221c      	movs	r2, #28
 80025ac:	401a      	ands	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b2:	2101      	movs	r1, #1
 80025b4:	4091      	lsls	r1, r2
 80025b6:	000a      	movs	r2, r1
 80025b8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2225      	movs	r2, #37	@ 0x25
 80025be:	2101      	movs	r1, #1
 80025c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2224      	movs	r2, #36	@ 0x24
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

    return status;
 80025ca:	230f      	movs	r3, #15
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b004      	add	sp, #16
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	210f      	movs	r1, #15
 80025e2:	187b      	adds	r3, r7, r1
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2225      	movs	r2, #37	@ 0x25
 80025ec:	5c9b      	ldrb	r3, [r3, r2]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d006      	beq.n	8002602 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2204      	movs	r2, #4
 80025f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e02a      	b.n	8002658 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	210e      	movs	r1, #14
 800260e:	438a      	bics	r2, r1
 8002610:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2101      	movs	r1, #1
 800261e:	438a      	bics	r2, r1
 8002620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	221c      	movs	r2, #28
 8002628:	401a      	ands	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	2101      	movs	r1, #1
 8002630:	4091      	lsls	r1, r2
 8002632:	000a      	movs	r2, r1
 8002634:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2225      	movs	r2, #37	@ 0x25
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2224      	movs	r2, #36	@ 0x24
 8002642:	2100      	movs	r1, #0
 8002644:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264a:	2b00      	cmp	r3, #0
 800264c:	d004      	beq.n	8002658 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	0010      	movs	r0, r2
 8002656:	4798      	blx	r3
    }
  }
  return status;
 8002658:	230f      	movs	r3, #15
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	781b      	ldrb	r3, [r3, #0]
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b004      	add	sp, #16
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800267e:	e155      	b.n	800292c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4091      	lsls	r1, r2
 800268a:	000a      	movs	r2, r1
 800268c:	4013      	ands	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d100      	bne.n	8002698 <HAL_GPIO_Init+0x30>
 8002696:	e146      	b.n	8002926 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2203      	movs	r2, #3
 800269e:	4013      	ands	r3, r2
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d005      	beq.n	80026b0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2203      	movs	r2, #3
 80026aa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d130      	bne.n	8002712 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	409a      	lsls	r2, r3
 80026be:	0013      	movs	r3, r2
 80026c0:	43da      	mvns	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	409a      	lsls	r2, r3
 80026d2:	0013      	movs	r3, r2
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e6:	2201      	movs	r2, #1
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	409a      	lsls	r2, r3
 80026ec:	0013      	movs	r3, r2
 80026ee:	43da      	mvns	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	091b      	lsrs	r3, r3, #4
 80026fc:	2201      	movs	r2, #1
 80026fe:	401a      	ands	r2, r3
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	409a      	lsls	r2, r3
 8002704:	0013      	movs	r3, r2
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	4313      	orrs	r3, r2
 800270a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2203      	movs	r2, #3
 8002718:	4013      	ands	r3, r2
 800271a:	2b03      	cmp	r3, #3
 800271c:	d017      	beq.n	800274e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	409a      	lsls	r2, r3
 800272c:	0013      	movs	r3, r2
 800272e:	43da      	mvns	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	409a      	lsls	r2, r3
 8002740:	0013      	movs	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2203      	movs	r2, #3
 8002754:	4013      	ands	r3, r2
 8002756:	2b02      	cmp	r3, #2
 8002758:	d123      	bne.n	80027a2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	08da      	lsrs	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3208      	adds	r2, #8
 8002762:	0092      	lsls	r2, r2, #2
 8002764:	58d3      	ldr	r3, [r2, r3]
 8002766:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	2207      	movs	r2, #7
 800276c:	4013      	ands	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	220f      	movs	r2, #15
 8002772:	409a      	lsls	r2, r3
 8002774:	0013      	movs	r3, r2
 8002776:	43da      	mvns	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2107      	movs	r1, #7
 8002786:	400b      	ands	r3, r1
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	409a      	lsls	r2, r3
 800278c:	0013      	movs	r3, r2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4313      	orrs	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	08da      	lsrs	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3208      	adds	r2, #8
 800279c:	0092      	lsls	r2, r2, #2
 800279e:	6939      	ldr	r1, [r7, #16]
 80027a0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	2203      	movs	r2, #3
 80027ae:	409a      	lsls	r2, r3
 80027b0:	0013      	movs	r3, r2
 80027b2:	43da      	mvns	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2203      	movs	r2, #3
 80027c0:	401a      	ands	r2, r3
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	409a      	lsls	r2, r3
 80027c8:	0013      	movs	r3, r2
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	23c0      	movs	r3, #192	@ 0xc0
 80027dc:	029b      	lsls	r3, r3, #10
 80027de:	4013      	ands	r3, r2
 80027e0:	d100      	bne.n	80027e4 <HAL_GPIO_Init+0x17c>
 80027e2:	e0a0      	b.n	8002926 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e4:	4b57      	ldr	r3, [pc, #348]	@ (8002944 <HAL_GPIO_Init+0x2dc>)
 80027e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027e8:	4b56      	ldr	r3, [pc, #344]	@ (8002944 <HAL_GPIO_Init+0x2dc>)
 80027ea:	2101      	movs	r1, #1
 80027ec:	430a      	orrs	r2, r1
 80027ee:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f0:	4a55      	ldr	r2, [pc, #340]	@ (8002948 <HAL_GPIO_Init+0x2e0>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	3302      	adds	r3, #2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	589b      	ldr	r3, [r3, r2]
 80027fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	2203      	movs	r2, #3
 8002802:	4013      	ands	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	409a      	lsls	r2, r3
 800280a:	0013      	movs	r3, r2
 800280c:	43da      	mvns	r2, r3
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4013      	ands	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	23a0      	movs	r3, #160	@ 0xa0
 8002818:	05db      	lsls	r3, r3, #23
 800281a:	429a      	cmp	r2, r3
 800281c:	d01f      	beq.n	800285e <HAL_GPIO_Init+0x1f6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a4a      	ldr	r2, [pc, #296]	@ (800294c <HAL_GPIO_Init+0x2e4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d019      	beq.n	800285a <HAL_GPIO_Init+0x1f2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a49      	ldr	r2, [pc, #292]	@ (8002950 <HAL_GPIO_Init+0x2e8>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_GPIO_Init+0x1ee>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a48      	ldr	r2, [pc, #288]	@ (8002954 <HAL_GPIO_Init+0x2ec>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00d      	beq.n	8002852 <HAL_GPIO_Init+0x1ea>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a47      	ldr	r2, [pc, #284]	@ (8002958 <HAL_GPIO_Init+0x2f0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <HAL_GPIO_Init+0x1e6>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a46      	ldr	r2, [pc, #280]	@ (800295c <HAL_GPIO_Init+0x2f4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_GPIO_Init+0x1e2>
 8002846:	2305      	movs	r3, #5
 8002848:	e00a      	b.n	8002860 <HAL_GPIO_Init+0x1f8>
 800284a:	2306      	movs	r3, #6
 800284c:	e008      	b.n	8002860 <HAL_GPIO_Init+0x1f8>
 800284e:	2304      	movs	r3, #4
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x1f8>
 8002852:	2303      	movs	r3, #3
 8002854:	e004      	b.n	8002860 <HAL_GPIO_Init+0x1f8>
 8002856:	2302      	movs	r3, #2
 8002858:	e002      	b.n	8002860 <HAL_GPIO_Init+0x1f8>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_GPIO_Init+0x1f8>
 800285e:	2300      	movs	r3, #0
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	2103      	movs	r1, #3
 8002864:	400a      	ands	r2, r1
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	4093      	lsls	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002870:	4935      	ldr	r1, [pc, #212]	@ (8002948 <HAL_GPIO_Init+0x2e0>)
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800287e:	4b38      	ldr	r3, [pc, #224]	@ (8002960 <HAL_GPIO_Init+0x2f8>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43da      	mvns	r2, r3
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4013      	ands	r3, r2
 800288c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	2380      	movs	r3, #128	@ 0x80
 8002894:	035b      	lsls	r3, r3, #13
 8002896:	4013      	ands	r3, r2
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002960 <HAL_GPIO_Init+0x2f8>)
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80028a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002960 <HAL_GPIO_Init+0x2f8>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	43da      	mvns	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4013      	ands	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	039b      	lsls	r3, r3, #14
 80028c0:	4013      	ands	r3, r2
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80028cc:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <HAL_GPIO_Init+0x2f8>)
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80028d2:	4b23      	ldr	r3, [pc, #140]	@ (8002960 <HAL_GPIO_Init+0x2f8>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	43da      	mvns	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	029b      	lsls	r3, r3, #10
 80028ea:	4013      	ands	r3, r2
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <HAL_GPIO_Init+0x2f8>)
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028fc:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <HAL_GPIO_Init+0x2f8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43da      	mvns	r2, r3
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	4013      	ands	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	025b      	lsls	r3, r3, #9
 8002914:	4013      	ands	r3, r2
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <HAL_GPIO_Init+0x2f8>)
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3301      	adds	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	40da      	lsrs	r2, r3
 8002934:	1e13      	subs	r3, r2, #0
 8002936:	d000      	beq.n	800293a <HAL_GPIO_Init+0x2d2>
 8002938:	e6a2      	b.n	8002680 <HAL_GPIO_Init+0x18>
  }
}
 800293a:	46c0      	nop			@ (mov r8, r8)
 800293c:	46c0      	nop			@ (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b006      	add	sp, #24
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	40010000 	.word	0x40010000
 800294c:	50000400 	.word	0x50000400
 8002950:	50000800 	.word	0x50000800
 8002954:	50000c00 	.word	0x50000c00
 8002958:	50001000 	.word	0x50001000
 800295c:	50001c00 	.word	0x50001c00
 8002960:	40010400 	.word	0x40010400

08002964 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	000a      	movs	r2, r1
 800296e:	1cbb      	adds	r3, r7, #2
 8002970:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	1cba      	adds	r2, r7, #2
 8002978:	8812      	ldrh	r2, [r2, #0]
 800297a:	4013      	ands	r3, r2
 800297c:	d004      	beq.n	8002988 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800297e:	230f      	movs	r3, #15
 8002980:	18fb      	adds	r3, r7, r3
 8002982:	2201      	movs	r2, #1
 8002984:	701a      	strb	r2, [r3, #0]
 8002986:	e003      	b.n	8002990 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002988:	230f      	movs	r3, #15
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002990:	230f      	movs	r3, #15
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	781b      	ldrb	r3, [r3, #0]
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	0008      	movs	r0, r1
 80029a8:	0011      	movs	r1, r2
 80029aa:	1cbb      	adds	r3, r7, #2
 80029ac:	1c02      	adds	r2, r0, #0
 80029ae:	801a      	strh	r2, [r3, #0]
 80029b0:	1c7b      	adds	r3, r7, #1
 80029b2:	1c0a      	adds	r2, r1, #0
 80029b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029b6:	1c7b      	adds	r3, r7, #1
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029be:	1cbb      	adds	r3, r7, #2
 80029c0:	881a      	ldrh	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80029c6:	e003      	b.n	80029d0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80029c8:	1cbb      	adds	r3, r7, #2
 80029ca:	881a      	ldrh	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b002      	add	sp, #8
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	0002      	movs	r2, r0
 80029e0:	1dbb      	adds	r3, r7, #6
 80029e2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029e4:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	1dba      	adds	r2, r7, #6
 80029ea:	8812      	ldrh	r2, [r2, #0]
 80029ec:	4013      	ands	r3, r2
 80029ee:	d008      	beq.n	8002a02 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80029f2:	1dba      	adds	r2, r7, #6
 80029f4:	8812      	ldrh	r2, [r2, #0]
 80029f6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029f8:	1dbb      	adds	r3, r7, #6
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 f807 	bl	8002a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a02:	46c0      	nop			@ (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
 8002a0c:	40010400 	.word	0x40010400

08002a10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	0002      	movs	r2, r0
 8002a18:	1dbb      	adds	r3, r7, #6
 8002a1a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002a1c:	46c0      	nop			@ (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b5b0      	push	{r4, r5, r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d102      	bne.n	8002a38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f000 fbbf 	bl	80031b6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a38:	4bc9      	ldr	r3, [pc, #804]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	220c      	movs	r2, #12
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a42:	4bc7      	ldr	r3, [pc, #796]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	025b      	lsls	r3, r3, #9
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2201      	movs	r2, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d100      	bne.n	8002a5a <HAL_RCC_OscConfig+0x36>
 8002a58:	e07e      	b.n	8002b58 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d007      	beq.n	8002a70 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b0c      	cmp	r3, #12
 8002a64:	d112      	bne.n	8002a8c <HAL_RCC_OscConfig+0x68>
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	2380      	movs	r3, #128	@ 0x80
 8002a6a:	025b      	lsls	r3, r3, #9
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d10d      	bne.n	8002a8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a70:	4bbb      	ldr	r3, [pc, #748]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	029b      	lsls	r3, r3, #10
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <HAL_RCC_OscConfig+0x5a>
 8002a7c:	e06b      	b.n	8002b56 <HAL_RCC_OscConfig+0x132>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d167      	bne.n	8002b56 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	f000 fb95 	bl	80031b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	2380      	movs	r3, #128	@ 0x80
 8002a92:	025b      	lsls	r3, r3, #9
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x84>
 8002a98:	4bb1      	ldr	r3, [pc, #708]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4bb0      	ldr	r3, [pc, #704]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002a9e:	2180      	movs	r1, #128	@ 0x80
 8002aa0:	0249      	lsls	r1, r1, #9
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	e027      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	23a0      	movs	r3, #160	@ 0xa0
 8002aae:	02db      	lsls	r3, r3, #11
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d10e      	bne.n	8002ad2 <HAL_RCC_OscConfig+0xae>
 8002ab4:	4baa      	ldr	r3, [pc, #680]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4ba9      	ldr	r3, [pc, #676]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	02c9      	lsls	r1, r1, #11
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	4ba7      	ldr	r3, [pc, #668]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4ba6      	ldr	r3, [pc, #664]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002ac8:	2180      	movs	r1, #128	@ 0x80
 8002aca:	0249      	lsls	r1, r1, #9
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	e012      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002ad2:	4ba3      	ldr	r3, [pc, #652]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	4ba2      	ldr	r3, [pc, #648]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002ad8:	49a2      	ldr	r1, [pc, #648]	@ (8002d64 <HAL_RCC_OscConfig+0x340>)
 8002ada:	400a      	ands	r2, r1
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	4ba0      	ldr	r3, [pc, #640]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	025b      	lsls	r3, r3, #9
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4b9c      	ldr	r3, [pc, #624]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b9b      	ldr	r3, [pc, #620]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002af2:	499d      	ldr	r1, [pc, #628]	@ (8002d68 <HAL_RCC_OscConfig+0x344>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7ff fc1e 	bl	8002340 <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b08:	e009      	b.n	8002b1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b0a:	f7ff fc19 	bl	8002340 <HAL_GetTick>
 8002b0e:	0002      	movs	r2, r0
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b64      	cmp	r3, #100	@ 0x64
 8002b16:	d902      	bls.n	8002b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	f000 fb4c 	bl	80031b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b1e:	4b90      	ldr	r3, [pc, #576]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	2380      	movs	r3, #128	@ 0x80
 8002b24:	029b      	lsls	r3, r3, #10
 8002b26:	4013      	ands	r3, r2
 8002b28:	d0ef      	beq.n	8002b0a <HAL_RCC_OscConfig+0xe6>
 8002b2a:	e015      	b.n	8002b58 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2c:	f7ff fc08 	bl	8002340 <HAL_GetTick>
 8002b30:	0003      	movs	r3, r0
 8002b32:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b36:	f7ff fc03 	bl	8002340 <HAL_GetTick>
 8002b3a:	0002      	movs	r2, r0
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b64      	cmp	r3, #100	@ 0x64
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e336      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b48:	4b85      	ldr	r3, [pc, #532]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	2380      	movs	r3, #128	@ 0x80
 8002b4e:	029b      	lsls	r3, r3, #10
 8002b50:	4013      	ands	r3, r2
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x112>
 8002b54:	e000      	b.n	8002b58 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d100      	bne.n	8002b64 <HAL_RCC_OscConfig+0x140>
 8002b62:	e099      	b.n	8002c98 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	4013      	ands	r3, r2
 8002b70:	d009      	beq.n	8002b86 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002b72:	4b7b      	ldr	r3, [pc, #492]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	4b7a      	ldr	r3, [pc, #488]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002b78:	2120      	movs	r1, #32
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b80:	2220      	movs	r2, #32
 8002b82:	4393      	bics	r3, r2
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d13e      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1ec>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d13b      	bne.n	8002c10 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b98:	4b71      	ldr	r3, [pc, #452]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2204      	movs	r2, #4
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d004      	beq.n	8002bac <HAL_RCC_OscConfig+0x188>
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e304      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b6c      	ldr	r3, [pc, #432]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a6e      	ldr	r2, [pc, #440]	@ (8002d6c <HAL_RCC_OscConfig+0x348>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	4b68      	ldr	r3, [pc, #416]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bc2:	4b67      	ldr	r3, [pc, #412]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2209      	movs	r2, #9
 8002bc8:	4393      	bics	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	4b64      	ldr	r3, [pc, #400]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd4:	f000 fc42 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8002bd8:	0001      	movs	r1, r0
 8002bda:	4b61      	ldr	r3, [pc, #388]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	220f      	movs	r2, #15
 8002be2:	4013      	ands	r3, r2
 8002be4:	4a62      	ldr	r2, [pc, #392]	@ (8002d70 <HAL_RCC_OscConfig+0x34c>)
 8002be6:	5cd3      	ldrb	r3, [r2, r3]
 8002be8:	000a      	movs	r2, r1
 8002bea:	40da      	lsrs	r2, r3
 8002bec:	4b61      	ldr	r3, [pc, #388]	@ (8002d74 <HAL_RCC_OscConfig+0x350>)
 8002bee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002bf0:	4b61      	ldr	r3, [pc, #388]	@ (8002d78 <HAL_RCC_OscConfig+0x354>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2513      	movs	r5, #19
 8002bf6:	197c      	adds	r4, r7, r5
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7ff fb5b 	bl	80022b4 <HAL_InitTick>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c02:	197b      	adds	r3, r7, r5
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d046      	beq.n	8002c98 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002c0a:	197b      	adds	r3, r7, r5
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	e2d2      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d027      	beq.n	8002c66 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c16:	4b52      	ldr	r3, [pc, #328]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2209      	movs	r2, #9
 8002c1c:	4393      	bics	r3, r2
 8002c1e:	0019      	movs	r1, r3
 8002c20:	4b4f      	ldr	r3, [pc, #316]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c24:	430a      	orrs	r2, r1
 8002c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c28:	f7ff fb8a 	bl	8002340 <HAL_GetTick>
 8002c2c:	0003      	movs	r3, r0
 8002c2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c32:	f7ff fb85 	bl	8002340 <HAL_GetTick>
 8002c36:	0002      	movs	r2, r0
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e2b8      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c44:	4b46      	ldr	r3, [pc, #280]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2204      	movs	r2, #4
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	d0f1      	beq.n	8002c32 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4e:	4b44      	ldr	r3, [pc, #272]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a46      	ldr	r2, [pc, #280]	@ (8002d6c <HAL_RCC_OscConfig+0x348>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	021a      	lsls	r2, r3, #8
 8002c5e:	4b40      	ldr	r3, [pc, #256]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	e018      	b.n	8002c98 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c66:	4b3e      	ldr	r3, [pc, #248]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	438a      	bics	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7ff fb65 	bl	8002340 <HAL_GetTick>
 8002c76:	0003      	movs	r3, r0
 8002c78:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c7c:	f7ff fb60 	bl	8002340 <HAL_GetTick>
 8002c80:	0002      	movs	r2, r0
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e293      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c8e:	4b34      	ldr	r3, [pc, #208]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2204      	movs	r2, #4
 8002c94:	4013      	ands	r3, r2
 8002c96:	d1f1      	bne.n	8002c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d100      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x280>
 8002ca2:	e0a2      	b.n	8002dea <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d140      	bne.n	8002d2c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002caa:	4b2d      	ldr	r3, [pc, #180]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	2380      	movs	r3, #128	@ 0x80
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x29e>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e279      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cc2:	4b27      	ldr	r3, [pc, #156]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a2d      	ldr	r2, [pc, #180]	@ (8002d7c <HAL_RCC_OscConfig+0x358>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cd0:	4b23      	ldr	r3, [pc, #140]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cd6:	4b22      	ldr	r3, [pc, #136]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	0a19      	lsrs	r1, r3, #8
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	061a      	lsls	r2, r3, #24
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cee:	0b5b      	lsrs	r3, r3, #13
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	2280      	movs	r2, #128	@ 0x80
 8002cf4:	0212      	lsls	r2, r2, #8
 8002cf6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002cf8:	4b19      	ldr	r3, [pc, #100]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	091b      	lsrs	r3, r3, #4
 8002cfe:	210f      	movs	r1, #15
 8002d00:	400b      	ands	r3, r1
 8002d02:	491b      	ldr	r1, [pc, #108]	@ (8002d70 <HAL_RCC_OscConfig+0x34c>)
 8002d04:	5ccb      	ldrb	r3, [r1, r3]
 8002d06:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d08:	4b1a      	ldr	r3, [pc, #104]	@ (8002d74 <HAL_RCC_OscConfig+0x350>)
 8002d0a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d78 <HAL_RCC_OscConfig+0x354>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2513      	movs	r5, #19
 8002d12:	197c      	adds	r4, r7, r5
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7ff facd 	bl	80022b4 <HAL_InitTick>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d1e:	197b      	adds	r3, r7, r5
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d061      	beq.n	8002dea <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002d26:	197b      	adds	r3, r7, r5
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	e244      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d040      	beq.n	8002db6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d34:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <HAL_RCC_OscConfig+0x33c>)
 8002d3a:	2180      	movs	r1, #128	@ 0x80
 8002d3c:	0049      	lsls	r1, r1, #1
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7ff fafd 	bl	8002340 <HAL_GetTick>
 8002d46:	0003      	movs	r3, r0
 8002d48:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d4a:	e019      	b.n	8002d80 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d4c:	f7ff faf8 	bl	8002340 <HAL_GetTick>
 8002d50:	0002      	movs	r2, r0
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d912      	bls.n	8002d80 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e22b      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	40021000 	.word	0x40021000
 8002d64:	fffeffff 	.word	0xfffeffff
 8002d68:	fffbffff 	.word	0xfffbffff
 8002d6c:	ffffe0ff 	.word	0xffffe0ff
 8002d70:	08007230 	.word	0x08007230
 8002d74:	20000000 	.word	0x20000000
 8002d78:	20000004 	.word	0x20000004
 8002d7c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d80:	4bca      	ldr	r3, [pc, #808]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d0df      	beq.n	8002d4c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d8c:	4bc7      	ldr	r3, [pc, #796]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4ac7      	ldr	r2, [pc, #796]	@ (80030b0 <HAL_RCC_OscConfig+0x68c>)
 8002d92:	4013      	ands	r3, r2
 8002d94:	0019      	movs	r1, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d9a:	4bc4      	ldr	r3, [pc, #784]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002da0:	4bc2      	ldr	r3, [pc, #776]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	0a19      	lsrs	r1, r3, #8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6a1b      	ldr	r3, [r3, #32]
 8002dac:	061a      	lsls	r2, r3, #24
 8002dae:	4bbf      	ldr	r3, [pc, #764]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	e019      	b.n	8002dea <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002db6:	4bbd      	ldr	r3, [pc, #756]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	4bbc      	ldr	r3, [pc, #752]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002dbc:	49bd      	ldr	r1, [pc, #756]	@ (80030b4 <HAL_RCC_OscConfig+0x690>)
 8002dbe:	400a      	ands	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7ff fabd 	bl	8002340 <HAL_GetTick>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dcc:	f7ff fab8 	bl	8002340 <HAL_GetTick>
 8002dd0:	0002      	movs	r2, r0
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e1eb      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dde:	4bb3      	ldr	r3, [pc, #716]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	2380      	movs	r3, #128	@ 0x80
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4013      	ands	r3, r2
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2208      	movs	r2, #8
 8002df0:	4013      	ands	r3, r2
 8002df2:	d036      	beq.n	8002e62 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d019      	beq.n	8002e30 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfc:	4bab      	ldr	r3, [pc, #684]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002dfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e00:	4baa      	ldr	r3, [pc, #680]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002e02:	2101      	movs	r1, #1
 8002e04:	430a      	orrs	r2, r1
 8002e06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7ff fa9a 	bl	8002340 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e12:	f7ff fa95 	bl	8002340 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e1c8      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e24:	4ba1      	ldr	r3, [pc, #644]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d0f1      	beq.n	8002e12 <HAL_RCC_OscConfig+0x3ee>
 8002e2e:	e018      	b.n	8002e62 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e30:	4b9e      	ldr	r3, [pc, #632]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002e32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e34:	4b9d      	ldr	r3, [pc, #628]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	438a      	bics	r2, r1
 8002e3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e3c:	f7ff fa80 	bl	8002340 <HAL_GetTick>
 8002e40:	0003      	movs	r3, r0
 8002e42:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e46:	f7ff fa7b 	bl	8002340 <HAL_GetTick>
 8002e4a:	0002      	movs	r2, r0
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e1ae      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e58:	4b94      	ldr	r3, [pc, #592]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002e5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d1f1      	bne.n	8002e46 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2204      	movs	r2, #4
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d100      	bne.n	8002e6e <HAL_RCC_OscConfig+0x44a>
 8002e6c:	e0ae      	b.n	8002fcc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e6e:	2023      	movs	r0, #35	@ 0x23
 8002e70:	183b      	adds	r3, r7, r0
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e76:	4b8d      	ldr	r3, [pc, #564]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	055b      	lsls	r3, r3, #21
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e82:	4b8a      	ldr	r3, [pc, #552]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002e84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e86:	4b89      	ldr	r3, [pc, #548]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	0549      	lsls	r1, r1, #21
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002e90:	183b      	adds	r3, r7, r0
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e96:	4b88      	ldr	r3, [pc, #544]	@ (80030b8 <HAL_RCC_OscConfig+0x694>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	005b      	lsls	r3, r3, #1
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d11a      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ea2:	4b85      	ldr	r3, [pc, #532]	@ (80030b8 <HAL_RCC_OscConfig+0x694>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b84      	ldr	r3, [pc, #528]	@ (80030b8 <HAL_RCC_OscConfig+0x694>)
 8002ea8:	2180      	movs	r1, #128	@ 0x80
 8002eaa:	0049      	lsls	r1, r1, #1
 8002eac:	430a      	orrs	r2, r1
 8002eae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eb0:	f7ff fa46 	bl	8002340 <HAL_GetTick>
 8002eb4:	0003      	movs	r3, r0
 8002eb6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eba:	f7ff fa41 	bl	8002340 <HAL_GetTick>
 8002ebe:	0002      	movs	r2, r0
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	@ 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e174      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ecc:	4b7a      	ldr	r3, [pc, #488]	@ (80030b8 <HAL_RCC_OscConfig+0x694>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	2380      	movs	r3, #128	@ 0x80
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d0f0      	beq.n	8002eba <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	2380      	movs	r3, #128	@ 0x80
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4d0>
 8002ee4:	4b71      	ldr	r3, [pc, #452]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002ee6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ee8:	4b70      	ldr	r3, [pc, #448]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002eea:	2180      	movs	r1, #128	@ 0x80
 8002eec:	0049      	lsls	r1, r1, #1
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002ef2:	e031      	b.n	8002f58 <HAL_RCC_OscConfig+0x534>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4f2>
 8002efc:	4b6b      	ldr	r3, [pc, #428]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002efe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f00:	4b6a      	ldr	r3, [pc, #424]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f02:	496c      	ldr	r1, [pc, #432]	@ (80030b4 <HAL_RCC_OscConfig+0x690>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f08:	4b68      	ldr	r3, [pc, #416]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f0c:	4b67      	ldr	r3, [pc, #412]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f0e:	496b      	ldr	r1, [pc, #428]	@ (80030bc <HAL_RCC_OscConfig+0x698>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f14:	e020      	b.n	8002f58 <HAL_RCC_OscConfig+0x534>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689a      	ldr	r2, [r3, #8]
 8002f1a:	23a0      	movs	r3, #160	@ 0xa0
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d10e      	bne.n	8002f40 <HAL_RCC_OscConfig+0x51c>
 8002f22:	4b62      	ldr	r3, [pc, #392]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f26:	4b61      	ldr	r3, [pc, #388]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f28:	2180      	movs	r1, #128	@ 0x80
 8002f2a:	00c9      	lsls	r1, r1, #3
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f30:	4b5e      	ldr	r3, [pc, #376]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f34:	4b5d      	ldr	r3, [pc, #372]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f36:	2180      	movs	r1, #128	@ 0x80
 8002f38:	0049      	lsls	r1, r1, #1
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0x534>
 8002f40:	4b5a      	ldr	r3, [pc, #360]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f44:	4b59      	ldr	r3, [pc, #356]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f46:	495b      	ldr	r1, [pc, #364]	@ (80030b4 <HAL_RCC_OscConfig+0x690>)
 8002f48:	400a      	ands	r2, r1
 8002f4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f4c:	4b57      	ldr	r3, [pc, #348]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f50:	4b56      	ldr	r3, [pc, #344]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f52:	495a      	ldr	r1, [pc, #360]	@ (80030bc <HAL_RCC_OscConfig+0x698>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d015      	beq.n	8002f8c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f60:	f7ff f9ee 	bl	8002340 <HAL_GetTick>
 8002f64:	0003      	movs	r3, r0
 8002f66:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f68:	e009      	b.n	8002f7e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f6a:	f7ff f9e9 	bl	8002340 <HAL_GetTick>
 8002f6e:	0002      	movs	r2, r0
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	4a52      	ldr	r2, [pc, #328]	@ (80030c0 <HAL_RCC_OscConfig+0x69c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e11b      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f7e:	4b4b      	ldr	r3, [pc, #300]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002f80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f82:	2380      	movs	r3, #128	@ 0x80
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4013      	ands	r3, r2
 8002f88:	d0ef      	beq.n	8002f6a <HAL_RCC_OscConfig+0x546>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8c:	f7ff f9d8 	bl	8002340 <HAL_GetTick>
 8002f90:	0003      	movs	r3, r0
 8002f92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f94:	e009      	b.n	8002faa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f96:	f7ff f9d3 	bl	8002340 <HAL_GetTick>
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	4a47      	ldr	r2, [pc, #284]	@ (80030c0 <HAL_RCC_OscConfig+0x69c>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d901      	bls.n	8002faa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e105      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002faa:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002fac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002fae:	2380      	movs	r3, #128	@ 0x80
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	d1ef      	bne.n	8002f96 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fb6:	2323      	movs	r3, #35	@ 0x23
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d105      	bne.n	8002fcc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fc0:	4b3a      	ldr	r3, [pc, #232]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002fc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fc4:	4b39      	ldr	r3, [pc, #228]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002fc6:	493f      	ldr	r1, [pc, #252]	@ (80030c4 <HAL_RCC_OscConfig+0x6a0>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	d049      	beq.n	800306a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d026      	beq.n	800302c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002fde:	4b33      	ldr	r3, [pc, #204]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	4b32      	ldr	r3, [pc, #200]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	4b30      	ldr	r3, [pc, #192]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fee:	4b2f      	ldr	r3, [pc, #188]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ff6:	4b34      	ldr	r3, [pc, #208]	@ (80030c8 <HAL_RCC_OscConfig+0x6a4>)
 8002ff8:	6a1a      	ldr	r2, [r3, #32]
 8002ffa:	4b33      	ldr	r3, [pc, #204]	@ (80030c8 <HAL_RCC_OscConfig+0x6a4>)
 8002ffc:	2180      	movs	r1, #128	@ 0x80
 8002ffe:	0189      	lsls	r1, r1, #6
 8003000:	430a      	orrs	r2, r1
 8003002:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff f99c 	bl	8002340 <HAL_GetTick>
 8003008:	0003      	movs	r3, r0
 800300a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800300e:	f7ff f997 	bl	8002340 <HAL_GetTick>
 8003012:	0002      	movs	r2, r0
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e0ca      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003020:	4b22      	ldr	r3, [pc, #136]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2202      	movs	r2, #2
 8003026:	4013      	ands	r3, r2
 8003028:	d0f1      	beq.n	800300e <HAL_RCC_OscConfig+0x5ea>
 800302a:	e01e      	b.n	800306a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800302c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 800302e:	689a      	ldr	r2, [r3, #8]
 8003030:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8003032:	2101      	movs	r1, #1
 8003034:	438a      	bics	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	4b23      	ldr	r3, [pc, #140]	@ (80030c8 <HAL_RCC_OscConfig+0x6a4>)
 800303a:	6a1a      	ldr	r2, [r3, #32]
 800303c:	4b22      	ldr	r3, [pc, #136]	@ (80030c8 <HAL_RCC_OscConfig+0x6a4>)
 800303e:	4923      	ldr	r1, [pc, #140]	@ (80030cc <HAL_RCC_OscConfig+0x6a8>)
 8003040:	400a      	ands	r2, r1
 8003042:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7ff f97c 	bl	8002340 <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800304e:	f7ff f977 	bl	8002340 <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0aa      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003060:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2202      	movs	r2, #2
 8003066:	4013      	ands	r3, r2
 8003068:	d1f1      	bne.n	800304e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800306e:	2b00      	cmp	r3, #0
 8003070:	d100      	bne.n	8003074 <HAL_RCC_OscConfig+0x650>
 8003072:	e09f      	b.n	80031b4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d100      	bne.n	800307c <HAL_RCC_OscConfig+0x658>
 800307a:	e078      	b.n	800316e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	2b02      	cmp	r3, #2
 8003082:	d159      	bne.n	8003138 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <HAL_RCC_OscConfig+0x688>)
 800308a:	4911      	ldr	r1, [pc, #68]	@ (80030d0 <HAL_RCC_OscConfig+0x6ac>)
 800308c:	400a      	ands	r2, r1
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7ff f956 	bl	8002340 <HAL_GetTick>
 8003094:	0003      	movs	r3, r0
 8003096:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003098:	e01c      	b.n	80030d4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309a:	f7ff f951 	bl	8002340 <HAL_GetTick>
 800309e:	0002      	movs	r2, r0
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d915      	bls.n	80030d4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e084      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
 80030ac:	40021000 	.word	0x40021000
 80030b0:	ffff1fff 	.word	0xffff1fff
 80030b4:	fffffeff 	.word	0xfffffeff
 80030b8:	40007000 	.word	0x40007000
 80030bc:	fffffbff 	.word	0xfffffbff
 80030c0:	00001388 	.word	0x00001388
 80030c4:	efffffff 	.word	0xefffffff
 80030c8:	40010000 	.word	0x40010000
 80030cc:	ffffdfff 	.word	0xffffdfff
 80030d0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030d4:	4b3a      	ldr	r3, [pc, #232]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	049b      	lsls	r3, r3, #18
 80030dc:	4013      	ands	r3, r2
 80030de:	d1dc      	bne.n	800309a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030e0:	4b37      	ldr	r3, [pc, #220]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a37      	ldr	r2, [pc, #220]	@ (80031c4 <HAL_RCC_OscConfig+0x7a0>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f8:	431a      	orrs	r2, r3
 80030fa:	4b31      	ldr	r3, [pc, #196]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003100:	4b2f      	ldr	r3, [pc, #188]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b2e      	ldr	r3, [pc, #184]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 8003106:	2180      	movs	r1, #128	@ 0x80
 8003108:	0449      	lsls	r1, r1, #17
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800310e:	f7ff f917 	bl	8002340 <HAL_GetTick>
 8003112:	0003      	movs	r3, r0
 8003114:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003118:	f7ff f912 	bl	8002340 <HAL_GetTick>
 800311c:	0002      	movs	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e045      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800312a:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	2380      	movs	r3, #128	@ 0x80
 8003130:	049b      	lsls	r3, r3, #18
 8003132:	4013      	ands	r3, r2
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x6f4>
 8003136:	e03d      	b.n	80031b4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003138:	4b21      	ldr	r3, [pc, #132]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4b20      	ldr	r3, [pc, #128]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 800313e:	4922      	ldr	r1, [pc, #136]	@ (80031c8 <HAL_RCC_OscConfig+0x7a4>)
 8003140:	400a      	ands	r2, r1
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003144:	f7ff f8fc 	bl	8002340 <HAL_GetTick>
 8003148:	0003      	movs	r3, r0
 800314a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314e:	f7ff f8f7 	bl	8002340 <HAL_GetTick>
 8003152:	0002      	movs	r2, r0
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e02a      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003160:	4b17      	ldr	r3, [pc, #92]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	2380      	movs	r3, #128	@ 0x80
 8003166:	049b      	lsls	r3, r3, #18
 8003168:	4013      	ands	r3, r2
 800316a:	d1f0      	bne.n	800314e <HAL_RCC_OscConfig+0x72a>
 800316c:	e022      	b.n	80031b4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e01d      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_RCC_OscConfig+0x79c>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	2380      	movs	r3, #128	@ 0x80
 8003184:	025b      	lsls	r3, r3, #9
 8003186:	401a      	ands	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	429a      	cmp	r2, r3
 800318e:	d10f      	bne.n	80031b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	23f0      	movs	r3, #240	@ 0xf0
 8003194:	039b      	lsls	r3, r3, #14
 8003196:	401a      	ands	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	23c0      	movs	r3, #192	@ 0xc0
 80031a4:	041b      	lsls	r3, r3, #16
 80031a6:	401a      	ands	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	0018      	movs	r0, r3
 80031b8:	46bd      	mov	sp, r7
 80031ba:	b00a      	add	sp, #40	@ 0x28
 80031bc:	bdb0      	pop	{r4, r5, r7, pc}
 80031be:	46c0      	nop			@ (mov r8, r8)
 80031c0:	40021000 	.word	0x40021000
 80031c4:	ff02ffff 	.word	0xff02ffff
 80031c8:	feffffff 	.word	0xfeffffff

080031cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031cc:	b5b0      	push	{r4, r5, r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e128      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031e0:	4b96      	ldr	r3, [pc, #600]	@ (800343c <HAL_RCC_ClockConfig+0x270>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4013      	ands	r3, r2
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d91e      	bls.n	800322c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ee:	4b93      	ldr	r3, [pc, #588]	@ (800343c <HAL_RCC_ClockConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	4393      	bics	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	4b90      	ldr	r3, [pc, #576]	@ (800343c <HAL_RCC_ClockConfig+0x270>)
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003200:	f7ff f89e 	bl	8002340 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003208:	e009      	b.n	800321e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800320a:	f7ff f899 	bl	8002340 <HAL_GetTick>
 800320e:	0002      	movs	r2, r0
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	4a8a      	ldr	r2, [pc, #552]	@ (8003440 <HAL_RCC_ClockConfig+0x274>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e109      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800321e:	4b87      	ldr	r3, [pc, #540]	@ (800343c <HAL_RCC_ClockConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	4013      	ands	r3, r2
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2202      	movs	r2, #2
 8003232:	4013      	ands	r3, r2
 8003234:	d009      	beq.n	800324a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003236:	4b83      	ldr	r3, [pc, #524]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	22f0      	movs	r2, #240	@ 0xf0
 800323c:	4393      	bics	r3, r2
 800323e:	0019      	movs	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	4b7f      	ldr	r3, [pc, #508]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003246:	430a      	orrs	r2, r1
 8003248:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2201      	movs	r2, #1
 8003250:	4013      	ands	r3, r2
 8003252:	d100      	bne.n	8003256 <HAL_RCC_ClockConfig+0x8a>
 8003254:	e089      	b.n	800336a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d107      	bne.n	800326e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800325e:	4b79      	ldr	r3, [pc, #484]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	029b      	lsls	r3, r3, #10
 8003266:	4013      	ands	r3, r2
 8003268:	d120      	bne.n	80032ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0e1      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	2b03      	cmp	r3, #3
 8003274:	d107      	bne.n	8003286 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003276:	4b73      	ldr	r3, [pc, #460]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	2380      	movs	r3, #128	@ 0x80
 800327c:	049b      	lsls	r3, r3, #18
 800327e:	4013      	ands	r3, r2
 8003280:	d114      	bne.n	80032ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e0d5      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d106      	bne.n	800329c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800328e:	4b6d      	ldr	r3, [pc, #436]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2204      	movs	r2, #4
 8003294:	4013      	ands	r3, r2
 8003296:	d109      	bne.n	80032ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0ca      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800329c:	4b69      	ldr	r3, [pc, #420]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4013      	ands	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e0c2      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ac:	4b65      	ldr	r3, [pc, #404]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	2203      	movs	r2, #3
 80032b2:	4393      	bics	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	4b62      	ldr	r3, [pc, #392]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 80032bc:	430a      	orrs	r2, r1
 80032be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032c0:	f7ff f83e 	bl	8002340 <HAL_GetTick>
 80032c4:	0003      	movs	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d111      	bne.n	80032f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d0:	e009      	b.n	80032e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d2:	f7ff f835 	bl	8002340 <HAL_GetTick>
 80032d6:	0002      	movs	r2, r0
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	4a58      	ldr	r2, [pc, #352]	@ (8003440 <HAL_RCC_ClockConfig+0x274>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e0a5      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032e6:	4b57      	ldr	r3, [pc, #348]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	220c      	movs	r2, #12
 80032ec:	4013      	ands	r3, r2
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d1ef      	bne.n	80032d2 <HAL_RCC_ClockConfig+0x106>
 80032f2:	e03a      	b.n	800336a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	2b03      	cmp	r3, #3
 80032fa:	d111      	bne.n	8003320 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032fc:	e009      	b.n	8003312 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fe:	f7ff f81f 	bl	8002340 <HAL_GetTick>
 8003302:	0002      	movs	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	4a4d      	ldr	r2, [pc, #308]	@ (8003440 <HAL_RCC_ClockConfig+0x274>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e08f      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003312:	4b4c      	ldr	r3, [pc, #304]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	220c      	movs	r2, #12
 8003318:	4013      	ands	r3, r2
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d1ef      	bne.n	80032fe <HAL_RCC_ClockConfig+0x132>
 800331e:	e024      	b.n	800336a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d11b      	bne.n	8003360 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003328:	e009      	b.n	800333e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332a:	f7ff f809 	bl	8002340 <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	4a42      	ldr	r2, [pc, #264]	@ (8003440 <HAL_RCC_ClockConfig+0x274>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e079      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800333e:	4b41      	ldr	r3, [pc, #260]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	220c      	movs	r2, #12
 8003344:	4013      	ands	r3, r2
 8003346:	2b04      	cmp	r3, #4
 8003348:	d1ef      	bne.n	800332a <HAL_RCC_ClockConfig+0x15e>
 800334a:	e00e      	b.n	800336a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fe fff8 	bl	8002340 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	4a3a      	ldr	r2, [pc, #232]	@ (8003440 <HAL_RCC_ClockConfig+0x274>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e068      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003360:	4b38      	ldr	r3, [pc, #224]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	220c      	movs	r2, #12
 8003366:	4013      	ands	r3, r2
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336a:	4b34      	ldr	r3, [pc, #208]	@ (800343c <HAL_RCC_ClockConfig+0x270>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	4013      	ands	r3, r2
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d21e      	bcs.n	80033b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003378:	4b30      	ldr	r3, [pc, #192]	@ (800343c <HAL_RCC_ClockConfig+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2201      	movs	r2, #1
 800337e:	4393      	bics	r3, r2
 8003380:	0019      	movs	r1, r3
 8003382:	4b2e      	ldr	r3, [pc, #184]	@ (800343c <HAL_RCC_ClockConfig+0x270>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800338a:	f7fe ffd9 	bl	8002340 <HAL_GetTick>
 800338e:	0003      	movs	r3, r0
 8003390:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003392:	e009      	b.n	80033a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003394:	f7fe ffd4 	bl	8002340 <HAL_GetTick>
 8003398:	0002      	movs	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	4a28      	ldr	r2, [pc, #160]	@ (8003440 <HAL_RCC_ClockConfig+0x274>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e044      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a8:	4b24      	ldr	r3, [pc, #144]	@ (800343c <HAL_RCC_ClockConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	4013      	ands	r3, r2
 80033b0:	683a      	ldr	r2, [r7, #0]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d1ee      	bne.n	8003394 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2204      	movs	r2, #4
 80033bc:	4013      	ands	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c0:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4a20      	ldr	r2, [pc, #128]	@ (8003448 <HAL_RCC_ClockConfig+0x27c>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68da      	ldr	r2, [r3, #12]
 80033ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2208      	movs	r2, #8
 80033da:	4013      	ands	r3, r2
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033de:	4b19      	ldr	r3, [pc, #100]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4a1a      	ldr	r2, [pc, #104]	@ (800344c <HAL_RCC_ClockConfig+0x280>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	00da      	lsls	r2, r3, #3
 80033ee:	4b15      	ldr	r3, [pc, #84]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033f0:	430a      	orrs	r2, r1
 80033f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033f4:	f000 f832 	bl	800345c <HAL_RCC_GetSysClockFreq>
 80033f8:	0001      	movs	r1, r0
 80033fa:	4b12      	ldr	r3, [pc, #72]	@ (8003444 <HAL_RCC_ClockConfig+0x278>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	220f      	movs	r2, #15
 8003402:	4013      	ands	r3, r2
 8003404:	4a12      	ldr	r2, [pc, #72]	@ (8003450 <HAL_RCC_ClockConfig+0x284>)
 8003406:	5cd3      	ldrb	r3, [r2, r3]
 8003408:	000a      	movs	r2, r1
 800340a:	40da      	lsrs	r2, r3
 800340c:	4b11      	ldr	r3, [pc, #68]	@ (8003454 <HAL_RCC_ClockConfig+0x288>)
 800340e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003410:	4b11      	ldr	r3, [pc, #68]	@ (8003458 <HAL_RCC_ClockConfig+0x28c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	250b      	movs	r5, #11
 8003416:	197c      	adds	r4, r7, r5
 8003418:	0018      	movs	r0, r3
 800341a:	f7fe ff4b 	bl	80022b4 <HAL_InitTick>
 800341e:	0003      	movs	r3, r0
 8003420:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003422:	197b      	adds	r3, r7, r5
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800342a:	197b      	adds	r3, r7, r5
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	e000      	b.n	8003432 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b004      	add	sp, #16
 8003438:	bdb0      	pop	{r4, r5, r7, pc}
 800343a:	46c0      	nop			@ (mov r8, r8)
 800343c:	40022000 	.word	0x40022000
 8003440:	00001388 	.word	0x00001388
 8003444:	40021000 	.word	0x40021000
 8003448:	fffff8ff 	.word	0xfffff8ff
 800344c:	ffffc7ff 	.word	0xffffc7ff
 8003450:	08007230 	.word	0x08007230
 8003454:	20000000 	.word	0x20000000
 8003458:	20000004 	.word	0x20000004

0800345c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800345c:	b5b0      	push	{r4, r5, r7, lr}
 800345e:	b08e      	sub	sp, #56	@ 0x38
 8003460:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003462:	4b4c      	ldr	r3, [pc, #304]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003468:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800346a:	230c      	movs	r3, #12
 800346c:	4013      	ands	r3, r2
 800346e:	2b0c      	cmp	r3, #12
 8003470:	d014      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x40>
 8003472:	d900      	bls.n	8003476 <HAL_RCC_GetSysClockFreq+0x1a>
 8003474:	e07b      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x112>
 8003476:	2b04      	cmp	r3, #4
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x24>
 800347a:	2b08      	cmp	r3, #8
 800347c:	d00b      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x3a>
 800347e:	e076      	b.n	800356e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003480:	4b44      	ldr	r3, [pc, #272]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2210      	movs	r2, #16
 8003486:	4013      	ands	r3, r2
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800348a:	4b43      	ldr	r3, [pc, #268]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x13c>)
 800348c:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800348e:	e07c      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003490:	4b42      	ldr	r3, [pc, #264]	@ (800359c <HAL_RCC_GetSysClockFreq+0x140>)
 8003492:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003494:	e079      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003496:	4b42      	ldr	r3, [pc, #264]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x144>)
 8003498:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800349a:	e076      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800349c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349e:	0c9a      	lsrs	r2, r3, #18
 80034a0:	230f      	movs	r3, #15
 80034a2:	401a      	ands	r2, r3
 80034a4:	4b3f      	ldr	r3, [pc, #252]	@ (80035a4 <HAL_RCC_GetSysClockFreq+0x148>)
 80034a6:	5c9b      	ldrb	r3, [r3, r2]
 80034a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ac:	0d9a      	lsrs	r2, r3, #22
 80034ae:	2303      	movs	r3, #3
 80034b0:	4013      	ands	r3, r2
 80034b2:	3301      	adds	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034b6:	4b37      	ldr	r3, [pc, #220]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	025b      	lsls	r3, r3, #9
 80034be:	4013      	ands	r3, r2
 80034c0:	d01a      	beq.n	80034f8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	4a35      	ldr	r2, [pc, #212]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x144>)
 80034cc:	2300      	movs	r3, #0
 80034ce:	69b8      	ldr	r0, [r7, #24]
 80034d0:	69f9      	ldr	r1, [r7, #28]
 80034d2:	f7fc fecf 	bl	8000274 <__aeabi_lmul>
 80034d6:	0002      	movs	r2, r0
 80034d8:	000b      	movs	r3, r1
 80034da:	0010      	movs	r0, r2
 80034dc:	0019      	movs	r1, r3
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f7fc fea3 	bl	8000234 <__aeabi_uldivmod>
 80034ee:	0002      	movs	r2, r0
 80034f0:	000b      	movs	r3, r1
 80034f2:	0013      	movs	r3, r2
 80034f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034f6:	e037      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034f8:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2210      	movs	r2, #16
 80034fe:	4013      	ands	r3, r2
 8003500:	d01a      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4a23      	ldr	r2, [pc, #140]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x13c>)
 800350c:	2300      	movs	r3, #0
 800350e:	68b8      	ldr	r0, [r7, #8]
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	f7fc feaf 	bl	8000274 <__aeabi_lmul>
 8003516:	0002      	movs	r2, r0
 8003518:	000b      	movs	r3, r1
 800351a:	0010      	movs	r0, r2
 800351c:	0019      	movs	r1, r3
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	603b      	str	r3, [r7, #0]
 8003522:	2300      	movs	r3, #0
 8003524:	607b      	str	r3, [r7, #4]
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f7fc fe83 	bl	8000234 <__aeabi_uldivmod>
 800352e:	0002      	movs	r2, r0
 8003530:	000b      	movs	r3, r1
 8003532:	0013      	movs	r3, r2
 8003534:	637b      	str	r3, [r7, #52]	@ 0x34
 8003536:	e017      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	0018      	movs	r0, r3
 800353c:	2300      	movs	r3, #0
 800353e:	0019      	movs	r1, r3
 8003540:	4a16      	ldr	r2, [pc, #88]	@ (800359c <HAL_RCC_GetSysClockFreq+0x140>)
 8003542:	2300      	movs	r3, #0
 8003544:	f7fc fe96 	bl	8000274 <__aeabi_lmul>
 8003548:	0002      	movs	r2, r0
 800354a:	000b      	movs	r3, r1
 800354c:	0010      	movs	r0, r2
 800354e:	0019      	movs	r1, r3
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	001c      	movs	r4, r3
 8003554:	2300      	movs	r3, #0
 8003556:	001d      	movs	r5, r3
 8003558:	0022      	movs	r2, r4
 800355a:	002b      	movs	r3, r5
 800355c:	f7fc fe6a 	bl	8000234 <__aeabi_uldivmod>
 8003560:	0002      	movs	r2, r0
 8003562:	000b      	movs	r3, r1
 8003564:	0013      	movs	r3, r2
 8003566:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8003568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800356a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800356c:	e00d      	b.n	800358a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800356e:	4b09      	ldr	r3, [pc, #36]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x138>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	0b5b      	lsrs	r3, r3, #13
 8003574:	2207      	movs	r2, #7
 8003576:	4013      	ands	r3, r2
 8003578:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	3301      	adds	r3, #1
 800357e:	2280      	movs	r2, #128	@ 0x80
 8003580:	0212      	lsls	r2, r2, #8
 8003582:	409a      	lsls	r2, r3
 8003584:	0013      	movs	r3, r2
 8003586:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8003588:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800358a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b00e      	add	sp, #56	@ 0x38
 8003592:	bdb0      	pop	{r4, r5, r7, pc}
 8003594:	40021000 	.word	0x40021000
 8003598:	003d0900 	.word	0x003d0900
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	007a1200 	.word	0x007a1200
 80035a4:	08007248 	.word	0x08007248

080035a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ac:	4b02      	ldr	r3, [pc, #8]	@ (80035b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ae:	681b      	ldr	r3, [r3, #0]
}
 80035b0:	0018      	movs	r0, r3
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	20000000 	.word	0x20000000

080035bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035c0:	f7ff fff2 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035c4:	0001      	movs	r1, r0
 80035c6:	4b06      	ldr	r3, [pc, #24]	@ (80035e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	0a1b      	lsrs	r3, r3, #8
 80035cc:	2207      	movs	r2, #7
 80035ce:	4013      	ands	r3, r2
 80035d0:	4a04      	ldr	r2, [pc, #16]	@ (80035e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035d2:	5cd3      	ldrb	r3, [r2, r3]
 80035d4:	40d9      	lsrs	r1, r3
 80035d6:	000b      	movs	r3, r1
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	40021000 	.word	0x40021000
 80035e4:	08007240 	.word	0x08007240

080035e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035ec:	f7ff ffdc 	bl	80035a8 <HAL_RCC_GetHCLKFreq>
 80035f0:	0001      	movs	r1, r0
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_RCC_GetPCLK2Freq+0x24>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	0adb      	lsrs	r3, r3, #11
 80035f8:	2207      	movs	r2, #7
 80035fa:	4013      	ands	r3, r2
 80035fc:	4a04      	ldr	r2, [pc, #16]	@ (8003610 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035fe:	5cd3      	ldrb	r3, [r2, r3]
 8003600:	40d9      	lsrs	r1, r3
 8003602:	000b      	movs	r3, r1
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			@ (mov r8, r8)
 800360c:	40021000 	.word	0x40021000
 8003610:	08007240 	.word	0x08007240

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800361c:	2017      	movs	r0, #23
 800361e:	183b      	adds	r3, r7, r0
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2220      	movs	r2, #32
 800362a:	4013      	ands	r3, r2
 800362c:	d100      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800362e:	e0c7      	b.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003630:	4b9b      	ldr	r3, [pc, #620]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003632:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	055b      	lsls	r3, r3, #21
 8003638:	4013      	ands	r3, r2
 800363a:	d109      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363c:	4b98      	ldr	r3, [pc, #608]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800363e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003640:	4b97      	ldr	r3, [pc, #604]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003642:	2180      	movs	r1, #128	@ 0x80
 8003644:	0549      	lsls	r1, r1, #21
 8003646:	430a      	orrs	r2, r1
 8003648:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800364a:	183b      	adds	r3, r7, r0
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003650:	4b94      	ldr	r3, [pc, #592]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	4013      	ands	r3, r2
 800365a:	d11a      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365c:	4b91      	ldr	r3, [pc, #580]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b90      	ldr	r3, [pc, #576]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003662:	2180      	movs	r1, #128	@ 0x80
 8003664:	0049      	lsls	r1, r1, #1
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fe fe69 	bl	8002340 <HAL_GetTick>
 800366e:	0003      	movs	r3, r0
 8003670:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	e008      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003674:	f7fe fe64 	bl	8002340 <HAL_GetTick>
 8003678:	0002      	movs	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b64      	cmp	r3, #100	@ 0x64
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e107      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003686:	4b87      	ldr	r3, [pc, #540]	@ (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d0f0      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003692:	4b83      	ldr	r3, [pc, #524]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	23c0      	movs	r3, #192	@ 0xc0
 8003698:	039b      	lsls	r3, r3, #14
 800369a:	4013      	ands	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	23c0      	movs	r3, #192	@ 0xc0
 80036a4:	039b      	lsls	r3, r3, #14
 80036a6:	4013      	ands	r3, r2
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d013      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	23c0      	movs	r3, #192	@ 0xc0
 80036b4:	029b      	lsls	r3, r3, #10
 80036b6:	401a      	ands	r2, r3
 80036b8:	23c0      	movs	r3, #192	@ 0xc0
 80036ba:	029b      	lsls	r3, r3, #10
 80036bc:	429a      	cmp	r2, r3
 80036be:	d10a      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036c0:	4b77      	ldr	r3, [pc, #476]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2380      	movs	r3, #128	@ 0x80
 80036c6:	029b      	lsls	r3, r3, #10
 80036c8:	401a      	ands	r2, r3
 80036ca:	2380      	movs	r3, #128	@ 0x80
 80036cc:	029b      	lsls	r3, r3, #10
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d101      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e0df      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80036d6:	4b72      	ldr	r3, [pc, #456]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80036d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036da:	23c0      	movs	r3, #192	@ 0xc0
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	4013      	ands	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d03b      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	23c0      	movs	r3, #192	@ 0xc0
 80036ee:	029b      	lsls	r3, r3, #10
 80036f0:	4013      	ands	r3, r2
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d033      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2220      	movs	r2, #32
 80036fe:	4013      	ands	r3, r2
 8003700:	d02e      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003702:	4b67      	ldr	r3, [pc, #412]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003706:	4a68      	ldr	r2, [pc, #416]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8003708:	4013      	ands	r3, r2
 800370a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800370c:	4b64      	ldr	r3, [pc, #400]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800370e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003710:	4b63      	ldr	r3, [pc, #396]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003712:	2180      	movs	r1, #128	@ 0x80
 8003714:	0309      	lsls	r1, r1, #12
 8003716:	430a      	orrs	r2, r1
 8003718:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800371a:	4b61      	ldr	r3, [pc, #388]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800371c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800371e:	4b60      	ldr	r3, [pc, #384]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003720:	4962      	ldr	r1, [pc, #392]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8003722:	400a      	ands	r2, r1
 8003724:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003726:	4b5e      	ldr	r3, [pc, #376]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	2380      	movs	r3, #128	@ 0x80
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	4013      	ands	r3, r2
 8003734:	d014      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe fe03 	bl	8002340 <HAL_GetTick>
 800373a:	0003      	movs	r3, r0
 800373c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800373e:	e009      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003740:	f7fe fdfe 	bl	8002340 <HAL_GetTick>
 8003744:	0002      	movs	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	4a59      	ldr	r2, [pc, #356]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0a0      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003754:	4b52      	ldr	r3, [pc, #328]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003756:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003758:	2380      	movs	r3, #128	@ 0x80
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4013      	ands	r3, r2
 800375e:	d0ef      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2220      	movs	r2, #32
 8003766:	4013      	ands	r3, r2
 8003768:	d01f      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	23c0      	movs	r3, #192	@ 0xc0
 8003770:	029b      	lsls	r3, r3, #10
 8003772:	401a      	ands	r2, r3
 8003774:	23c0      	movs	r3, #192	@ 0xc0
 8003776:	029b      	lsls	r3, r3, #10
 8003778:	429a      	cmp	r2, r3
 800377a:	d10c      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800377c:	4b48      	ldr	r3, [pc, #288]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a4c      	ldr	r2, [pc, #304]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8003782:	4013      	ands	r3, r2
 8003784:	0019      	movs	r1, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	23c0      	movs	r3, #192	@ 0xc0
 800378c:	039b      	lsls	r3, r3, #14
 800378e:	401a      	ands	r2, r3
 8003790:	4b43      	ldr	r3, [pc, #268]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	4b42      	ldr	r3, [pc, #264]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003798:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	23c0      	movs	r3, #192	@ 0xc0
 80037a0:	029b      	lsls	r3, r3, #10
 80037a2:	401a      	ands	r2, r3
 80037a4:	4b3e      	ldr	r3, [pc, #248]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037a6:	430a      	orrs	r2, r1
 80037a8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037aa:	2317      	movs	r3, #23
 80037ac:	18fb      	adds	r3, r7, r3
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b4:	4b3a      	ldr	r3, [pc, #232]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037b8:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037ba:	493f      	ldr	r1, [pc, #252]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80037bc:	400a      	ands	r2, r1
 80037be:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2201      	movs	r2, #1
 80037c6:	4013      	ands	r3, r2
 80037c8:	d009      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ca:	4b35      	ldr	r3, [pc, #212]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ce:	2203      	movs	r2, #3
 80037d0:	4393      	bics	r3, r2
 80037d2:	0019      	movs	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	4b31      	ldr	r3, [pc, #196]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037da:	430a      	orrs	r2, r1
 80037dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2202      	movs	r2, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	d009      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e8:	4b2d      	ldr	r3, [pc, #180]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ec:	220c      	movs	r2, #12
 80037ee:	4393      	bics	r3, r2
 80037f0:	0019      	movs	r1, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	4b2a      	ldr	r3, [pc, #168]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80037f8:	430a      	orrs	r2, r1
 80037fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2204      	movs	r2, #4
 8003802:	4013      	ands	r3, r2
 8003804:	d009      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003806:	4b26      	ldr	r3, [pc, #152]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380a:	4a2c      	ldr	r2, [pc, #176]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	4b22      	ldr	r3, [pc, #136]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003816:	430a      	orrs	r2, r1
 8003818:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2208      	movs	r2, #8
 8003820:	4013      	ands	r3, r2
 8003822:	d009      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003824:	4b1e      	ldr	r3, [pc, #120]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003828:	4a25      	ldr	r2, [pc, #148]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800382a:	4013      	ands	r3, r2
 800382c:	0019      	movs	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	4b1b      	ldr	r3, [pc, #108]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003834:	430a      	orrs	r2, r1
 8003836:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	2380      	movs	r3, #128	@ 0x80
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4013      	ands	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003844:	4b16      	ldr	r3, [pc, #88]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003848:	4a17      	ldr	r2, [pc, #92]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800384a:	4013      	ands	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	4b13      	ldr	r3, [pc, #76]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003854:	430a      	orrs	r2, r1
 8003856:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2240      	movs	r2, #64	@ 0x40
 800385e:	4013      	ands	r3, r2
 8003860:	d009      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003862:	4b0f      	ldr	r3, [pc, #60]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	4a17      	ldr	r2, [pc, #92]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003868:	4013      	ands	r3, r2
 800386a:	0019      	movs	r1, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1a      	ldr	r2, [r3, #32]
 8003870:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003872:	430a      	orrs	r2, r1
 8003874:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2280      	movs	r2, #128	@ 0x80
 800387c:	4013      	ands	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003880:	4b07      	ldr	r3, [pc, #28]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003882:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003884:	4a10      	ldr	r2, [pc, #64]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003886:	4013      	ands	r3, r2
 8003888:	0019      	movs	r1, r3
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	4b04      	ldr	r3, [pc, #16]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8003890:	430a      	orrs	r2, r1
 8003892:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b006      	add	sp, #24
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40007000 	.word	0x40007000
 80038a8:	fffcffff 	.word	0xfffcffff
 80038ac:	fff7ffff 	.word	0xfff7ffff
 80038b0:	00001388 	.word	0x00001388
 80038b4:	ffcfffff 	.word	0xffcfffff
 80038b8:	efffffff 	.word	0xefffffff
 80038bc:	fffff3ff 	.word	0xfffff3ff
 80038c0:	ffffcfff 	.word	0xffffcfff
 80038c4:	fbffffff 	.word	0xfbffffff
 80038c8:	fff3ffff 	.word	0xfff3ffff

080038cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038cc:	b5b0      	push	{r4, r5, r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038d4:	230f      	movs	r3, #15
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e088      	b.n	80039f8 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2221      	movs	r2, #33	@ 0x21
 80038ea:	5c9b      	ldrb	r3, [r3, r2]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d107      	bne.n	8003902 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2220      	movs	r2, #32
 80038f6:	2100      	movs	r1, #0
 80038f8:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7fe fb03 	bl	8001f08 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2221      	movs	r2, #33	@ 0x21
 8003906:	2102      	movs	r1, #2
 8003908:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	2210      	movs	r2, #16
 8003912:	4013      	ands	r3, r2
 8003914:	2b10      	cmp	r3, #16
 8003916:	d05f      	beq.n	80039d8 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	22ca      	movs	r2, #202	@ 0xca
 800391e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2253      	movs	r2, #83	@ 0x53
 8003926:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003928:	250f      	movs	r5, #15
 800392a:	197c      	adds	r4, r7, r5
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	0018      	movs	r0, r3
 8003930:	f000 fb86 	bl	8004040 <RTC_EnterInitMode>
 8003934:	0003      	movs	r3, r0
 8003936:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003938:	0028      	movs	r0, r5
 800393a:	183b      	adds	r3, r7, r0
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d12c      	bne.n	800399c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	492c      	ldr	r1, [pc, #176]	@ (8003a00 <HAL_RTC_Init+0x134>)
 800394e:	400a      	ands	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6899      	ldr	r1, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68d2      	ldr	r2, [r2, #12]
 8003978:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6919      	ldr	r1, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	041a      	lsls	r2, r3, #16
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800398e:	183c      	adds	r4, r7, r0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0018      	movs	r0, r3
 8003994:	f000 fb98 	bl	80040c8 <RTC_ExitInitMode>
 8003998:	0003      	movs	r3, r0
 800399a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800399c:	230f      	movs	r3, #15
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d113      	bne.n	80039ce <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2103      	movs	r1, #3
 80039b2:	438a      	bics	r2, r1
 80039b4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69da      	ldr	r2, [r3, #28]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	22ff      	movs	r2, #255	@ 0xff
 80039d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80039d6:	e003      	b.n	80039e0 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80039d8:	230f      	movs	r3, #15
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80039e0:	230f      	movs	r3, #15
 80039e2:	18fb      	adds	r3, r7, r3
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2221      	movs	r2, #33	@ 0x21
 80039ee:	2101      	movs	r1, #1
 80039f0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80039f2:	230f      	movs	r3, #15
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	781b      	ldrb	r3, [r3, #0]
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b004      	add	sp, #16
 80039fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003a00:	ff8fffbf 	.word	0xff8fffbf

08003a04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a04:	b5b0      	push	{r4, r5, r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2220      	movs	r2, #32
 8003a18:	5c9b      	ldrb	r3, [r3, r2]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_RTC_SetTime+0x1e>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e092      	b.n	8003b48 <HAL_RTC_SetTime+0x144>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	2101      	movs	r1, #1
 8003a28:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2221      	movs	r2, #33	@ 0x21
 8003a2e:	2102      	movs	r1, #2
 8003a30:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d125      	bne.n	8003a84 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	2240      	movs	r2, #64	@ 0x40
 8003a40:	4013      	ands	r3, r2
 8003a42:	d102      	bne.n	8003a4a <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2200      	movs	r2, #0
 8003a48:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 fb64 	bl	800411c <RTC_ByteToBcd2>
 8003a54:	0003      	movs	r3, r0
 8003a56:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	785b      	ldrb	r3, [r3, #1]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 fb5d 	bl	800411c <RTC_ByteToBcd2>
 8003a62:	0003      	movs	r3, r0
 8003a64:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a66:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	789b      	ldrb	r3, [r3, #2]
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f000 fb55 	bl	800411c <RTC_ByteToBcd2>
 8003a72:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a74:	0022      	movs	r2, r4
 8003a76:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	78db      	ldrb	r3, [r3, #3]
 8003a7c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	e017      	b.n	8003ab4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	2240      	movs	r2, #64	@ 0x40
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d102      	bne.n	8003a96 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2200      	movs	r2, #0
 8003a94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	785b      	ldrb	r3, [r3, #1]
 8003aa0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003aa2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003aa8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	78db      	ldrb	r3, [r3, #3]
 8003aae:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	22ca      	movs	r2, #202	@ 0xca
 8003aba:	625a      	str	r2, [r3, #36]	@ 0x24
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2253      	movs	r2, #83	@ 0x53
 8003ac2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ac4:	2513      	movs	r5, #19
 8003ac6:	197c      	adds	r4, r7, r5
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 fab8 	bl	8004040 <RTC_EnterInitMode>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003ad4:	0028      	movs	r0, r5
 8003ad6:	183b      	adds	r3, r7, r0
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d120      	bne.n	8003b20 <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	491a      	ldr	r1, [pc, #104]	@ (8003b50 <HAL_RTC_SetTime+0x14c>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4917      	ldr	r1, [pc, #92]	@ (8003b54 <HAL_RTC_SetTime+0x150>)
 8003af6:	400a      	ands	r2, r1
 8003af8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6899      	ldr	r1, [r3, #8]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b12:	183c      	adds	r4, r7, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 fad6 	bl	80040c8 <RTC_ExitInitMode>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003b20:	2313      	movs	r3, #19
 8003b22:	18fb      	adds	r3, r7, r3
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2221      	movs	r2, #33	@ 0x21
 8003b2e:	2101      	movs	r1, #1
 8003b30:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	22ff      	movs	r2, #255	@ 0xff
 8003b38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	2100      	movs	r1, #0
 8003b40:	5499      	strb	r1, [r3, r2]

  return status;
 8003b42:	2313      	movs	r3, #19
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	781b      	ldrb	r3, [r3, #0]
}
 8003b48:	0018      	movs	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	b006      	add	sp, #24
 8003b4e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b50:	007f7f7f 	.word	0x007f7f7f
 8003b54:	fffbffff 	.word	0xfffbffff

08003b58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b58:	b5b0      	push	{r4, r5, r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	5c9b      	ldrb	r3, [r3, r2]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_RTC_SetDate+0x1e>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e07e      	b.n	8003c74 <HAL_RTC_SetDate+0x11c>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2221      	movs	r2, #33	@ 0x21
 8003b82:	2102      	movs	r1, #2
 8003b84:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10e      	bne.n	8003baa <HAL_RTC_SetDate+0x52>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	001a      	movs	r2, r3
 8003b92:	2310      	movs	r3, #16
 8003b94:	4013      	ands	r3, r2
 8003b96:	d008      	beq.n	8003baa <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2210      	movs	r2, #16
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	330a      	adds	r3, #10
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11c      	bne.n	8003bea <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	78db      	ldrb	r3, [r3, #3]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f000 fab1 	bl	800411c <RTC_ByteToBcd2>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	785b      	ldrb	r3, [r3, #1]
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f000 faaa 	bl	800411c <RTC_ByteToBcd2>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bcc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	789b      	ldrb	r3, [r3, #2]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 faa2 	bl	800411c <RTC_ByteToBcd2>
 8003bd8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bda:	0022      	movs	r2, r4
 8003bdc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e00e      	b.n	8003c08 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	78db      	ldrb	r3, [r3, #3]
 8003bee:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bf6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003bfc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	22ca      	movs	r2, #202	@ 0xca
 8003c0e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2253      	movs	r2, #83	@ 0x53
 8003c16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c18:	2513      	movs	r5, #19
 8003c1a:	197c      	adds	r4, r7, r5
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 fa0e 	bl	8004040 <RTC_EnterInitMode>
 8003c24:	0003      	movs	r3, r0
 8003c26:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8003c28:	0028      	movs	r0, r5
 8003c2a:	183b      	adds	r3, r7, r0
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10c      	bne.n	8003c4c <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4910      	ldr	r1, [pc, #64]	@ (8003c7c <HAL_RTC_SetDate+0x124>)
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c3e:	183c      	adds	r4, r7, r0
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	0018      	movs	r0, r3
 8003c44:	f000 fa40 	bl	80040c8 <RTC_ExitInitMode>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8003c4c:	2313      	movs	r3, #19
 8003c4e:	18fb      	adds	r3, r7, r3
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d103      	bne.n	8003c5e <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2221      	movs	r2, #33	@ 0x21
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	22ff      	movs	r2, #255	@ 0xff
 8003c64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5499      	strb	r1, [r3, r2]

  return status;
 8003c6e:	2313      	movs	r3, #19
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	781b      	ldrb	r3, [r3, #0]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b006      	add	sp, #24
 8003c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c7c:	00ffff3f 	.word	0x00ffff3f

08003c80 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003c80:	b590      	push	{r4, r7, lr}
 8003c82:	b089      	sub	sp, #36	@ 0x24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003c8c:	4ba7      	ldr	r3, [pc, #668]	@ (8003f2c <HAL_RTC_SetAlarm_IT+0x2ac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	22fa      	movs	r2, #250	@ 0xfa
 8003c92:	01d1      	lsls	r1, r2, #7
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7fc fa41 	bl	800011c <__udivsi3>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	001a      	movs	r2, r3
 8003c9e:	0013      	movs	r3, r2
 8003ca0:	015b      	lsls	r3, r3, #5
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	189b      	adds	r3, r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	5c9b      	ldrb	r3, [r3, r2]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RTC_SetAlarm_IT+0x42>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e130      	b.n	8003f24 <HAL_RTC_SetAlarm_IT+0x2a4>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	5499      	strb	r1, [r3, r2]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2221      	movs	r2, #33	@ 0x21
 8003cce:	2102      	movs	r1, #2
 8003cd0:	5499      	strb	r1, [r3, r2]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d136      	bne.n	8003d46 <HAL_RTC_SetAlarm_IT+0xc6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2240      	movs	r2, #64	@ 0x40
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d102      	bne.n	8003cea <HAL_RTC_SetAlarm_IT+0x6a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f000 fa14 	bl	800411c <RTC_ByteToBcd2>
 8003cf4:	0003      	movs	r3, r0
 8003cf6:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	0018      	movs	r0, r3
 8003cfe:	f000 fa0d 	bl	800411c <RTC_ByteToBcd2>
 8003d02:	0003      	movs	r3, r0
 8003d04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003d06:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	789b      	ldrb	r3, [r3, #2]
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	f000 fa05 	bl	800411c <RTC_ByteToBcd2>
 8003d12:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d14:	0022      	movs	r2, r4
 8003d16:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	78db      	ldrb	r3, [r3, #3]
 8003d1c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8003d1e:	431a      	orrs	r2, r3
 8003d20:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2220      	movs	r2, #32
 8003d26:	5c9b      	ldrb	r3, [r3, r2]
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f000 f9f7 	bl	800411c <RTC_ByteToBcd2>
 8003d2e:	0003      	movs	r3, r0
 8003d30:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8003d32:	0022      	movs	r2, r4
 8003d34:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8003d3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61fb      	str	r3, [r7, #28]
 8003d44:	e022      	b.n	8003d8c <HAL_RTC_SetAlarm_IT+0x10c>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2240      	movs	r2, #64	@ 0x40
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d102      	bne.n	8003d58 <HAL_RTC_SetAlarm_IT+0xd8>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2200      	movs	r2, #0
 8003d56:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	785b      	ldrb	r3, [r3, #1]
 8003d62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003d64:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8003d6a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	78db      	ldrb	r3, [r3, #3]
 8003d70:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8003d72:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	2120      	movs	r1, #32
 8003d78:	5c5b      	ldrb	r3, [r3, r1]
 8003d7a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8003d7c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8003d82:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	22ca      	movs	r2, #202	@ 0xca
 8003d9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2253      	movs	r2, #83	@ 0x53
 8003da6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d146      	bne.n	8003e42 <HAL_RTC_SetAlarm_IT+0x1c2>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	689a      	ldr	r2, [r3, #8]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	495c      	ldr	r1, [pc, #368]	@ (8003f30 <HAL_RTC_SetAlarm_IT+0x2b0>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	22ff      	movs	r2, #255	@ 0xff
 8003dcc:	401a      	ands	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4958      	ldr	r1, [pc, #352]	@ (8003f34 <HAL_RTC_SetAlarm_IT+0x2b4>)
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10d      	bne.n	8003e00 <HAL_RTC_SetAlarm_IT+0x180>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	22ff      	movs	r2, #255	@ 0xff
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2221      	movs	r2, #33	@ 0x21
 8003df0:	2103      	movs	r1, #3
 8003df2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	2100      	movs	r1, #0
 8003dfa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e091      	b.n	8003f24 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d0e5      	beq.n	8003dd8 <HAL_RTC_SetAlarm_IT+0x158>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2180      	movs	r1, #128	@ 0x80
 8003e28:	0049      	lsls	r1, r1, #1
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2180      	movs	r1, #128	@ 0x80
 8003e3a:	0149      	lsls	r1, r1, #5
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	e055      	b.n	8003eee <HAL_RTC_SetAlarm_IT+0x26e>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689a      	ldr	r2, [r3, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	493a      	ldr	r1, [pc, #232]	@ (8003f38 <HAL_RTC_SetAlarm_IT+0x2b8>)
 8003e4e:	400a      	ands	r2, r1
 8003e50:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	22ff      	movs	r2, #255	@ 0xff
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4936      	ldr	r1, [pc, #216]	@ (8003f3c <HAL_RTC_SetAlarm_IT+0x2bc>)
 8003e62:	430a      	orrs	r2, r1
 8003e64:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003e66:	4b31      	ldr	r3, [pc, #196]	@ (8003f2c <HAL_RTC_SetAlarm_IT+0x2ac>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	22fa      	movs	r2, #250	@ 0xfa
 8003e6c:	01d1      	lsls	r1, r2, #7
 8003e6e:	0018      	movs	r0, r3
 8003e70:	f7fc f954 	bl	800011c <__udivsi3>
 8003e74:	0003      	movs	r3, r0
 8003e76:	001a      	movs	r2, r3
 8003e78:	0013      	movs	r3, r2
 8003e7a:	015b      	lsls	r3, r3, #5
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	189b      	adds	r3, r3, r2
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10d      	bne.n	8003eae <HAL_RTC_SetAlarm_IT+0x22e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	22ff      	movs	r2, #255	@ 0xff
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2221      	movs	r2, #33	@ 0x21
 8003e9e:	2103      	movs	r1, #3
 8003ea0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e03a      	b.n	8003f24 <HAL_RTC_SetAlarm_IT+0x2a4>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d0e5      	beq.n	8003e86 <HAL_RTC_SetAlarm_IT+0x206>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69fa      	ldr	r2, [r7, #28]
 8003ec0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2180      	movs	r1, #128	@ 0x80
 8003ed6:	0089      	lsls	r1, r1, #2
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2180      	movs	r1, #128	@ 0x80
 8003ee8:	0189      	lsls	r1, r1, #6
 8003eea:	430a      	orrs	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003eee:	4b14      	ldr	r3, [pc, #80]	@ (8003f40 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003ef4:	2180      	movs	r1, #128	@ 0x80
 8003ef6:	0289      	lsls	r1, r1, #10
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003efc:	4b10      	ldr	r3, [pc, #64]	@ (8003f40 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	4b0f      	ldr	r3, [pc, #60]	@ (8003f40 <HAL_RTC_SetAlarm_IT+0x2c0>)
 8003f02:	2180      	movs	r1, #128	@ 0x80
 8003f04:	0289      	lsls	r1, r1, #10
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	22ff      	movs	r2, #255	@ 0xff
 8003f10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2221      	movs	r2, #33	@ 0x21
 8003f16:	2101      	movs	r1, #1
 8003f18:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	2100      	movs	r1, #0
 8003f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	0018      	movs	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	b009      	add	sp, #36	@ 0x24
 8003f2a:	bd90      	pop	{r4, r7, pc}
 8003f2c:	20000000 	.word	0x20000000
 8003f30:	fffffeff 	.word	0xfffffeff
 8003f34:	fffffe7f 	.word	0xfffffe7f
 8003f38:	fffffdff 	.word	0xfffffdff
 8003f3c:	fffffd7f 	.word	0xfffffd7f
 8003f40:	40010400 	.word	0x40010400

08003f44 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003f4c:	4b21      	ldr	r3, [pc, #132]	@ (8003fd4 <HAL_RTC_AlarmIRQHandler+0x90>)
 8003f4e:	2280      	movs	r2, #128	@ 0x80
 8003f50:	0292      	lsls	r2, r2, #10
 8003f52:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	2380      	movs	r3, #128	@ 0x80
 8003f5c:	015b      	lsls	r3, r3, #5
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d014      	beq.n	8003f8c <HAL_RTC_AlarmIRQHandler+0x48>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	2380      	movs	r3, #128	@ 0x80
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d00d      	beq.n	8003f8c <HAL_RTC_AlarmIRQHandler+0x48>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	22ff      	movs	r2, #255	@ 0xff
 8003f78:	401a      	ands	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4916      	ldr	r1, [pc, #88]	@ (8003fd8 <HAL_RTC_AlarmIRQHandler+0x94>)
 8003f80:	430a      	orrs	r2, r1
 8003f82:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 f82a 	bl	8003fe0 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	2380      	movs	r3, #128	@ 0x80
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	4013      	ands	r3, r2
 8003f98:	d014      	beq.n	8003fc4 <HAL_RTC_AlarmIRQHandler+0x80>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68da      	ldr	r2, [r3, #12]
 8003fa0:	2380      	movs	r3, #128	@ 0x80
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d00d      	beq.n	8003fc4 <HAL_RTC_AlarmIRQHandler+0x80>
    {
      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	22ff      	movs	r2, #255	@ 0xff
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4909      	ldr	r1, [pc, #36]	@ (8003fdc <HAL_RTC_AlarmIRQHandler+0x98>)
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	60da      	str	r2, [r3, #12]

      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 f8cd 	bl	800415e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2221      	movs	r2, #33	@ 0x21
 8003fc8:	2101      	movs	r1, #1
 8003fca:	5499      	strb	r1, [r3, r2]
}
 8003fcc:	46c0      	nop			@ (mov r8, r8)
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b002      	add	sp, #8
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40010400 	.word	0x40010400
 8003fd8:	fffffe7f 	.word	0xfffffe7f
 8003fdc:	fffffd7f 	.word	0xfffffd7f

08003fe0 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8003fe8:	46c0      	nop			@ (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	b002      	add	sp, #8
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0e      	ldr	r2, [pc, #56]	@ (800403c <HAL_RTC_WaitForSynchro+0x4c>)
 8004002:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004004:	f7fe f99c 	bl	8002340 <HAL_GetTick>
 8004008:	0003      	movs	r3, r0
 800400a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800400c:	e00a      	b.n	8004024 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800400e:	f7fe f997 	bl	8002340 <HAL_GetTick>
 8004012:	0002      	movs	r2, r0
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	23fa      	movs	r3, #250	@ 0xfa
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	429a      	cmp	r2, r3
 800401e:	d901      	bls.n	8004024 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e006      	b.n	8004032 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	4013      	ands	r3, r2
 800402e:	d0ee      	beq.n	800400e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	0001ff5f 	.word	0x0001ff5f

08004040 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800404c:	230f      	movs	r3, #15
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	2240      	movs	r2, #64	@ 0x40
 800405c:	4013      	ands	r3, r2
 800405e:	d12c      	bne.n	80040ba <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2180      	movs	r1, #128	@ 0x80
 800406c:	430a      	orrs	r2, r1
 800406e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004070:	f7fe f966 	bl	8002340 <HAL_GetTick>
 8004074:	0003      	movs	r3, r0
 8004076:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004078:	e014      	b.n	80040a4 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800407a:	f7fe f961 	bl	8002340 <HAL_GetTick>
 800407e:	0002      	movs	r2, r0
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	1ad2      	subs	r2, r2, r3
 8004084:	200f      	movs	r0, #15
 8004086:	183b      	adds	r3, r7, r0
 8004088:	1839      	adds	r1, r7, r0
 800408a:	7809      	ldrb	r1, [r1, #0]
 800408c:	7019      	strb	r1, [r3, #0]
 800408e:	23fa      	movs	r3, #250	@ 0xfa
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	429a      	cmp	r2, r3
 8004094:	d906      	bls.n	80040a4 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2221      	movs	r2, #33	@ 0x21
 800409a:	2104      	movs	r1, #4
 800409c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800409e:	183b      	adds	r3, r7, r0
 80040a0:	2201      	movs	r2, #1
 80040a2:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2240      	movs	r2, #64	@ 0x40
 80040ac:	4013      	ands	r3, r2
 80040ae:	d104      	bne.n	80040ba <RTC_EnterInitMode+0x7a>
 80040b0:	230f      	movs	r3, #15
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d1df      	bne.n	800407a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80040ba:	230f      	movs	r3, #15
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	781b      	ldrb	r3, [r3, #0]
}
 80040c0:	0018      	movs	r0, r3
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b004      	add	sp, #16
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d0:	240f      	movs	r4, #15
 80040d2:	193b      	adds	r3, r7, r4
 80040d4:	2200      	movs	r2, #0
 80040d6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2180      	movs	r1, #128	@ 0x80
 80040e4:	438a      	bics	r2, r1
 80040e6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2220      	movs	r2, #32
 80040f0:	4013      	ands	r3, r2
 80040f2:	d10c      	bne.n	800410e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f7ff ff7a 	bl	8003ff0 <HAL_RTC_WaitForSynchro>
 80040fc:	1e03      	subs	r3, r0, #0
 80040fe:	d006      	beq.n	800410e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2221      	movs	r2, #33	@ 0x21
 8004104:	2104      	movs	r1, #4
 8004106:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004108:	193b      	adds	r3, r7, r4
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800410e:	230f      	movs	r3, #15
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	781b      	ldrb	r3, [r3, #0]
}
 8004114:	0018      	movs	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	b005      	add	sp, #20
 800411a:	bd90      	pop	{r4, r7, pc}

0800411c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	0002      	movs	r2, r0
 8004124:	1dfb      	adds	r3, r7, #7
 8004126:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800412c:	e007      	b.n	800413e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3301      	adds	r3, #1
 8004132:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004134:	1dfb      	adds	r3, r7, #7
 8004136:	1dfa      	adds	r2, r7, #7
 8004138:	7812      	ldrb	r2, [r2, #0]
 800413a:	3a0a      	subs	r2, #10
 800413c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800413e:	1dfb      	adds	r3, r7, #7
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b09      	cmp	r3, #9
 8004144:	d8f3      	bhi.n	800412e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	b2da      	uxtb	r2, r3
 800414e:	1dfb      	adds	r3, r7, #7
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	4313      	orrs	r3, r2
 8004154:	b2db      	uxtb	r3, r3
}
 8004156:	0018      	movs	r0, r3
 8004158:	46bd      	mov	sp, r7
 800415a:	b004      	add	sp, #16
 800415c:	bd80      	pop	{r7, pc}

0800415e <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004166:	46c0      	nop			@ (mov r8, r8)
 8004168:	46bd      	mov	sp, r7
 800416a:	b002      	add	sp, #8
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e032      	b.n	80041e6 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2239      	movs	r2, #57	@ 0x39
 8004184:	5c9b      	ldrb	r3, [r3, r2]
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2238      	movs	r2, #56	@ 0x38
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	0018      	movs	r0, r3
 8004198:	f7fd fed6 	bl	8001f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2239      	movs	r2, #57	@ 0x39
 80041a0:	2102      	movs	r1, #2
 80041a2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	0019      	movs	r1, r3
 80041ae:	0010      	movs	r0, r2
 80041b0:	f000 fb38 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	223e      	movs	r2, #62	@ 0x3e
 80041b8:	2101      	movs	r1, #1
 80041ba:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	223a      	movs	r2, #58	@ 0x3a
 80041c0:	2101      	movs	r1, #1
 80041c2:	5499      	strb	r1, [r3, r2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	223b      	movs	r2, #59	@ 0x3b
 80041c8:	2101      	movs	r1, #1
 80041ca:	5499      	strb	r1, [r3, r2]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	223c      	movs	r2, #60	@ 0x3c
 80041d0:	2101      	movs	r1, #1
 80041d2:	5499      	strb	r1, [r3, r2]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	223d      	movs	r2, #61	@ 0x3d
 80041d8:	2101      	movs	r1, #1
 80041da:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2239      	movs	r2, #57	@ 0x39
 80041e0:	2101      	movs	r1, #1
 80041e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	0018      	movs	r0, r3
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b002      	add	sp, #8
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2239      	movs	r2, #57	@ 0x39
 80041fc:	5c9b      	ldrb	r3, [r3, r2]
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b01      	cmp	r3, #1
 8004202:	d001      	beq.n	8004208 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e033      	b.n	8004270 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2239      	movs	r2, #57	@ 0x39
 800420c:	2102      	movs	r1, #2
 800420e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2380      	movs	r3, #128	@ 0x80
 8004216:	05db      	lsls	r3, r3, #23
 8004218:	429a      	cmp	r2, r3
 800421a:	d00e      	beq.n	800423a <HAL_TIM_Base_Start+0x4a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a15      	ldr	r2, [pc, #84]	@ (8004278 <HAL_TIM_Base_Start+0x88>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d009      	beq.n	800423a <HAL_TIM_Base_Start+0x4a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a14      	ldr	r2, [pc, #80]	@ (800427c <HAL_TIM_Base_Start+0x8c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d004      	beq.n	800423a <HAL_TIM_Base_Start+0x4a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a12      	ldr	r2, [pc, #72]	@ (8004280 <HAL_TIM_Base_Start+0x90>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d111      	bne.n	800425e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2207      	movs	r2, #7
 8004242:	4013      	ands	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b06      	cmp	r3, #6
 800424a:	d010      	beq.n	800426e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2101      	movs	r1, #1
 8004258:	430a      	orrs	r2, r1
 800425a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800425c:	e007      	b.n	800426e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2101      	movs	r1, #1
 800426a:	430a      	orrs	r2, r1
 800426c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	0018      	movs	r0, r3
 8004272:	46bd      	mov	sp, r7
 8004274:	b004      	add	sp, #16
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40000400 	.word	0x40000400
 800427c:	40010800 	.word	0x40010800
 8004280:	40011400 	.word	0x40011400

08004284 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e032      	b.n	80042fc <HAL_TIM_IC_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2239      	movs	r2, #57	@ 0x39
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d107      	bne.n	80042b2 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2238      	movs	r2, #56	@ 0x38
 80042a6:	2100      	movs	r1, #0
 80042a8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 f829 	bl	8004304 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2239      	movs	r2, #57	@ 0x39
 80042b6:	2102      	movs	r1, #2
 80042b8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	3304      	adds	r3, #4
 80042c2:	0019      	movs	r1, r3
 80042c4:	0010      	movs	r0, r2
 80042c6:	f000 faad 	bl	8004824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	223e      	movs	r2, #62	@ 0x3e
 80042ce:	2101      	movs	r1, #1
 80042d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	223a      	movs	r2, #58	@ 0x3a
 80042d6:	2101      	movs	r1, #1
 80042d8:	5499      	strb	r1, [r3, r2]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	223b      	movs	r2, #59	@ 0x3b
 80042de:	2101      	movs	r1, #1
 80042e0:	5499      	strb	r1, [r3, r2]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	223c      	movs	r2, #60	@ 0x3c
 80042e6:	2101      	movs	r1, #1
 80042e8:	5499      	strb	r1, [r3, r2]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	223d      	movs	r2, #61	@ 0x3d
 80042ee:	2101      	movs	r1, #1
 80042f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2239      	movs	r2, #57	@ 0x39
 80042f6:	2101      	movs	r1, #1
 80042f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	0018      	movs	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	b002      	add	sp, #8
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800430c:	46c0      	nop			@ (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	b002      	add	sp, #8
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2202      	movs	r2, #2
 8004324:	4013      	ands	r3, r2
 8004326:	2b02      	cmp	r3, #2
 8004328:	d124      	bne.n	8004374 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2202      	movs	r2, #2
 8004332:	4013      	ands	r3, r2
 8004334:	2b02      	cmp	r3, #2
 8004336:	d11d      	bne.n	8004374 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2203      	movs	r2, #3
 800433e:	4252      	negs	r2, r2
 8004340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2203      	movs	r2, #3
 8004350:	4013      	ands	r3, r2
 8004352:	d004      	beq.n	800435e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	0018      	movs	r0, r3
 8004358:	f000 fa4c 	bl	80047f4 <HAL_TIM_IC_CaptureCallback>
 800435c:	e007      	b.n	800436e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 fa3f 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f000 fa4b 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2204      	movs	r2, #4
 800437c:	4013      	ands	r3, r2
 800437e:	2b04      	cmp	r3, #4
 8004380:	d125      	bne.n	80043ce <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2204      	movs	r2, #4
 800438a:	4013      	ands	r3, r2
 800438c:	2b04      	cmp	r3, #4
 800438e:	d11e      	bne.n	80043ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2205      	movs	r2, #5
 8004396:	4252      	negs	r2, r2
 8004398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2202      	movs	r2, #2
 800439e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	23c0      	movs	r3, #192	@ 0xc0
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4013      	ands	r3, r2
 80043ac:	d004      	beq.n	80043b8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0018      	movs	r0, r3
 80043b2:	f000 fa1f 	bl	80047f4 <HAL_TIM_IC_CaptureCallback>
 80043b6:	e007      	b.n	80043c8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f000 fa12 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	0018      	movs	r0, r3
 80043c4:	f000 fa1e 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2208      	movs	r2, #8
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d124      	bne.n	8004426 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2208      	movs	r2, #8
 80043e4:	4013      	ands	r3, r2
 80043e6:	2b08      	cmp	r3, #8
 80043e8:	d11d      	bne.n	8004426 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2209      	movs	r2, #9
 80043f0:	4252      	negs	r2, r2
 80043f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2204      	movs	r2, #4
 80043f8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	69db      	ldr	r3, [r3, #28]
 8004400:	2203      	movs	r2, #3
 8004402:	4013      	ands	r3, r2
 8004404:	d004      	beq.n	8004410 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	0018      	movs	r0, r3
 800440a:	f000 f9f3 	bl	80047f4 <HAL_TIM_IC_CaptureCallback>
 800440e:	e007      	b.n	8004420 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	0018      	movs	r0, r3
 8004414:	f000 f9e6 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	0018      	movs	r0, r3
 800441c:	f000 f9f2 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2210      	movs	r2, #16
 800442e:	4013      	ands	r3, r2
 8004430:	2b10      	cmp	r3, #16
 8004432:	d125      	bne.n	8004480 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	2210      	movs	r2, #16
 800443c:	4013      	ands	r3, r2
 800443e:	2b10      	cmp	r3, #16
 8004440:	d11e      	bne.n	8004480 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2211      	movs	r2, #17
 8004448:	4252      	negs	r2, r2
 800444a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2208      	movs	r2, #8
 8004450:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	23c0      	movs	r3, #192	@ 0xc0
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4013      	ands	r3, r2
 800445e:	d004      	beq.n	800446a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f9c6 	bl	80047f4 <HAL_TIM_IC_CaptureCallback>
 8004468:	e007      	b.n	800447a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 f9b9 	bl	80047e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	0018      	movs	r0, r3
 8004476:	f000 f9c5 	bl	8004804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2201      	movs	r2, #1
 8004488:	4013      	ands	r3, r2
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10f      	bne.n	80044ae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	4013      	ands	r3, r2
 8004498:	2b01      	cmp	r3, #1
 800449a:	d108      	bne.n	80044ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2202      	movs	r2, #2
 80044a2:	4252      	negs	r2, r2
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 f993 	bl	80047d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	2240      	movs	r2, #64	@ 0x40
 80044b6:	4013      	ands	r3, r2
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	d10f      	bne.n	80044dc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2240      	movs	r2, #64	@ 0x40
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b40      	cmp	r3, #64	@ 0x40
 80044c8:	d108      	bne.n	80044dc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2241      	movs	r2, #65	@ 0x41
 80044d0:	4252      	negs	r2, r2
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f000 f99c 	bl	8004814 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044dc:	46c0      	nop			@ (mov r8, r8)
 80044de:	46bd      	mov	sp, r7
 80044e0:	b002      	add	sp, #8
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044f0:	2317      	movs	r3, #23
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2238      	movs	r2, #56	@ 0x38
 80044fc:	5c9b      	ldrb	r3, [r3, r2]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_TIM_IC_ConfigChannel+0x22>
 8004502:	2302      	movs	r3, #2
 8004504:	e08c      	b.n	8004620 <HAL_TIM_IC_ConfigChannel+0x13c>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2238      	movs	r2, #56	@ 0x38
 800450a:	2101      	movs	r1, #1
 800450c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004524:	f000 f9dc 	bl	80048e0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	210c      	movs	r1, #12
 8004534:	438a      	bics	r2, r1
 8004536:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6999      	ldr	r1, [r3, #24]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	689a      	ldr	r2, [r3, #8]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	619a      	str	r2, [r3, #24]
 800454a:	e062      	b.n	8004612 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b04      	cmp	r3, #4
 8004550:	d11c      	bne.n	800458c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004562:	f000 fa47 	bl	80049f4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	492d      	ldr	r1, [pc, #180]	@ (8004628 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004572:	400a      	ands	r2, r1
 8004574:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6999      	ldr	r1, [r3, #24]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	021a      	lsls	r2, r3, #8
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	619a      	str	r2, [r3, #24]
 800458a:	e042      	b.n	8004612 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b08      	cmp	r3, #8
 8004590:	d11b      	bne.n	80045ca <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80045a2:	f000 fa9b 	bl	8004adc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	210c      	movs	r1, #12
 80045b2:	438a      	bics	r2, r1
 80045b4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	689a      	ldr	r2, [r3, #8]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
 80045c8:	e023      	b.n	8004612 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	d11c      	bne.n	800460a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80045e0:	f000 fabc 	bl	8004b5c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	69da      	ldr	r2, [r3, #28]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	490e      	ldr	r1, [pc, #56]	@ (8004628 <HAL_TIM_IC_ConfigChannel+0x144>)
 80045f0:	400a      	ands	r2, r1
 80045f2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69d9      	ldr	r1, [r3, #28]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	021a      	lsls	r2, r3, #8
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	61da      	str	r2, [r3, #28]
 8004608:	e003      	b.n	8004612 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800460a:	2317      	movs	r3, #23
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	2201      	movs	r2, #1
 8004610:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2238      	movs	r2, #56	@ 0x38
 8004616:	2100      	movs	r1, #0
 8004618:	5499      	strb	r1, [r3, r2]

  return status;
 800461a:	2317      	movs	r3, #23
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	781b      	ldrb	r3, [r3, #0]
}
 8004620:	0018      	movs	r0, r3
 8004622:	46bd      	mov	sp, r7
 8004624:	b006      	add	sp, #24
 8004626:	bd80      	pop	{r7, pc}
 8004628:	fffff3ff 	.word	0xfffff3ff

0800462c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004636:	230f      	movs	r3, #15
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	2200      	movs	r2, #0
 800463c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2238      	movs	r2, #56	@ 0x38
 8004642:	5c9b      	ldrb	r3, [r3, r2]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d101      	bne.n	800464c <HAL_TIM_ConfigClockSource+0x20>
 8004648:	2302      	movs	r3, #2
 800464a:	e0bc      	b.n	80047c6 <HAL_TIM_ConfigClockSource+0x19a>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2238      	movs	r2, #56	@ 0x38
 8004650:	2101      	movs	r1, #1
 8004652:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2239      	movs	r2, #57	@ 0x39
 8004658:	2102      	movs	r1, #2
 800465a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2277      	movs	r2, #119	@ 0x77
 8004668:	4393      	bics	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4a58      	ldr	r2, [pc, #352]	@ (80047d0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8004670:	4013      	ands	r3, r2
 8004672:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2280      	movs	r2, #128	@ 0x80
 8004682:	0192      	lsls	r2, r2, #6
 8004684:	4293      	cmp	r3, r2
 8004686:	d040      	beq.n	800470a <HAL_TIM_ConfigClockSource+0xde>
 8004688:	2280      	movs	r2, #128	@ 0x80
 800468a:	0192      	lsls	r2, r2, #6
 800468c:	4293      	cmp	r3, r2
 800468e:	d900      	bls.n	8004692 <HAL_TIM_ConfigClockSource+0x66>
 8004690:	e088      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x178>
 8004692:	2280      	movs	r2, #128	@ 0x80
 8004694:	0152      	lsls	r2, r2, #5
 8004696:	4293      	cmp	r3, r2
 8004698:	d100      	bne.n	800469c <HAL_TIM_ConfigClockSource+0x70>
 800469a:	e088      	b.n	80047ae <HAL_TIM_ConfigClockSource+0x182>
 800469c:	2280      	movs	r2, #128	@ 0x80
 800469e:	0152      	lsls	r2, r2, #5
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d900      	bls.n	80046a6 <HAL_TIM_ConfigClockSource+0x7a>
 80046a4:	e07e      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x178>
 80046a6:	2b70      	cmp	r3, #112	@ 0x70
 80046a8:	d018      	beq.n	80046dc <HAL_TIM_ConfigClockSource+0xb0>
 80046aa:	d900      	bls.n	80046ae <HAL_TIM_ConfigClockSource+0x82>
 80046ac:	e07a      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x178>
 80046ae:	2b60      	cmp	r3, #96	@ 0x60
 80046b0:	d04f      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x126>
 80046b2:	d900      	bls.n	80046b6 <HAL_TIM_ConfigClockSource+0x8a>
 80046b4:	e076      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x178>
 80046b6:	2b50      	cmp	r3, #80	@ 0x50
 80046b8:	d03b      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x106>
 80046ba:	d900      	bls.n	80046be <HAL_TIM_ConfigClockSource+0x92>
 80046bc:	e072      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x178>
 80046be:	2b40      	cmp	r3, #64	@ 0x40
 80046c0:	d057      	beq.n	8004772 <HAL_TIM_ConfigClockSource+0x146>
 80046c2:	d900      	bls.n	80046c6 <HAL_TIM_ConfigClockSource+0x9a>
 80046c4:	e06e      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x178>
 80046c6:	2b30      	cmp	r3, #48	@ 0x30
 80046c8:	d063      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x166>
 80046ca:	d86b      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x178>
 80046cc:	2b20      	cmp	r3, #32
 80046ce:	d060      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x166>
 80046d0:	d868      	bhi.n	80047a4 <HAL_TIM_ConfigClockSource+0x178>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d05d      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x166>
 80046d6:	2b10      	cmp	r3, #16
 80046d8:	d05b      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0x166>
 80046da:	e063      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046ec:	f000 fa96 	bl	8004c1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2277      	movs	r2, #119	@ 0x77
 80046fc:	4313      	orrs	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	609a      	str	r2, [r3, #8]
      break;
 8004708:	e052      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800471a:	f000 fa7f 	bl	8004c1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2180      	movs	r1, #128	@ 0x80
 800472a:	01c9      	lsls	r1, r1, #7
 800472c:	430a      	orrs	r2, r1
 800472e:	609a      	str	r2, [r3, #8]
      break;
 8004730:	e03e      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	001a      	movs	r2, r3
 8004740:	f000 f92a 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2150      	movs	r1, #80	@ 0x50
 800474a:	0018      	movs	r0, r3
 800474c:	f000 fa4c 	bl	8004be8 <TIM_ITRx_SetConfig>
      break;
 8004750:	e02e      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800475e:	001a      	movs	r2, r3
 8004760:	f000 f98a 	bl	8004a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2160      	movs	r1, #96	@ 0x60
 800476a:	0018      	movs	r0, r3
 800476c:	f000 fa3c 	bl	8004be8 <TIM_ITRx_SetConfig>
      break;
 8004770:	e01e      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800477e:	001a      	movs	r2, r3
 8004780:	f000 f90a 	bl	8004998 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2140      	movs	r1, #64	@ 0x40
 800478a:	0018      	movs	r0, r3
 800478c:	f000 fa2c 	bl	8004be8 <TIM_ITRx_SetConfig>
      break;
 8004790:	e00e      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	0019      	movs	r1, r3
 800479c:	0010      	movs	r0, r2
 800479e:	f000 fa23 	bl	8004be8 <TIM_ITRx_SetConfig>
      break;
 80047a2:	e005      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80047a4:	230f      	movs	r3, #15
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2201      	movs	r2, #1
 80047aa:	701a      	strb	r2, [r3, #0]
      break;
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80047ae:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2239      	movs	r2, #57	@ 0x39
 80047b4:	2101      	movs	r1, #1
 80047b6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2238      	movs	r2, #56	@ 0x38
 80047bc:	2100      	movs	r1, #0
 80047be:	5499      	strb	r1, [r3, r2]

  return status;
 80047c0:	230f      	movs	r3, #15
 80047c2:	18fb      	adds	r3, r7, r3
 80047c4:	781b      	ldrb	r3, [r3, #0]
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b004      	add	sp, #16
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	ffff00ff 	.word	0xffff00ff

080047d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047dc:	46c0      	nop			@ (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047ec:	46c0      	nop			@ (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b002      	add	sp, #8
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047fc:	46c0      	nop			@ (mov r8, r8)
 80047fe:	46bd      	mov	sp, r7
 8004800:	b002      	add	sp, #8
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800480c:	46c0      	nop			@ (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	b002      	add	sp, #8
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800481c:	46c0      	nop			@ (mov r8, r8)
 800481e:	46bd      	mov	sp, r7
 8004820:	b002      	add	sp, #8
 8004822:	bd80      	pop	{r7, pc}

08004824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	2380      	movs	r3, #128	@ 0x80
 8004838:	05db      	lsls	r3, r3, #23
 800483a:	429a      	cmp	r2, r3
 800483c:	d00b      	beq.n	8004856 <TIM_Base_SetConfig+0x32>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a23      	ldr	r2, [pc, #140]	@ (80048d0 <TIM_Base_SetConfig+0xac>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d007      	beq.n	8004856 <TIM_Base_SetConfig+0x32>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <TIM_Base_SetConfig+0xb0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <TIM_Base_SetConfig+0x32>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a21      	ldr	r2, [pc, #132]	@ (80048d8 <TIM_Base_SetConfig+0xb4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d108      	bne.n	8004868 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2270      	movs	r2, #112	@ 0x70
 800485a:	4393      	bics	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4313      	orrs	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	05db      	lsls	r3, r3, #23
 800486e:	429a      	cmp	r2, r3
 8004870:	d00b      	beq.n	800488a <TIM_Base_SetConfig+0x66>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a16      	ldr	r2, [pc, #88]	@ (80048d0 <TIM_Base_SetConfig+0xac>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d007      	beq.n	800488a <TIM_Base_SetConfig+0x66>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a15      	ldr	r2, [pc, #84]	@ (80048d4 <TIM_Base_SetConfig+0xb0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d003      	beq.n	800488a <TIM_Base_SetConfig+0x66>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a14      	ldr	r2, [pc, #80]	@ (80048d8 <TIM_Base_SetConfig+0xb4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d108      	bne.n	800489c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a13      	ldr	r2, [pc, #76]	@ (80048dc <TIM_Base_SetConfig+0xb8>)
 800488e:	4013      	ands	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4313      	orrs	r3, r2
 800489a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2280      	movs	r2, #128	@ 0x80
 80048a0:	4393      	bics	r3, r2
 80048a2:	001a      	movs	r2, r3
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	689a      	ldr	r2, [r3, #8]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	615a      	str	r2, [r3, #20]
}
 80048c8:	46c0      	nop			@ (mov r8, r8)
 80048ca:	46bd      	mov	sp, r7
 80048cc:	b004      	add	sp, #16
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40010800 	.word	0x40010800
 80048d8:	40011400 	.word	0x40011400
 80048dc:	fffffcff 	.word	0xfffffcff

080048e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	2201      	movs	r2, #1
 80048f4:	4393      	bics	r3, r2
 80048f6:	001a      	movs	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	2380      	movs	r3, #128	@ 0x80
 800490c:	05db      	lsls	r3, r3, #23
 800490e:	429a      	cmp	r2, r3
 8004910:	d00b      	beq.n	800492a <TIM_TI1_SetConfig+0x4a>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4a1d      	ldr	r2, [pc, #116]	@ (800498c <TIM_TI1_SetConfig+0xac>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d007      	beq.n	800492a <TIM_TI1_SetConfig+0x4a>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <TIM_TI1_SetConfig+0xb0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d003      	beq.n	800492a <TIM_TI1_SetConfig+0x4a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <TIM_TI1_SetConfig+0xb4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d101      	bne.n	800492e <TIM_TI1_SetConfig+0x4e>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <TIM_TI1_SetConfig+0x50>
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <TIM_TI1_SetConfig+0x66>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2203      	movs	r2, #3
 8004938:	4393      	bics	r3, r2
 800493a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
 8004944:	e003      	b.n	800494e <TIM_TI1_SetConfig+0x6e>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2201      	movs	r2, #1
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	22f0      	movs	r2, #240	@ 0xf0
 8004952:	4393      	bics	r3, r2
 8004954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	22ff      	movs	r2, #255	@ 0xff
 800495c:	4013      	ands	r3, r2
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	4313      	orrs	r3, r2
 8004962:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	220a      	movs	r2, #10
 8004968:	4393      	bics	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	220a      	movs	r2, #10
 8004970:	4013      	ands	r3, r2
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	46c0      	nop			@ (mov r8, r8)
 8004986:	46bd      	mov	sp, r7
 8004988:	b006      	add	sp, #24
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40000400 	.word	0x40000400
 8004990:	40010800 	.word	0x40010800
 8004994:	40011400 	.word	0x40011400

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	2201      	movs	r2, #1
 80049b0:	4393      	bics	r3, r2
 80049b2:	001a      	movs	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	22f0      	movs	r2, #240	@ 0xf0
 80049c2:	4393      	bics	r3, r2
 80049c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	220a      	movs	r2, #10
 80049d4:	4393      	bics	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	4313      	orrs	r3, r2
 80049de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	693a      	ldr	r2, [r7, #16]
 80049e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	46c0      	nop			@ (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b006      	add	sp, #24
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	2210      	movs	r2, #16
 8004a08:	4393      	bics	r3, r2
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4a14      	ldr	r2, [pc, #80]	@ (8004a70 <TIM_TI2_SetConfig+0x7c>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	4a10      	ldr	r2, [pc, #64]	@ (8004a74 <TIM_TI2_SetConfig+0x80>)
 8004a32:	4013      	ands	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	22a0      	movs	r2, #160	@ 0xa0
 8004a48:	4393      	bics	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	011b      	lsls	r3, r3, #4
 8004a50:	22a0      	movs	r2, #160	@ 0xa0
 8004a52:	4013      	ands	r3, r2
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	621a      	str	r2, [r3, #32]
}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b006      	add	sp, #24
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	46c0      	nop			@ (mov r8, r8)
 8004a70:	fffffcff 	.word	0xfffffcff
 8004a74:	ffff0fff 	.word	0xffff0fff

08004a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	2210      	movs	r2, #16
 8004a8a:	4393      	bics	r3, r2
 8004a8c:	001a      	movs	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8004ad8 <TIM_TI2_ConfigInputStage+0x60>)
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	031b      	lsls	r3, r3, #12
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	22a0      	movs	r2, #160	@ 0xa0
 8004ab4:	4393      	bics	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	621a      	str	r2, [r3, #32]
}
 8004ace:	46c0      	nop			@ (mov r8, r8)
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b006      	add	sp, #24
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			@ (mov r8, r8)
 8004ad8:	ffff0fff 	.word	0xffff0fff

08004adc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
 8004ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	4a19      	ldr	r2, [pc, #100]	@ (8004b54 <TIM_TI3_SetConfig+0x78>)
 8004af0:	401a      	ands	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	69db      	ldr	r3, [r3, #28]
 8004afa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2203      	movs	r2, #3
 8004b06:	4393      	bics	r3, r2
 8004b08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	22f0      	movs	r2, #240	@ 0xf0
 8004b16:	4393      	bics	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	22ff      	movs	r2, #255	@ 0xff
 8004b20:	4013      	ands	r3, r2
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8004b58 <TIM_TI3_SetConfig+0x7c>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	021a      	lsls	r2, r3, #8
 8004b34:	23a0      	movs	r3, #160	@ 0xa0
 8004b36:	011b      	lsls	r3, r3, #4
 8004b38:	4013      	ands	r3, r2
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	621a      	str	r2, [r3, #32]
}
 8004b4c:	46c0      	nop			@ (mov r8, r8)
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b006      	add	sp, #24
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	fffffeff 	.word	0xfffffeff
 8004b58:	fffff5ff 	.word	0xfffff5ff

08004b5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <TIM_TI4_SetConfig+0x7c>)
 8004b70:	401a      	ands	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	4a15      	ldr	r2, [pc, #84]	@ (8004bdc <TIM_TI4_SetConfig+0x80>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	4a12      	ldr	r2, [pc, #72]	@ (8004be0 <TIM_TI4_SetConfig+0x84>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	031b      	lsls	r3, r3, #12
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	0c1b      	lsrs	r3, r3, #16
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	4a0d      	ldr	r2, [pc, #52]	@ (8004be4 <TIM_TI4_SetConfig+0x88>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	031a      	lsls	r2, r3, #12
 8004bb6:	23a0      	movs	r3, #160	@ 0xa0
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	4013      	ands	r3, r2
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	46c0      	nop			@ (mov r8, r8)
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	b006      	add	sp, #24
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
 8004bd8:	ffffefff 	.word	0xffffefff
 8004bdc:	fffffcff 	.word	0xfffffcff
 8004be0:	ffff0fff 	.word	0xffff0fff
 8004be4:	ffff5fff 	.word	0xffff5fff

08004be8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2270      	movs	r2, #112	@ 0x70
 8004bfc:	4393      	bics	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	2207      	movs	r2, #7
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	609a      	str	r2, [r3, #8]
}
 8004c12:	46c0      	nop			@ (mov r8, r8)
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b004      	add	sp, #16
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	4a09      	ldr	r2, [pc, #36]	@ (8004c58 <TIM_ETR_SetConfig+0x3c>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	021a      	lsls	r2, r3, #8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	609a      	str	r2, [r3, #8]
}
 8004c50:	46c0      	nop			@ (mov r8, r8)
 8004c52:	46bd      	mov	sp, r7
 8004c54:	b006      	add	sp, #24
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	ffff00ff 	.word	0xffff00ff

08004c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2238      	movs	r2, #56	@ 0x38
 8004c6a:	5c9b      	ldrb	r3, [r3, r2]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d101      	bne.n	8004c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c70:	2302      	movs	r3, #2
 8004c72:	e047      	b.n	8004d04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2238      	movs	r2, #56	@ 0x38
 8004c78:	2101      	movs	r1, #1
 8004c7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2239      	movs	r2, #57	@ 0x39
 8004c80:	2102      	movs	r1, #2
 8004c82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2270      	movs	r2, #112	@ 0x70
 8004c98:	4393      	bics	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	2380      	movs	r3, #128	@ 0x80
 8004cb4:	05db      	lsls	r3, r3, #23
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d00e      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a13      	ldr	r2, [pc, #76]	@ (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d009      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a11      	ldr	r2, [pc, #68]	@ (8004d10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a10      	ldr	r2, [pc, #64]	@ (8004d14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d10c      	bne.n	8004cf2 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2280      	movs	r2, #128	@ 0x80
 8004cdc:	4393      	bics	r3, r2
 8004cde:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2239      	movs	r2, #57	@ 0x39
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2238      	movs	r2, #56	@ 0x38
 8004cfe:	2100      	movs	r1, #0
 8004d00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	0018      	movs	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b004      	add	sp, #16
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40000400 	.word	0x40000400
 8004d10:	40010800 	.word	0x40010800
 8004d14:	40011400 	.word	0x40011400

08004d18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e044      	b.n	8004db4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d107      	bne.n	8004d42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2278      	movs	r2, #120	@ 0x78
 8004d36:	2100      	movs	r1, #0
 8004d38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	f7fd f985 	bl	800204c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2224      	movs	r2, #36	@ 0x24
 8004d46:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2101      	movs	r1, #1
 8004d54:	438a      	bics	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f000 fcb4 	bl	80056c8 <UART_SetConfig>
 8004d60:	0003      	movs	r3, r0
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e024      	b.n	8004db4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	0018      	movs	r0, r3
 8004d76:	f000 ff45 	bl	8005c04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	490d      	ldr	r1, [pc, #52]	@ (8004dbc <HAL_UART_Init+0xa4>)
 8004d86:	400a      	ands	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	212a      	movs	r1, #42	@ 0x2a
 8004d96:	438a      	bics	r2, r1
 8004d98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2101      	movs	r1, #1
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	0018      	movs	r0, r3
 8004dae:	f000 ffdd 	bl	8005d6c <UART_CheckIdleState>
 8004db2:	0003      	movs	r3, r0
}
 8004db4:	0018      	movs	r0, r3
 8004db6:	46bd      	mov	sp, r7
 8004db8:	b002      	add	sp, #8
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	ffffb7ff 	.word	0xffffb7ff

08004dc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b08a      	sub	sp, #40	@ 0x28
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	1dbb      	adds	r3, r7, #6
 8004dce:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d000      	beq.n	8004dda <HAL_UART_Transmit+0x1a>
 8004dd8:	e08c      	b.n	8004ef4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d003      	beq.n	8004de8 <HAL_UART_Transmit+0x28>
 8004de0:	1dbb      	adds	r3, r7, #6
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e084      	b.n	8004ef6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	2380      	movs	r3, #128	@ 0x80
 8004df2:	015b      	lsls	r3, r3, #5
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d109      	bne.n	8004e0c <HAL_UART_Transmit+0x4c>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d105      	bne.n	8004e0c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2201      	movs	r2, #1
 8004e04:	4013      	ands	r3, r2
 8004e06:	d001      	beq.n	8004e0c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e074      	b.n	8004ef6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2284      	movs	r2, #132	@ 0x84
 8004e10:	2100      	movs	r1, #0
 8004e12:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2221      	movs	r2, #33	@ 0x21
 8004e18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1a:	f7fd fa91 	bl	8002340 <HAL_GetTick>
 8004e1e:	0003      	movs	r3, r0
 8004e20:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1dba      	adds	r2, r7, #6
 8004e26:	2150      	movs	r1, #80	@ 0x50
 8004e28:	8812      	ldrh	r2, [r2, #0]
 8004e2a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	1dba      	adds	r2, r7, #6
 8004e30:	2152      	movs	r1, #82	@ 0x52
 8004e32:	8812      	ldrh	r2, [r2, #0]
 8004e34:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	689a      	ldr	r2, [r3, #8]
 8004e3a:	2380      	movs	r3, #128	@ 0x80
 8004e3c:	015b      	lsls	r3, r3, #5
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d108      	bne.n	8004e54 <HAL_UART_Transmit+0x94>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d104      	bne.n	8004e54 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	61bb      	str	r3, [r7, #24]
 8004e52:	e003      	b.n	8004e5c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e5c:	e02f      	b.n	8004ebe <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	0013      	movs	r3, r2
 8004e68:	2200      	movs	r2, #0
 8004e6a:	2180      	movs	r1, #128	@ 0x80
 8004e6c:	f001 f826 	bl	8005ebc <UART_WaitOnFlagUntilTimeout>
 8004e70:	1e03      	subs	r3, r0, #0
 8004e72:	d004      	beq.n	8004e7e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2220      	movs	r2, #32
 8004e78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e03b      	b.n	8004ef6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10b      	bne.n	8004e9c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	001a      	movs	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	05d2      	lsls	r2, r2, #23
 8004e90:	0dd2      	lsrs	r2, r2, #23
 8004e92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	3302      	adds	r3, #2
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	e007      	b.n	8004eac <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	781a      	ldrb	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2252      	movs	r2, #82	@ 0x52
 8004eb0:	5a9b      	ldrh	r3, [r3, r2]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b299      	uxth	r1, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2252      	movs	r2, #82	@ 0x52
 8004ebc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2252      	movs	r2, #82	@ 0x52
 8004ec2:	5a9b      	ldrh	r3, [r3, r2]
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1c9      	bne.n	8004e5e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	68f8      	ldr	r0, [r7, #12]
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	0013      	movs	r3, r2
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2140      	movs	r1, #64	@ 0x40
 8004ed8:	f000 fff0 	bl	8005ebc <UART_WaitOnFlagUntilTimeout>
 8004edc:	1e03      	subs	r3, r0, #0
 8004ede:	d004      	beq.n	8004eea <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e005      	b.n	8004ef6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e000      	b.n	8004ef6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
  }
}
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b008      	add	sp, #32
 8004efc:	bd80      	pop	{r7, pc}
	...

08004f00 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	@ 0x28
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	603b      	str	r3, [r7, #0]
 8004f0c:	1dbb      	adds	r3, r7, #6
 8004f0e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2280      	movs	r2, #128	@ 0x80
 8004f14:	589b      	ldr	r3, [r3, r2]
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d000      	beq.n	8004f1c <HAL_UART_Receive+0x1c>
 8004f1a:	e0d0      	b.n	80050be <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_UART_Receive+0x2a>
 8004f22:	1dbb      	adds	r3, r7, #6
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e0c8      	b.n	80050c0 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	015b      	lsls	r3, r3, #5
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d109      	bne.n	8004f4e <HAL_UART_Receive+0x4e>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2201      	movs	r2, #1
 8004f46:	4013      	ands	r3, r2
 8004f48:	d001      	beq.n	8004f4e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0b8      	b.n	80050c0 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2284      	movs	r2, #132	@ 0x84
 8004f52:	2100      	movs	r1, #0
 8004f54:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2280      	movs	r2, #128	@ 0x80
 8004f5a:	2122      	movs	r1, #34	@ 0x22
 8004f5c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f64:	f7fd f9ec 	bl	8002340 <HAL_GetTick>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1dba      	adds	r2, r7, #6
 8004f70:	2158      	movs	r1, #88	@ 0x58
 8004f72:	8812      	ldrh	r2, [r2, #0]
 8004f74:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1dba      	adds	r2, r7, #6
 8004f7a:	215a      	movs	r1, #90	@ 0x5a
 8004f7c:	8812      	ldrh	r2, [r2, #0]
 8004f7e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	689a      	ldr	r2, [r3, #8]
 8004f84:	2380      	movs	r3, #128	@ 0x80
 8004f86:	015b      	lsls	r3, r3, #5
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d10d      	bne.n	8004fa8 <HAL_UART_Receive+0xa8>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <HAL_UART_Receive+0x9e>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	225c      	movs	r2, #92	@ 0x5c
 8004f98:	494b      	ldr	r1, [pc, #300]	@ (80050c8 <HAL_UART_Receive+0x1c8>)
 8004f9a:	5299      	strh	r1, [r3, r2]
 8004f9c:	e02e      	b.n	8004ffc <HAL_UART_Receive+0xfc>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	225c      	movs	r2, #92	@ 0x5c
 8004fa2:	21ff      	movs	r1, #255	@ 0xff
 8004fa4:	5299      	strh	r1, [r3, r2]
 8004fa6:	e029      	b.n	8004ffc <HAL_UART_Receive+0xfc>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10d      	bne.n	8004fcc <HAL_UART_Receive+0xcc>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d104      	bne.n	8004fc2 <HAL_UART_Receive+0xc2>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	225c      	movs	r2, #92	@ 0x5c
 8004fbc:	21ff      	movs	r1, #255	@ 0xff
 8004fbe:	5299      	strh	r1, [r3, r2]
 8004fc0:	e01c      	b.n	8004ffc <HAL_UART_Receive+0xfc>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	225c      	movs	r2, #92	@ 0x5c
 8004fc6:	217f      	movs	r1, #127	@ 0x7f
 8004fc8:	5299      	strh	r1, [r3, r2]
 8004fca:	e017      	b.n	8004ffc <HAL_UART_Receive+0xfc>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	2380      	movs	r3, #128	@ 0x80
 8004fd2:	055b      	lsls	r3, r3, #21
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_UART_Receive+0xf4>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <HAL_UART_Receive+0xea>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	225c      	movs	r2, #92	@ 0x5c
 8004fe4:	217f      	movs	r1, #127	@ 0x7f
 8004fe6:	5299      	strh	r1, [r3, r2]
 8004fe8:	e008      	b.n	8004ffc <HAL_UART_Receive+0xfc>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	225c      	movs	r2, #92	@ 0x5c
 8004fee:	213f      	movs	r1, #63	@ 0x3f
 8004ff0:	5299      	strh	r1, [r3, r2]
 8004ff2:	e003      	b.n	8004ffc <HAL_UART_Receive+0xfc>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	225c      	movs	r2, #92	@ 0x5c
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8004ffc:	2312      	movs	r3, #18
 8004ffe:	18fb      	adds	r3, r7, r3
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	215c      	movs	r1, #92	@ 0x5c
 8005004:	5a52      	ldrh	r2, [r2, r1]
 8005006:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	2380      	movs	r3, #128	@ 0x80
 800500e:	015b      	lsls	r3, r3, #5
 8005010:	429a      	cmp	r2, r3
 8005012:	d108      	bne.n	8005026 <HAL_UART_Receive+0x126>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d104      	bne.n	8005026 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	e003      	b.n	800502e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800502a:	2300      	movs	r3, #0
 800502c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800502e:	e03a      	b.n	80050a6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	0013      	movs	r3, r2
 800503a:	2200      	movs	r2, #0
 800503c:	2120      	movs	r1, #32
 800503e:	f000 ff3d 	bl	8005ebc <UART_WaitOnFlagUntilTimeout>
 8005042:	1e03      	subs	r3, r0, #0
 8005044:	d005      	beq.n	8005052 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2280      	movs	r2, #128	@ 0x80
 800504a:	2120      	movs	r1, #32
 800504c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e036      	b.n	80050c0 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d10e      	bne.n	8005076 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	b29b      	uxth	r3, r3
 8005060:	2212      	movs	r2, #18
 8005062:	18ba      	adds	r2, r7, r2
 8005064:	8812      	ldrh	r2, [r2, #0]
 8005066:	4013      	ands	r3, r2
 8005068:	b29a      	uxth	r2, r3
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	3302      	adds	r3, #2
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	e00e      	b.n	8005094 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2212      	movs	r2, #18
 8005080:	18ba      	adds	r2, r7, r2
 8005082:	8812      	ldrh	r2, [r2, #0]
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	4013      	ands	r3, r2
 8005088:	b2da      	uxtb	r2, r3
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	3301      	adds	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	225a      	movs	r2, #90	@ 0x5a
 8005098:	5a9b      	ldrh	r3, [r3, r2]
 800509a:	b29b      	uxth	r3, r3
 800509c:	3b01      	subs	r3, #1
 800509e:	b299      	uxth	r1, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	225a      	movs	r2, #90	@ 0x5a
 80050a4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	225a      	movs	r2, #90	@ 0x5a
 80050aa:	5a9b      	ldrh	r3, [r3, r2]
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1be      	bne.n	8005030 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2280      	movs	r2, #128	@ 0x80
 80050b6:	2120      	movs	r1, #32
 80050b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80050ba:	2300      	movs	r3, #0
 80050bc:	e000      	b.n	80050c0 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 80050be:	2302      	movs	r3, #2
  }
}
 80050c0:	0018      	movs	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b008      	add	sp, #32
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	000001ff 	.word	0x000001ff

080050cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050cc:	b590      	push	{r4, r7, lr}
 80050ce:	b0ab      	sub	sp, #172	@ 0xac
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	22a4      	movs	r2, #164	@ 0xa4
 80050dc:	18b9      	adds	r1, r7, r2
 80050de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	20a0      	movs	r0, #160	@ 0xa0
 80050e8:	1839      	adds	r1, r7, r0
 80050ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	219c      	movs	r1, #156	@ 0x9c
 80050f4:	1879      	adds	r1, r7, r1
 80050f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80050f8:	0011      	movs	r1, r2
 80050fa:	18bb      	adds	r3, r7, r2
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a99      	ldr	r2, [pc, #612]	@ (8005364 <HAL_UART_IRQHandler+0x298>)
 8005100:	4013      	ands	r3, r2
 8005102:	2298      	movs	r2, #152	@ 0x98
 8005104:	18bc      	adds	r4, r7, r2
 8005106:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005108:	18bb      	adds	r3, r7, r2
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d114      	bne.n	800513a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005110:	187b      	adds	r3, r7, r1
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2220      	movs	r2, #32
 8005116:	4013      	ands	r3, r2
 8005118:	d00f      	beq.n	800513a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800511a:	183b      	adds	r3, r7, r0
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2220      	movs	r2, #32
 8005120:	4013      	ands	r3, r2
 8005122:	d00a      	beq.n	800513a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005128:	2b00      	cmp	r3, #0
 800512a:	d100      	bne.n	800512e <HAL_UART_IRQHandler+0x62>
 800512c:	e2a0      	b.n	8005670 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	0010      	movs	r0, r2
 8005136:	4798      	blx	r3
      }
      return;
 8005138:	e29a      	b.n	8005670 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800513a:	2398      	movs	r3, #152	@ 0x98
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d100      	bne.n	8005146 <HAL_UART_IRQHandler+0x7a>
 8005144:	e114      	b.n	8005370 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005146:	239c      	movs	r3, #156	@ 0x9c
 8005148:	18fb      	adds	r3, r7, r3
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2201      	movs	r2, #1
 800514e:	4013      	ands	r3, r2
 8005150:	d106      	bne.n	8005160 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005152:	23a0      	movs	r3, #160	@ 0xa0
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a83      	ldr	r2, [pc, #524]	@ (8005368 <HAL_UART_IRQHandler+0x29c>)
 800515a:	4013      	ands	r3, r2
 800515c:	d100      	bne.n	8005160 <HAL_UART_IRQHandler+0x94>
 800515e:	e107      	b.n	8005370 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005160:	23a4      	movs	r3, #164	@ 0xa4
 8005162:	18fb      	adds	r3, r7, r3
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2201      	movs	r2, #1
 8005168:	4013      	ands	r3, r2
 800516a:	d012      	beq.n	8005192 <HAL_UART_IRQHandler+0xc6>
 800516c:	23a0      	movs	r3, #160	@ 0xa0
 800516e:	18fb      	adds	r3, r7, r3
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	2380      	movs	r3, #128	@ 0x80
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	4013      	ands	r3, r2
 8005178:	d00b      	beq.n	8005192 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2201      	movs	r2, #1
 8005180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2284      	movs	r2, #132	@ 0x84
 8005186:	589b      	ldr	r3, [r3, r2]
 8005188:	2201      	movs	r2, #1
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2184      	movs	r1, #132	@ 0x84
 8005190:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005192:	23a4      	movs	r3, #164	@ 0xa4
 8005194:	18fb      	adds	r3, r7, r3
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2202      	movs	r2, #2
 800519a:	4013      	ands	r3, r2
 800519c:	d011      	beq.n	80051c2 <HAL_UART_IRQHandler+0xf6>
 800519e:	239c      	movs	r3, #156	@ 0x9c
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	4013      	ands	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2202      	movs	r2, #2
 80051b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2284      	movs	r2, #132	@ 0x84
 80051b6:	589b      	ldr	r3, [r3, r2]
 80051b8:	2204      	movs	r2, #4
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2184      	movs	r1, #132	@ 0x84
 80051c0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80051c2:	23a4      	movs	r3, #164	@ 0xa4
 80051c4:	18fb      	adds	r3, r7, r3
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2204      	movs	r2, #4
 80051ca:	4013      	ands	r3, r2
 80051cc:	d011      	beq.n	80051f2 <HAL_UART_IRQHandler+0x126>
 80051ce:	239c      	movs	r3, #156	@ 0x9c
 80051d0:	18fb      	adds	r3, r7, r3
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2201      	movs	r2, #1
 80051d6:	4013      	ands	r3, r2
 80051d8:	d00b      	beq.n	80051f2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2204      	movs	r2, #4
 80051e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2284      	movs	r2, #132	@ 0x84
 80051e6:	589b      	ldr	r3, [r3, r2]
 80051e8:	2202      	movs	r2, #2
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2184      	movs	r1, #132	@ 0x84
 80051f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80051f2:	23a4      	movs	r3, #164	@ 0xa4
 80051f4:	18fb      	adds	r3, r7, r3
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2208      	movs	r2, #8
 80051fa:	4013      	ands	r3, r2
 80051fc:	d017      	beq.n	800522e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80051fe:	23a0      	movs	r3, #160	@ 0xa0
 8005200:	18fb      	adds	r3, r7, r3
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2220      	movs	r2, #32
 8005206:	4013      	ands	r3, r2
 8005208:	d105      	bne.n	8005216 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800520a:	239c      	movs	r3, #156	@ 0x9c
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2201      	movs	r2, #1
 8005212:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005214:	d00b      	beq.n	800522e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2208      	movs	r2, #8
 800521c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2284      	movs	r2, #132	@ 0x84
 8005222:	589b      	ldr	r3, [r3, r2]
 8005224:	2208      	movs	r2, #8
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2184      	movs	r1, #132	@ 0x84
 800522c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800522e:	23a4      	movs	r3, #164	@ 0xa4
 8005230:	18fb      	adds	r3, r7, r3
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	2380      	movs	r3, #128	@ 0x80
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	4013      	ands	r3, r2
 800523a:	d013      	beq.n	8005264 <HAL_UART_IRQHandler+0x198>
 800523c:	23a0      	movs	r3, #160	@ 0xa0
 800523e:	18fb      	adds	r3, r7, r3
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	2380      	movs	r3, #128	@ 0x80
 8005244:	04db      	lsls	r3, r3, #19
 8005246:	4013      	ands	r3, r2
 8005248:	d00c      	beq.n	8005264 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2280      	movs	r2, #128	@ 0x80
 8005250:	0112      	lsls	r2, r2, #4
 8005252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2284      	movs	r2, #132	@ 0x84
 8005258:	589b      	ldr	r3, [r3, r2]
 800525a:	2220      	movs	r2, #32
 800525c:	431a      	orrs	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2184      	movs	r1, #132	@ 0x84
 8005262:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2284      	movs	r2, #132	@ 0x84
 8005268:	589b      	ldr	r3, [r3, r2]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d100      	bne.n	8005270 <HAL_UART_IRQHandler+0x1a4>
 800526e:	e201      	b.n	8005674 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005270:	23a4      	movs	r3, #164	@ 0xa4
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2220      	movs	r2, #32
 8005278:	4013      	ands	r3, r2
 800527a:	d00e      	beq.n	800529a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800527c:	23a0      	movs	r3, #160	@ 0xa0
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2220      	movs	r2, #32
 8005284:	4013      	ands	r3, r2
 8005286:	d008      	beq.n	800529a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800528c:	2b00      	cmp	r3, #0
 800528e:	d004      	beq.n	800529a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	0010      	movs	r0, r2
 8005298:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2284      	movs	r2, #132	@ 0x84
 800529e:	589b      	ldr	r3, [r3, r2]
 80052a0:	2194      	movs	r1, #148	@ 0x94
 80052a2:	187a      	adds	r2, r7, r1
 80052a4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	2240      	movs	r2, #64	@ 0x40
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b40      	cmp	r3, #64	@ 0x40
 80052b2:	d004      	beq.n	80052be <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80052b4:	187b      	adds	r3, r7, r1
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2228      	movs	r2, #40	@ 0x28
 80052ba:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80052bc:	d047      	beq.n	800534e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	0018      	movs	r0, r3
 80052c2:	f000 fe65 	bl	8005f90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2240      	movs	r2, #64	@ 0x40
 80052ce:	4013      	ands	r3, r2
 80052d0:	2b40      	cmp	r3, #64	@ 0x40
 80052d2:	d137      	bne.n	8005344 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d4:	f3ef 8310 	mrs	r3, PRIMASK
 80052d8:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80052da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052dc:	2090      	movs	r0, #144	@ 0x90
 80052de:	183a      	adds	r2, r7, r0
 80052e0:	6013      	str	r3, [r2, #0]
 80052e2:	2301      	movs	r3, #1
 80052e4:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80052e8:	f383 8810 	msr	PRIMASK, r3
}
 80052ec:	46c0      	nop			@ (mov r8, r8)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2140      	movs	r1, #64	@ 0x40
 80052fa:	438a      	bics	r2, r1
 80052fc:	609a      	str	r2, [r3, #8]
 80052fe:	183b      	adds	r3, r7, r0
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005304:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005306:	f383 8810 	msr	PRIMASK, r3
}
 800530a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005310:	2b00      	cmp	r3, #0
 8005312:	d012      	beq.n	800533a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005318:	4a14      	ldr	r2, [pc, #80]	@ (800536c <HAL_UART_IRQHandler+0x2a0>)
 800531a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005320:	0018      	movs	r0, r3
 8005322:	f7fd f959 	bl	80025d8 <HAL_DMA_Abort_IT>
 8005326:	1e03      	subs	r3, r0, #0
 8005328:	d01a      	beq.n	8005360 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005334:	0018      	movs	r0, r3
 8005336:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005338:	e012      	b.n	8005360 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	0018      	movs	r0, r3
 800533e:	f000 f9af 	bl	80056a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005342:	e00d      	b.n	8005360 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	0018      	movs	r0, r3
 8005348:	f000 f9aa 	bl	80056a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	e008      	b.n	8005360 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0018      	movs	r0, r3
 8005352:	f000 f9a5 	bl	80056a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2284      	movs	r2, #132	@ 0x84
 800535a:	2100      	movs	r1, #0
 800535c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800535e:	e189      	b.n	8005674 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	46c0      	nop			@ (mov r8, r8)
    return;
 8005362:	e187      	b.n	8005674 <HAL_UART_IRQHandler+0x5a8>
 8005364:	0000080f 	.word	0x0000080f
 8005368:	04000120 	.word	0x04000120
 800536c:	08006059 	.word	0x08006059

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005374:	2b01      	cmp	r3, #1
 8005376:	d000      	beq.n	800537a <HAL_UART_IRQHandler+0x2ae>
 8005378:	e13b      	b.n	80055f2 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800537a:	23a4      	movs	r3, #164	@ 0xa4
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2210      	movs	r2, #16
 8005382:	4013      	ands	r3, r2
 8005384:	d100      	bne.n	8005388 <HAL_UART_IRQHandler+0x2bc>
 8005386:	e134      	b.n	80055f2 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005388:	23a0      	movs	r3, #160	@ 0xa0
 800538a:	18fb      	adds	r3, r7, r3
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2210      	movs	r2, #16
 8005390:	4013      	ands	r3, r2
 8005392:	d100      	bne.n	8005396 <HAL_UART_IRQHandler+0x2ca>
 8005394:	e12d      	b.n	80055f2 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2210      	movs	r2, #16
 800539c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	2240      	movs	r2, #64	@ 0x40
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b40      	cmp	r3, #64	@ 0x40
 80053aa:	d000      	beq.n	80053ae <HAL_UART_IRQHandler+0x2e2>
 80053ac:	e0a1      	b.n	80054f2 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	217e      	movs	r1, #126	@ 0x7e
 80053b8:	187b      	adds	r3, r7, r1
 80053ba:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80053bc:	187b      	adds	r3, r7, r1
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d100      	bne.n	80053c6 <HAL_UART_IRQHandler+0x2fa>
 80053c4:	e158      	b.n	8005678 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2258      	movs	r2, #88	@ 0x58
 80053ca:	5a9b      	ldrh	r3, [r3, r2]
 80053cc:	187a      	adds	r2, r7, r1
 80053ce:	8812      	ldrh	r2, [r2, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d300      	bcc.n	80053d6 <HAL_UART_IRQHandler+0x30a>
 80053d4:	e150      	b.n	8005678 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	187a      	adds	r2, r7, r1
 80053da:	215a      	movs	r1, #90	@ 0x5a
 80053dc:	8812      	ldrh	r2, [r2, #0]
 80053de:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2220      	movs	r2, #32
 80053ea:	4013      	ands	r3, r2
 80053ec:	d16f      	bne.n	80054ce <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ee:	f3ef 8310 	mrs	r3, PRIMASK
 80053f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80053f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053f6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053f8:	2301      	movs	r3, #1
 80053fa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fe:	f383 8810 	msr	PRIMASK, r3
}
 8005402:	46c0      	nop			@ (mov r8, r8)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	499e      	ldr	r1, [pc, #632]	@ (8005688 <HAL_UART_IRQHandler+0x5bc>)
 8005410:	400a      	ands	r2, r1
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005416:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005420:	f3ef 8310 	mrs	r3, PRIMASK
 8005424:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005428:	677b      	str	r3, [r7, #116]	@ 0x74
 800542a:	2301      	movs	r3, #1
 800542c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800542e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005430:	f383 8810 	msr	PRIMASK, r3
}
 8005434:	46c0      	nop			@ (mov r8, r8)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2101      	movs	r1, #1
 8005442:	438a      	bics	r2, r1
 8005444:	609a      	str	r2, [r3, #8]
 8005446:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005448:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800544a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544c:	f383 8810 	msr	PRIMASK, r3
}
 8005450:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005452:	f3ef 8310 	mrs	r3, PRIMASK
 8005456:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800545a:	673b      	str	r3, [r7, #112]	@ 0x70
 800545c:	2301      	movs	r3, #1
 800545e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005462:	f383 8810 	msr	PRIMASK, r3
}
 8005466:	46c0      	nop			@ (mov r8, r8)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2140      	movs	r1, #64	@ 0x40
 8005474:	438a      	bics	r2, r1
 8005476:	609a      	str	r2, [r3, #8]
 8005478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800547a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800547e:	f383 8810 	msr	PRIMASK, r3
}
 8005482:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2280      	movs	r2, #128	@ 0x80
 8005488:	2120      	movs	r1, #32
 800548a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005492:	f3ef 8310 	mrs	r3, PRIMASK
 8005496:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8005498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800549a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800549c:	2301      	movs	r3, #1
 800549e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054a2:	f383 8810 	msr	PRIMASK, r3
}
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2110      	movs	r1, #16
 80054b4:	438a      	bics	r2, r1
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054be:	f383 8810 	msr	PRIMASK, r3
}
 80054c2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7fd f845 	bl	8002558 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2202      	movs	r2, #2
 80054d2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2258      	movs	r2, #88	@ 0x58
 80054d8:	5a9a      	ldrh	r2, [r3, r2]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	215a      	movs	r1, #90	@ 0x5a
 80054de:	5a5b      	ldrh	r3, [r3, r1]
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	0011      	movs	r1, r2
 80054ea:	0018      	movs	r0, r3
 80054ec:	f000 f8e0 	bl	80056b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80054f0:	e0c2      	b.n	8005678 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2258      	movs	r2, #88	@ 0x58
 80054f6:	5a99      	ldrh	r1, [r3, r2]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	225a      	movs	r2, #90	@ 0x5a
 80054fc:	5a9b      	ldrh	r3, [r3, r2]
 80054fe:	b29a      	uxth	r2, r3
 8005500:	208e      	movs	r0, #142	@ 0x8e
 8005502:	183b      	adds	r3, r7, r0
 8005504:	1a8a      	subs	r2, r1, r2
 8005506:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	225a      	movs	r2, #90	@ 0x5a
 800550c:	5a9b      	ldrh	r3, [r3, r2]
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d100      	bne.n	8005516 <HAL_UART_IRQHandler+0x44a>
 8005514:	e0b2      	b.n	800567c <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8005516:	183b      	adds	r3, r7, r0
 8005518:	881b      	ldrh	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d100      	bne.n	8005520 <HAL_UART_IRQHandler+0x454>
 800551e:	e0ad      	b.n	800567c <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005520:	f3ef 8310 	mrs	r3, PRIMASK
 8005524:	60fb      	str	r3, [r7, #12]
  return(result);
 8005526:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005528:	2488      	movs	r4, #136	@ 0x88
 800552a:	193a      	adds	r2, r7, r4
 800552c:	6013      	str	r3, [r2, #0]
 800552e:	2301      	movs	r3, #1
 8005530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	f383 8810 	msr	PRIMASK, r3
}
 8005538:	46c0      	nop			@ (mov r8, r8)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4951      	ldr	r1, [pc, #324]	@ (800568c <HAL_UART_IRQHandler+0x5c0>)
 8005546:	400a      	ands	r2, r1
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	193b      	adds	r3, r7, r4
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f383 8810 	msr	PRIMASK, r3
}
 8005556:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005558:	f3ef 8310 	mrs	r3, PRIMASK
 800555c:	61bb      	str	r3, [r7, #24]
  return(result);
 800555e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005560:	2484      	movs	r4, #132	@ 0x84
 8005562:	193a      	adds	r2, r7, r4
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	2301      	movs	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2101      	movs	r1, #1
 800557e:	438a      	bics	r2, r1
 8005580:	609a      	str	r2, [r3, #8]
 8005582:	193b      	adds	r3, r7, r4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	f383 8810 	msr	PRIMASK, r3
}
 800558e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2280      	movs	r2, #128	@ 0x80
 8005594:	2120      	movs	r1, #32
 8005596:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a4:	f3ef 8310 	mrs	r3, PRIMASK
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055ac:	2480      	movs	r4, #128	@ 0x80
 80055ae:	193a      	adds	r2, r7, r4
 80055b0:	6013      	str	r3, [r2, #0]
 80055b2:	2301      	movs	r3, #1
 80055b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b8:	f383 8810 	msr	PRIMASK, r3
}
 80055bc:	46c0      	nop			@ (mov r8, r8)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2110      	movs	r1, #16
 80055ca:	438a      	bics	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
 80055ce:	193b      	adds	r3, r7, r4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d6:	f383 8810 	msr	PRIMASK, r3
}
 80055da:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055e2:	183b      	adds	r3, r7, r0
 80055e4:	881a      	ldrh	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	0011      	movs	r1, r2
 80055ea:	0018      	movs	r0, r3
 80055ec:	f000 f860 	bl	80056b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055f0:	e044      	b.n	800567c <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055f2:	23a4      	movs	r3, #164	@ 0xa4
 80055f4:	18fb      	adds	r3, r7, r3
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	2380      	movs	r3, #128	@ 0x80
 80055fa:	035b      	lsls	r3, r3, #13
 80055fc:	4013      	ands	r3, r2
 80055fe:	d010      	beq.n	8005622 <HAL_UART_IRQHandler+0x556>
 8005600:	239c      	movs	r3, #156	@ 0x9c
 8005602:	18fb      	adds	r3, r7, r3
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	2380      	movs	r3, #128	@ 0x80
 8005608:	03db      	lsls	r3, r3, #15
 800560a:	4013      	ands	r3, r2
 800560c:	d009      	beq.n	8005622 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2280      	movs	r2, #128	@ 0x80
 8005614:	0352      	lsls	r2, r2, #13
 8005616:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	0018      	movs	r0, r3
 800561c:	f000 fd5e 	bl	80060dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005620:	e02f      	b.n	8005682 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005622:	23a4      	movs	r3, #164	@ 0xa4
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2280      	movs	r2, #128	@ 0x80
 800562a:	4013      	ands	r3, r2
 800562c:	d00f      	beq.n	800564e <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800562e:	23a0      	movs	r3, #160	@ 0xa0
 8005630:	18fb      	adds	r3, r7, r3
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2280      	movs	r2, #128	@ 0x80
 8005636:	4013      	ands	r3, r2
 8005638:	d009      	beq.n	800564e <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01e      	beq.n	8005680 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	0010      	movs	r0, r2
 800564a:	4798      	blx	r3
    }
    return;
 800564c:	e018      	b.n	8005680 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800564e:	23a4      	movs	r3, #164	@ 0xa4
 8005650:	18fb      	adds	r3, r7, r3
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2240      	movs	r2, #64	@ 0x40
 8005656:	4013      	ands	r3, r2
 8005658:	d013      	beq.n	8005682 <HAL_UART_IRQHandler+0x5b6>
 800565a:	23a0      	movs	r3, #160	@ 0xa0
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2240      	movs	r2, #64	@ 0x40
 8005662:	4013      	ands	r3, r2
 8005664:	d00d      	beq.n	8005682 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	0018      	movs	r0, r3
 800566a:	f000 fd0c 	bl	8006086 <UART_EndTransmit_IT>
    return;
 800566e:	e008      	b.n	8005682 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	e006      	b.n	8005682 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005674:	46c0      	nop			@ (mov r8, r8)
 8005676:	e004      	b.n	8005682 <HAL_UART_IRQHandler+0x5b6>
      return;
 8005678:	46c0      	nop			@ (mov r8, r8)
 800567a:	e002      	b.n	8005682 <HAL_UART_IRQHandler+0x5b6>
      return;
 800567c:	46c0      	nop			@ (mov r8, r8)
 800567e:	e000      	b.n	8005682 <HAL_UART_IRQHandler+0x5b6>
    return;
 8005680:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005682:	46bd      	mov	sp, r7
 8005684:	b02b      	add	sp, #172	@ 0xac
 8005686:	bd90      	pop	{r4, r7, pc}
 8005688:	fffffeff 	.word	0xfffffeff
 800568c:	fffffedf 	.word	0xfffffedf

08005690 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b082      	sub	sp, #8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005698:	46c0      	nop			@ (mov r8, r8)
 800569a:	46bd      	mov	sp, r7
 800569c:	b002      	add	sp, #8
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056a8:	46c0      	nop			@ (mov r8, r8)
 80056aa:	46bd      	mov	sp, r7
 80056ac:	b002      	add	sp, #8
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	000a      	movs	r2, r1
 80056ba:	1cbb      	adds	r3, r7, #2
 80056bc:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056be:	46c0      	nop			@ (mov r8, r8)
 80056c0:	46bd      	mov	sp, r7
 80056c2:	b002      	add	sp, #8
 80056c4:	bd80      	pop	{r7, pc}
	...

080056c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b08e      	sub	sp, #56	@ 0x38
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056d0:	231a      	movs	r3, #26
 80056d2:	2218      	movs	r2, #24
 80056d4:	189b      	adds	r3, r3, r2
 80056d6:	19db      	adds	r3, r3, r7
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	431a      	orrs	r2, r3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4ac3      	ldr	r2, [pc, #780]	@ (8005a08 <UART_SetConfig+0x340>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	0019      	movs	r1, r3
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	4abe      	ldr	r2, [pc, #760]	@ (8005a0c <UART_SetConfig+0x344>)
 8005712:	4013      	ands	r3, r2
 8005714:	0019      	movs	r1, r3
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4ab8      	ldr	r2, [pc, #736]	@ (8005a10 <UART_SetConfig+0x348>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005738:	4313      	orrs	r3, r2
 800573a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800573c:	69fb      	ldr	r3, [r7, #28]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	4ab4      	ldr	r2, [pc, #720]	@ (8005a14 <UART_SetConfig+0x34c>)
 8005744:	4013      	ands	r3, r2
 8005746:	0019      	movs	r1, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4ab0      	ldr	r2, [pc, #704]	@ (8005a18 <UART_SetConfig+0x350>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d131      	bne.n	80057c0 <UART_SetConfig+0xf8>
 800575c:	4baf      	ldr	r3, [pc, #700]	@ (8005a1c <UART_SetConfig+0x354>)
 800575e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005760:	2203      	movs	r2, #3
 8005762:	4013      	ands	r3, r2
 8005764:	2b03      	cmp	r3, #3
 8005766:	d01d      	beq.n	80057a4 <UART_SetConfig+0xdc>
 8005768:	d823      	bhi.n	80057b2 <UART_SetConfig+0xea>
 800576a:	2b02      	cmp	r3, #2
 800576c:	d00c      	beq.n	8005788 <UART_SetConfig+0xc0>
 800576e:	d820      	bhi.n	80057b2 <UART_SetConfig+0xea>
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <UART_SetConfig+0xb2>
 8005774:	2b01      	cmp	r3, #1
 8005776:	d00e      	beq.n	8005796 <UART_SetConfig+0xce>
 8005778:	e01b      	b.n	80057b2 <UART_SetConfig+0xea>
 800577a:	231b      	movs	r3, #27
 800577c:	2218      	movs	r2, #24
 800577e:	189b      	adds	r3, r3, r2
 8005780:	19db      	adds	r3, r3, r7
 8005782:	2201      	movs	r2, #1
 8005784:	701a      	strb	r2, [r3, #0]
 8005786:	e0b4      	b.n	80058f2 <UART_SetConfig+0x22a>
 8005788:	231b      	movs	r3, #27
 800578a:	2218      	movs	r2, #24
 800578c:	189b      	adds	r3, r3, r2
 800578e:	19db      	adds	r3, r3, r7
 8005790:	2202      	movs	r2, #2
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	e0ad      	b.n	80058f2 <UART_SetConfig+0x22a>
 8005796:	231b      	movs	r3, #27
 8005798:	2218      	movs	r2, #24
 800579a:	189b      	adds	r3, r3, r2
 800579c:	19db      	adds	r3, r3, r7
 800579e:	2204      	movs	r2, #4
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e0a6      	b.n	80058f2 <UART_SetConfig+0x22a>
 80057a4:	231b      	movs	r3, #27
 80057a6:	2218      	movs	r2, #24
 80057a8:	189b      	adds	r3, r3, r2
 80057aa:	19db      	adds	r3, r3, r7
 80057ac:	2208      	movs	r2, #8
 80057ae:	701a      	strb	r2, [r3, #0]
 80057b0:	e09f      	b.n	80058f2 <UART_SetConfig+0x22a>
 80057b2:	231b      	movs	r3, #27
 80057b4:	2218      	movs	r2, #24
 80057b6:	189b      	adds	r3, r3, r2
 80057b8:	19db      	adds	r3, r3, r7
 80057ba:	2210      	movs	r2, #16
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	e098      	b.n	80058f2 <UART_SetConfig+0x22a>
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a96      	ldr	r2, [pc, #600]	@ (8005a20 <UART_SetConfig+0x358>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d131      	bne.n	800582e <UART_SetConfig+0x166>
 80057ca:	4b94      	ldr	r3, [pc, #592]	@ (8005a1c <UART_SetConfig+0x354>)
 80057cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ce:	220c      	movs	r2, #12
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b0c      	cmp	r3, #12
 80057d4:	d01d      	beq.n	8005812 <UART_SetConfig+0x14a>
 80057d6:	d823      	bhi.n	8005820 <UART_SetConfig+0x158>
 80057d8:	2b08      	cmp	r3, #8
 80057da:	d00c      	beq.n	80057f6 <UART_SetConfig+0x12e>
 80057dc:	d820      	bhi.n	8005820 <UART_SetConfig+0x158>
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <UART_SetConfig+0x120>
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d00e      	beq.n	8005804 <UART_SetConfig+0x13c>
 80057e6:	e01b      	b.n	8005820 <UART_SetConfig+0x158>
 80057e8:	231b      	movs	r3, #27
 80057ea:	2218      	movs	r2, #24
 80057ec:	189b      	adds	r3, r3, r2
 80057ee:	19db      	adds	r3, r3, r7
 80057f0:	2200      	movs	r2, #0
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e07d      	b.n	80058f2 <UART_SetConfig+0x22a>
 80057f6:	231b      	movs	r3, #27
 80057f8:	2218      	movs	r2, #24
 80057fa:	189b      	adds	r3, r3, r2
 80057fc:	19db      	adds	r3, r3, r7
 80057fe:	2202      	movs	r2, #2
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e076      	b.n	80058f2 <UART_SetConfig+0x22a>
 8005804:	231b      	movs	r3, #27
 8005806:	2218      	movs	r2, #24
 8005808:	189b      	adds	r3, r3, r2
 800580a:	19db      	adds	r3, r3, r7
 800580c:	2204      	movs	r2, #4
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	e06f      	b.n	80058f2 <UART_SetConfig+0x22a>
 8005812:	231b      	movs	r3, #27
 8005814:	2218      	movs	r2, #24
 8005816:	189b      	adds	r3, r3, r2
 8005818:	19db      	adds	r3, r3, r7
 800581a:	2208      	movs	r2, #8
 800581c:	701a      	strb	r2, [r3, #0]
 800581e:	e068      	b.n	80058f2 <UART_SetConfig+0x22a>
 8005820:	231b      	movs	r3, #27
 8005822:	2218      	movs	r2, #24
 8005824:	189b      	adds	r3, r3, r2
 8005826:	19db      	adds	r3, r3, r7
 8005828:	2210      	movs	r2, #16
 800582a:	701a      	strb	r2, [r3, #0]
 800582c:	e061      	b.n	80058f2 <UART_SetConfig+0x22a>
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a7c      	ldr	r2, [pc, #496]	@ (8005a24 <UART_SetConfig+0x35c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d106      	bne.n	8005846 <UART_SetConfig+0x17e>
 8005838:	231b      	movs	r3, #27
 800583a:	2218      	movs	r2, #24
 800583c:	189b      	adds	r3, r3, r2
 800583e:	19db      	adds	r3, r3, r7
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
 8005844:	e055      	b.n	80058f2 <UART_SetConfig+0x22a>
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a77      	ldr	r2, [pc, #476]	@ (8005a28 <UART_SetConfig+0x360>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d106      	bne.n	800585e <UART_SetConfig+0x196>
 8005850:	231b      	movs	r3, #27
 8005852:	2218      	movs	r2, #24
 8005854:	189b      	adds	r3, r3, r2
 8005856:	19db      	adds	r3, r3, r7
 8005858:	2200      	movs	r2, #0
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e049      	b.n	80058f2 <UART_SetConfig+0x22a>
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a6b      	ldr	r2, [pc, #428]	@ (8005a10 <UART_SetConfig+0x348>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d13e      	bne.n	80058e6 <UART_SetConfig+0x21e>
 8005868:	4b6c      	ldr	r3, [pc, #432]	@ (8005a1c <UART_SetConfig+0x354>)
 800586a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800586c:	23c0      	movs	r3, #192	@ 0xc0
 800586e:	011b      	lsls	r3, r3, #4
 8005870:	4013      	ands	r3, r2
 8005872:	22c0      	movs	r2, #192	@ 0xc0
 8005874:	0112      	lsls	r2, r2, #4
 8005876:	4293      	cmp	r3, r2
 8005878:	d027      	beq.n	80058ca <UART_SetConfig+0x202>
 800587a:	22c0      	movs	r2, #192	@ 0xc0
 800587c:	0112      	lsls	r2, r2, #4
 800587e:	4293      	cmp	r3, r2
 8005880:	d82a      	bhi.n	80058d8 <UART_SetConfig+0x210>
 8005882:	2280      	movs	r2, #128	@ 0x80
 8005884:	0112      	lsls	r2, r2, #4
 8005886:	4293      	cmp	r3, r2
 8005888:	d011      	beq.n	80058ae <UART_SetConfig+0x1e6>
 800588a:	2280      	movs	r2, #128	@ 0x80
 800588c:	0112      	lsls	r2, r2, #4
 800588e:	4293      	cmp	r3, r2
 8005890:	d822      	bhi.n	80058d8 <UART_SetConfig+0x210>
 8005892:	2b00      	cmp	r3, #0
 8005894:	d004      	beq.n	80058a0 <UART_SetConfig+0x1d8>
 8005896:	2280      	movs	r2, #128	@ 0x80
 8005898:	00d2      	lsls	r2, r2, #3
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <UART_SetConfig+0x1f4>
 800589e:	e01b      	b.n	80058d8 <UART_SetConfig+0x210>
 80058a0:	231b      	movs	r3, #27
 80058a2:	2218      	movs	r2, #24
 80058a4:	189b      	adds	r3, r3, r2
 80058a6:	19db      	adds	r3, r3, r7
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	e021      	b.n	80058f2 <UART_SetConfig+0x22a>
 80058ae:	231b      	movs	r3, #27
 80058b0:	2218      	movs	r2, #24
 80058b2:	189b      	adds	r3, r3, r2
 80058b4:	19db      	adds	r3, r3, r7
 80058b6:	2202      	movs	r2, #2
 80058b8:	701a      	strb	r2, [r3, #0]
 80058ba:	e01a      	b.n	80058f2 <UART_SetConfig+0x22a>
 80058bc:	231b      	movs	r3, #27
 80058be:	2218      	movs	r2, #24
 80058c0:	189b      	adds	r3, r3, r2
 80058c2:	19db      	adds	r3, r3, r7
 80058c4:	2204      	movs	r2, #4
 80058c6:	701a      	strb	r2, [r3, #0]
 80058c8:	e013      	b.n	80058f2 <UART_SetConfig+0x22a>
 80058ca:	231b      	movs	r3, #27
 80058cc:	2218      	movs	r2, #24
 80058ce:	189b      	adds	r3, r3, r2
 80058d0:	19db      	adds	r3, r3, r7
 80058d2:	2208      	movs	r2, #8
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e00c      	b.n	80058f2 <UART_SetConfig+0x22a>
 80058d8:	231b      	movs	r3, #27
 80058da:	2218      	movs	r2, #24
 80058dc:	189b      	adds	r3, r3, r2
 80058de:	19db      	adds	r3, r3, r7
 80058e0:	2210      	movs	r2, #16
 80058e2:	701a      	strb	r2, [r3, #0]
 80058e4:	e005      	b.n	80058f2 <UART_SetConfig+0x22a>
 80058e6:	231b      	movs	r3, #27
 80058e8:	2218      	movs	r2, #24
 80058ea:	189b      	adds	r3, r3, r2
 80058ec:	19db      	adds	r3, r3, r7
 80058ee:	2210      	movs	r2, #16
 80058f0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a46      	ldr	r2, [pc, #280]	@ (8005a10 <UART_SetConfig+0x348>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d000      	beq.n	80058fe <UART_SetConfig+0x236>
 80058fc:	e09a      	b.n	8005a34 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058fe:	231b      	movs	r3, #27
 8005900:	2218      	movs	r2, #24
 8005902:	189b      	adds	r3, r3, r2
 8005904:	19db      	adds	r3, r3, r7
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b08      	cmp	r3, #8
 800590a:	d01d      	beq.n	8005948 <UART_SetConfig+0x280>
 800590c:	dc20      	bgt.n	8005950 <UART_SetConfig+0x288>
 800590e:	2b04      	cmp	r3, #4
 8005910:	d015      	beq.n	800593e <UART_SetConfig+0x276>
 8005912:	dc1d      	bgt.n	8005950 <UART_SetConfig+0x288>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d002      	beq.n	800591e <UART_SetConfig+0x256>
 8005918:	2b02      	cmp	r3, #2
 800591a:	d005      	beq.n	8005928 <UART_SetConfig+0x260>
 800591c:	e018      	b.n	8005950 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800591e:	f7fd fe4d 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8005922:	0003      	movs	r3, r0
 8005924:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005926:	e01c      	b.n	8005962 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005928:	4b3c      	ldr	r3, [pc, #240]	@ (8005a1c <UART_SetConfig+0x354>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2210      	movs	r2, #16
 800592e:	4013      	ands	r3, r2
 8005930:	d002      	beq.n	8005938 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005932:	4b3e      	ldr	r3, [pc, #248]	@ (8005a2c <UART_SetConfig+0x364>)
 8005934:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005936:	e014      	b.n	8005962 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005938:	4b3d      	ldr	r3, [pc, #244]	@ (8005a30 <UART_SetConfig+0x368>)
 800593a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800593c:	e011      	b.n	8005962 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800593e:	f7fd fd8d 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8005942:	0003      	movs	r3, r0
 8005944:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005946:	e00c      	b.n	8005962 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800594e:	e008      	b.n	8005962 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005950:	2300      	movs	r3, #0
 8005952:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005954:	231a      	movs	r3, #26
 8005956:	2218      	movs	r2, #24
 8005958:	189b      	adds	r3, r3, r2
 800595a:	19db      	adds	r3, r3, r7
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
        break;
 8005960:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005964:	2b00      	cmp	r3, #0
 8005966:	d100      	bne.n	800596a <UART_SetConfig+0x2a2>
 8005968:	e133      	b.n	8005bd2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	0013      	movs	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	189b      	adds	r3, r3, r2
 8005974:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005976:	429a      	cmp	r2, r3
 8005978:	d305      	bcc.n	8005986 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005982:	429a      	cmp	r2, r3
 8005984:	d906      	bls.n	8005994 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005986:	231a      	movs	r3, #26
 8005988:	2218      	movs	r2, #24
 800598a:	189b      	adds	r3, r3, r2
 800598c:	19db      	adds	r3, r3, r7
 800598e:	2201      	movs	r2, #1
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	e11e      	b.n	8005bd2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	2300      	movs	r3, #0
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	6939      	ldr	r1, [r7, #16]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	000b      	movs	r3, r1
 80059a2:	0e1b      	lsrs	r3, r3, #24
 80059a4:	0010      	movs	r0, r2
 80059a6:	0205      	lsls	r5, r0, #8
 80059a8:	431d      	orrs	r5, r3
 80059aa:	000b      	movs	r3, r1
 80059ac:	021c      	lsls	r4, r3, #8
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	085b      	lsrs	r3, r3, #1
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	2300      	movs	r3, #0
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	68b8      	ldr	r0, [r7, #8]
 80059bc:	68f9      	ldr	r1, [r7, #12]
 80059be:	1900      	adds	r0, r0, r4
 80059c0:	4169      	adcs	r1, r5
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	603b      	str	r3, [r7, #0]
 80059c8:	2300      	movs	r3, #0
 80059ca:	607b      	str	r3, [r7, #4]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f7fa fc30 	bl	8000234 <__aeabi_uldivmod>
 80059d4:	0002      	movs	r2, r0
 80059d6:	000b      	movs	r3, r1
 80059d8:	0013      	movs	r3, r2
 80059da:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059de:	23c0      	movs	r3, #192	@ 0xc0
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d309      	bcc.n	80059fa <UART_SetConfig+0x332>
 80059e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059e8:	2380      	movs	r3, #128	@ 0x80
 80059ea:	035b      	lsls	r3, r3, #13
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d204      	bcs.n	80059fa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059f6:	60da      	str	r2, [r3, #12]
 80059f8:	e0eb      	b.n	8005bd2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80059fa:	231a      	movs	r3, #26
 80059fc:	2218      	movs	r2, #24
 80059fe:	189b      	adds	r3, r3, r2
 8005a00:	19db      	adds	r3, r3, r7
 8005a02:	2201      	movs	r2, #1
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	e0e4      	b.n	8005bd2 <UART_SetConfig+0x50a>
 8005a08:	efff69f3 	.word	0xefff69f3
 8005a0c:	ffffcfff 	.word	0xffffcfff
 8005a10:	40004800 	.word	0x40004800
 8005a14:	fffff4ff 	.word	0xfffff4ff
 8005a18:	40013800 	.word	0x40013800
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	40004400 	.word	0x40004400
 8005a24:	40004c00 	.word	0x40004c00
 8005a28:	40005000 	.word	0x40005000
 8005a2c:	003d0900 	.word	0x003d0900
 8005a30:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	69da      	ldr	r2, [r3, #28]
 8005a38:	2380      	movs	r3, #128	@ 0x80
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d000      	beq.n	8005a42 <UART_SetConfig+0x37a>
 8005a40:	e070      	b.n	8005b24 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005a42:	231b      	movs	r3, #27
 8005a44:	2218      	movs	r2, #24
 8005a46:	189b      	adds	r3, r3, r2
 8005a48:	19db      	adds	r3, r3, r7
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d822      	bhi.n	8005a96 <UART_SetConfig+0x3ce>
 8005a50:	009a      	lsls	r2, r3, #2
 8005a52:	4b67      	ldr	r3, [pc, #412]	@ (8005bf0 <UART_SetConfig+0x528>)
 8005a54:	18d3      	adds	r3, r2, r3
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a5a:	f7fd fdaf 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8005a5e:	0003      	movs	r3, r0
 8005a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a62:	e021      	b.n	8005aa8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a64:	f7fd fdc0 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a6c:	e01c      	b.n	8005aa8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a6e:	4b61      	ldr	r3, [pc, #388]	@ (8005bf4 <UART_SetConfig+0x52c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2210      	movs	r2, #16
 8005a74:	4013      	ands	r3, r2
 8005a76:	d002      	beq.n	8005a7e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a78:	4b5f      	ldr	r3, [pc, #380]	@ (8005bf8 <UART_SetConfig+0x530>)
 8005a7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a7c:	e014      	b.n	8005aa8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8005bfc <UART_SetConfig+0x534>)
 8005a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a82:	e011      	b.n	8005aa8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a84:	f7fd fcea 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a8c:	e00c      	b.n	8005aa8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a8e:	2380      	movs	r3, #128	@ 0x80
 8005a90:	021b      	lsls	r3, r3, #8
 8005a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a94:	e008      	b.n	8005aa8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005a9a:	231a      	movs	r3, #26
 8005a9c:	2218      	movs	r2, #24
 8005a9e:	189b      	adds	r3, r3, r2
 8005aa0:	19db      	adds	r3, r3, r7
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
        break;
 8005aa6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d100      	bne.n	8005ab0 <UART_SetConfig+0x3e8>
 8005aae:	e090      	b.n	8005bd2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ab2:	005a      	lsls	r2, r3, #1
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	085b      	lsrs	r3, r3, #1
 8005aba:	18d2      	adds	r2, r2, r3
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	0019      	movs	r1, r3
 8005ac2:	0010      	movs	r0, r2
 8005ac4:	f7fa fb2a 	bl	800011c <__udivsi3>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	d921      	bls.n	8005b16 <UART_SetConfig+0x44e>
 8005ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ad4:	2380      	movs	r3, #128	@ 0x80
 8005ad6:	025b      	lsls	r3, r3, #9
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d21c      	bcs.n	8005b16 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	200e      	movs	r0, #14
 8005ae2:	2418      	movs	r4, #24
 8005ae4:	1903      	adds	r3, r0, r4
 8005ae6:	19db      	adds	r3, r3, r7
 8005ae8:	210f      	movs	r1, #15
 8005aea:	438a      	bics	r2, r1
 8005aec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af0:	085b      	lsrs	r3, r3, #1
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2207      	movs	r2, #7
 8005af6:	4013      	ands	r3, r2
 8005af8:	b299      	uxth	r1, r3
 8005afa:	1903      	adds	r3, r0, r4
 8005afc:	19db      	adds	r3, r3, r7
 8005afe:	1902      	adds	r2, r0, r4
 8005b00:	19d2      	adds	r2, r2, r7
 8005b02:	8812      	ldrh	r2, [r2, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	1902      	adds	r2, r0, r4
 8005b0e:	19d2      	adds	r2, r2, r7
 8005b10:	8812      	ldrh	r2, [r2, #0]
 8005b12:	60da      	str	r2, [r3, #12]
 8005b14:	e05d      	b.n	8005bd2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005b16:	231a      	movs	r3, #26
 8005b18:	2218      	movs	r2, #24
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	19db      	adds	r3, r3, r7
 8005b1e:	2201      	movs	r2, #1
 8005b20:	701a      	strb	r2, [r3, #0]
 8005b22:	e056      	b.n	8005bd2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b24:	231b      	movs	r3, #27
 8005b26:	2218      	movs	r2, #24
 8005b28:	189b      	adds	r3, r3, r2
 8005b2a:	19db      	adds	r3, r3, r7
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d822      	bhi.n	8005b78 <UART_SetConfig+0x4b0>
 8005b32:	009a      	lsls	r2, r3, #2
 8005b34:	4b32      	ldr	r3, [pc, #200]	@ (8005c00 <UART_SetConfig+0x538>)
 8005b36:	18d3      	adds	r3, r2, r3
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b3c:	f7fd fd3e 	bl	80035bc <HAL_RCC_GetPCLK1Freq>
 8005b40:	0003      	movs	r3, r0
 8005b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b44:	e021      	b.n	8005b8a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b46:	f7fd fd4f 	bl	80035e8 <HAL_RCC_GetPCLK2Freq>
 8005b4a:	0003      	movs	r3, r0
 8005b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b4e:	e01c      	b.n	8005b8a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b50:	4b28      	ldr	r3, [pc, #160]	@ (8005bf4 <UART_SetConfig+0x52c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2210      	movs	r2, #16
 8005b56:	4013      	ands	r3, r2
 8005b58:	d002      	beq.n	8005b60 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b5a:	4b27      	ldr	r3, [pc, #156]	@ (8005bf8 <UART_SetConfig+0x530>)
 8005b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b5e:	e014      	b.n	8005b8a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005b60:	4b26      	ldr	r3, [pc, #152]	@ (8005bfc <UART_SetConfig+0x534>)
 8005b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b64:	e011      	b.n	8005b8a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b66:	f7fd fc79 	bl	800345c <HAL_RCC_GetSysClockFreq>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b6e:	e00c      	b.n	8005b8a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b70:	2380      	movs	r3, #128	@ 0x80
 8005b72:	021b      	lsls	r3, r3, #8
 8005b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b76:	e008      	b.n	8005b8a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005b7c:	231a      	movs	r3, #26
 8005b7e:	2218      	movs	r2, #24
 8005b80:	189b      	adds	r3, r3, r2
 8005b82:	19db      	adds	r3, r3, r7
 8005b84:	2201      	movs	r2, #1
 8005b86:	701a      	strb	r2, [r3, #0]
        break;
 8005b88:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d020      	beq.n	8005bd2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	085a      	lsrs	r2, r3, #1
 8005b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b98:	18d2      	adds	r2, r2, r3
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	0010      	movs	r0, r2
 8005ba2:	f7fa fabb 	bl	800011c <__udivsi3>
 8005ba6:	0003      	movs	r3, r0
 8005ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bac:	2b0f      	cmp	r3, #15
 8005bae:	d90a      	bls.n	8005bc6 <UART_SetConfig+0x4fe>
 8005bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bb2:	2380      	movs	r3, #128	@ 0x80
 8005bb4:	025b      	lsls	r3, r3, #9
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d205      	bcs.n	8005bc6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	60da      	str	r2, [r3, #12]
 8005bc4:	e005      	b.n	8005bd2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005bc6:	231a      	movs	r3, #26
 8005bc8:	2218      	movs	r2, #24
 8005bca:	189b      	adds	r3, r3, r2
 8005bcc:	19db      	adds	r3, r3, r7
 8005bce:	2201      	movs	r2, #1
 8005bd0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005bde:	231a      	movs	r3, #26
 8005be0:	2218      	movs	r2, #24
 8005be2:	189b      	adds	r3, r3, r2
 8005be4:	19db      	adds	r3, r3, r7
 8005be6:	781b      	ldrb	r3, [r3, #0]
}
 8005be8:	0018      	movs	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	b00e      	add	sp, #56	@ 0x38
 8005bee:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf0:	08007254 	.word	0x08007254
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	003d0900 	.word	0x003d0900
 8005bfc:	00f42400 	.word	0x00f42400
 8005c00:	08007278 	.word	0x08007278

08005c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c10:	2201      	movs	r2, #1
 8005c12:	4013      	ands	r3, r2
 8005c14:	d00b      	beq.n	8005c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8005d48 <UART_AdvFeatureConfig+0x144>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	0019      	movs	r1, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c32:	2202      	movs	r2, #2
 8005c34:	4013      	ands	r3, r2
 8005c36:	d00b      	beq.n	8005c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4a43      	ldr	r2, [pc, #268]	@ (8005d4c <UART_AdvFeatureConfig+0x148>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	2204      	movs	r2, #4
 8005c56:	4013      	ands	r3, r2
 8005c58:	d00b      	beq.n	8005c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	4a3b      	ldr	r2, [pc, #236]	@ (8005d50 <UART_AdvFeatureConfig+0x14c>)
 8005c62:	4013      	ands	r3, r2
 8005c64:	0019      	movs	r1, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c76:	2208      	movs	r2, #8
 8005c78:	4013      	ands	r3, r2
 8005c7a:	d00b      	beq.n	8005c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	4a34      	ldr	r2, [pc, #208]	@ (8005d54 <UART_AdvFeatureConfig+0x150>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	0019      	movs	r1, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	2210      	movs	r2, #16
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	d00b      	beq.n	8005cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4a2c      	ldr	r2, [pc, #176]	@ (8005d58 <UART_AdvFeatureConfig+0x154>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	0019      	movs	r1, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cba:	2220      	movs	r2, #32
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d00b      	beq.n	8005cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	4a25      	ldr	r2, [pc, #148]	@ (8005d5c <UART_AdvFeatureConfig+0x158>)
 8005cc8:	4013      	ands	r3, r2
 8005cca:	0019      	movs	r1, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	2240      	movs	r2, #64	@ 0x40
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d01d      	beq.n	8005d1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d60 <UART_AdvFeatureConfig+0x15c>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	0019      	movs	r1, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cfe:	2380      	movs	r3, #128	@ 0x80
 8005d00:	035b      	lsls	r3, r3, #13
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d10b      	bne.n	8005d1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4a15      	ldr	r2, [pc, #84]	@ (8005d64 <UART_AdvFeatureConfig+0x160>)
 8005d0e:	4013      	ands	r3, r2
 8005d10:	0019      	movs	r1, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	2280      	movs	r2, #128	@ 0x80
 8005d24:	4013      	ands	r3, r2
 8005d26:	d00b      	beq.n	8005d40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8005d68 <UART_AdvFeatureConfig+0x164>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	0019      	movs	r1, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	605a      	str	r2, [r3, #4]
  }
}
 8005d40:	46c0      	nop			@ (mov r8, r8)
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b002      	add	sp, #8
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	fffdffff 	.word	0xfffdffff
 8005d4c:	fffeffff 	.word	0xfffeffff
 8005d50:	fffbffff 	.word	0xfffbffff
 8005d54:	ffff7fff 	.word	0xffff7fff
 8005d58:	ffffefff 	.word	0xffffefff
 8005d5c:	ffffdfff 	.word	0xffffdfff
 8005d60:	ffefffff 	.word	0xffefffff
 8005d64:	ff9fffff 	.word	0xff9fffff
 8005d68:	fff7ffff 	.word	0xfff7ffff

08005d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b092      	sub	sp, #72	@ 0x48
 8005d70:	af02      	add	r7, sp, #8
 8005d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2284      	movs	r2, #132	@ 0x84
 8005d78:	2100      	movs	r1, #0
 8005d7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d7c:	f7fc fae0 	bl	8002340 <HAL_GetTick>
 8005d80:	0003      	movs	r3, r0
 8005d82:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2208      	movs	r2, #8
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d12c      	bne.n	8005dec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d94:	2280      	movs	r2, #128	@ 0x80
 8005d96:	0391      	lsls	r1, r2, #14
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	4a46      	ldr	r2, [pc, #280]	@ (8005eb4 <UART_CheckIdleState+0x148>)
 8005d9c:	9200      	str	r2, [sp, #0]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f000 f88c 	bl	8005ebc <UART_WaitOnFlagUntilTimeout>
 8005da4:	1e03      	subs	r3, r0, #0
 8005da6:	d021      	beq.n	8005dec <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005db0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005db2:	2301      	movs	r3, #1
 8005db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	46c0      	nop			@ (mov r8, r8)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2180      	movs	r1, #128	@ 0x80
 8005dca:	438a      	bics	r2, r1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd4:	f383 8810 	msr	PRIMASK, r3
}
 8005dd8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2278      	movs	r2, #120	@ 0x78
 8005de4:	2100      	movs	r1, #0
 8005de6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e05f      	b.n	8005eac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2204      	movs	r2, #4
 8005df4:	4013      	ands	r3, r2
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d146      	bne.n	8005e88 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfc:	2280      	movs	r2, #128	@ 0x80
 8005dfe:	03d1      	lsls	r1, r2, #15
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4a2c      	ldr	r2, [pc, #176]	@ (8005eb4 <UART_CheckIdleState+0x148>)
 8005e04:	9200      	str	r2, [sp, #0]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f000 f858 	bl	8005ebc <UART_WaitOnFlagUntilTimeout>
 8005e0c:	1e03      	subs	r3, r0, #0
 8005e0e:	d03b      	beq.n	8005e88 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e10:	f3ef 8310 	mrs	r3, PRIMASK
 8005e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e16:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f383 8810 	msr	PRIMASK, r3
}
 8005e24:	46c0      	nop			@ (mov r8, r8)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4921      	ldr	r1, [pc, #132]	@ (8005eb8 <UART_CheckIdleState+0x14c>)
 8005e32:	400a      	ands	r2, r1
 8005e34:	601a      	str	r2, [r3, #0]
 8005e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f383 8810 	msr	PRIMASK, r3
}
 8005e40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e42:	f3ef 8310 	mrs	r3, PRIMASK
 8005e46:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e48:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f383 8810 	msr	PRIMASK, r3
}
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	689a      	ldr	r2, [r3, #8]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2101      	movs	r1, #1
 8005e64:	438a      	bics	r2, r1
 8005e66:	609a      	str	r2, [r3, #8]
 8005e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e6c:	6a3b      	ldr	r3, [r7, #32]
 8005e6e:	f383 8810 	msr	PRIMASK, r3
}
 8005e72:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2280      	movs	r2, #128	@ 0x80
 8005e78:	2120      	movs	r1, #32
 8005e7a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2278      	movs	r2, #120	@ 0x78
 8005e80:	2100      	movs	r1, #0
 8005e82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e011      	b.n	8005eac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2220      	movs	r2, #32
 8005e8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2280      	movs	r2, #128	@ 0x80
 8005e92:	2120      	movs	r1, #32
 8005e94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2278      	movs	r2, #120	@ 0x78
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	0018      	movs	r0, r3
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	b010      	add	sp, #64	@ 0x40
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	01ffffff 	.word	0x01ffffff
 8005eb8:	fffffedf 	.word	0xfffffedf

08005ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	603b      	str	r3, [r7, #0]
 8005ec8:	1dfb      	adds	r3, r7, #7
 8005eca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ecc:	e04b      	b.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	d048      	beq.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ed4:	f7fc fa34 	bl	8002340 <HAL_GetTick>
 8005ed8:	0002      	movs	r2, r0
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e04b      	b.n	8005f86 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2204      	movs	r2, #4
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d035      	beq.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	2208      	movs	r2, #8
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b08      	cmp	r3, #8
 8005f06:	d111      	bne.n	8005f2c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	0018      	movs	r0, r3
 8005f14:	f000 f83c 	bl	8005f90 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2284      	movs	r2, #132	@ 0x84
 8005f1c:	2108      	movs	r1, #8
 8005f1e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2278      	movs	r2, #120	@ 0x78
 8005f24:	2100      	movs	r1, #0
 8005f26:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e02c      	b.n	8005f86 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69da      	ldr	r2, [r3, #28]
 8005f32:	2380      	movs	r3, #128	@ 0x80
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	401a      	ands	r2, r3
 8005f38:	2380      	movs	r3, #128	@ 0x80
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d112      	bne.n	8005f66 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2280      	movs	r2, #128	@ 0x80
 8005f46:	0112      	lsls	r2, r2, #4
 8005f48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	0018      	movs	r0, r3
 8005f4e:	f000 f81f 	bl	8005f90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2284      	movs	r2, #132	@ 0x84
 8005f56:	2120      	movs	r1, #32
 8005f58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2278      	movs	r2, #120	@ 0x78
 8005f5e:	2100      	movs	r1, #0
 8005f60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e00f      	b.n	8005f86 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	425a      	negs	r2, r3
 8005f76:	4153      	adcs	r3, r2
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	001a      	movs	r2, r3
 8005f7c:	1dfb      	adds	r3, r7, #7
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d0a4      	beq.n	8005ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	0018      	movs	r0, r3
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	b004      	add	sp, #16
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b08e      	sub	sp, #56	@ 0x38
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f98:	f3ef 8310 	mrs	r3, PRIMASK
 8005f9c:	617b      	str	r3, [r7, #20]
  return(result);
 8005f9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	f383 8810 	msr	PRIMASK, r3
}
 8005fac:	46c0      	nop			@ (mov r8, r8)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4926      	ldr	r1, [pc, #152]	@ (8006054 <UART_EndRxTransfer+0xc4>)
 8005fba:	400a      	ands	r2, r1
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f383 8810 	msr	PRIMASK, r3
}
 8005fc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fca:	f3ef 8310 	mrs	r3, PRIMASK
 8005fce:	623b      	str	r3, [r7, #32]
  return(result);
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fda:	f383 8810 	msr	PRIMASK, r3
}
 8005fde:	46c0      	nop			@ (mov r8, r8)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689a      	ldr	r2, [r3, #8]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2101      	movs	r1, #1
 8005fec:	438a      	bics	r2, r1
 8005fee:	609a      	str	r2, [r3, #8]
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	f383 8810 	msr	PRIMASK, r3
}
 8005ffa:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006000:	2b01      	cmp	r3, #1
 8006002:	d118      	bne.n	8006036 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006004:	f3ef 8310 	mrs	r3, PRIMASK
 8006008:	60bb      	str	r3, [r7, #8]
  return(result);
 800600a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800600c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800600e:	2301      	movs	r3, #1
 8006010:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f383 8810 	msr	PRIMASK, r3
}
 8006018:	46c0      	nop			@ (mov r8, r8)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2110      	movs	r1, #16
 8006026:	438a      	bics	r2, r1
 8006028:	601a      	str	r2, [r3, #0]
 800602a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f383 8810 	msr	PRIMASK, r3
}
 8006034:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2280      	movs	r2, #128	@ 0x80
 800603a:	2120      	movs	r1, #32
 800603c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	46bd      	mov	sp, r7
 800604e:	b00e      	add	sp, #56	@ 0x38
 8006050:	bd80      	pop	{r7, pc}
 8006052:	46c0      	nop			@ (mov r8, r8)
 8006054:	fffffedf 	.word	0xfffffedf

08006058 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006064:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	225a      	movs	r2, #90	@ 0x5a
 800606a:	2100      	movs	r1, #0
 800606c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2252      	movs	r2, #82	@ 0x52
 8006072:	2100      	movs	r1, #0
 8006074:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	0018      	movs	r0, r3
 800607a:	f7ff fb11 	bl	80056a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800607e:	46c0      	nop			@ (mov r8, r8)
 8006080:	46bd      	mov	sp, r7
 8006082:	b004      	add	sp, #16
 8006084:	bd80      	pop	{r7, pc}

08006086 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b086      	sub	sp, #24
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800608e:	f3ef 8310 	mrs	r3, PRIMASK
 8006092:	60bb      	str	r3, [r7, #8]
  return(result);
 8006094:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	2301      	movs	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f383 8810 	msr	PRIMASK, r3
}
 80060a2:	46c0      	nop			@ (mov r8, r8)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2140      	movs	r1, #64	@ 0x40
 80060b0:	438a      	bics	r2, r1
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f383 8810 	msr	PRIMASK, r3
}
 80060be:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2220      	movs	r2, #32
 80060c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	0018      	movs	r0, r3
 80060d0:	f7ff fade 	bl	8005690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060d4:	46c0      	nop			@ (mov r8, r8)
 80060d6:	46bd      	mov	sp, r7
 80060d8:	b006      	add	sp, #24
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060e4:	46c0      	nop			@ (mov r8, r8)
 80060e6:	46bd      	mov	sp, r7
 80060e8:	b002      	add	sp, #8
 80060ea:	bd80      	pop	{r7, pc}

080060ec <std>:
 80060ec:	2300      	movs	r3, #0
 80060ee:	b510      	push	{r4, lr}
 80060f0:	0004      	movs	r4, r0
 80060f2:	6003      	str	r3, [r0, #0]
 80060f4:	6043      	str	r3, [r0, #4]
 80060f6:	6083      	str	r3, [r0, #8]
 80060f8:	8181      	strh	r1, [r0, #12]
 80060fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80060fc:	81c2      	strh	r2, [r0, #14]
 80060fe:	6103      	str	r3, [r0, #16]
 8006100:	6143      	str	r3, [r0, #20]
 8006102:	6183      	str	r3, [r0, #24]
 8006104:	0019      	movs	r1, r3
 8006106:	2208      	movs	r2, #8
 8006108:	305c      	adds	r0, #92	@ 0x5c
 800610a:	f000 fac5 	bl	8006698 <memset>
 800610e:	4b0b      	ldr	r3, [pc, #44]	@ (800613c <std+0x50>)
 8006110:	6224      	str	r4, [r4, #32]
 8006112:	6263      	str	r3, [r4, #36]	@ 0x24
 8006114:	4b0a      	ldr	r3, [pc, #40]	@ (8006140 <std+0x54>)
 8006116:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006118:	4b0a      	ldr	r3, [pc, #40]	@ (8006144 <std+0x58>)
 800611a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800611c:	4b0a      	ldr	r3, [pc, #40]	@ (8006148 <std+0x5c>)
 800611e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006120:	4b0a      	ldr	r3, [pc, #40]	@ (800614c <std+0x60>)
 8006122:	429c      	cmp	r4, r3
 8006124:	d005      	beq.n	8006132 <std+0x46>
 8006126:	4b0a      	ldr	r3, [pc, #40]	@ (8006150 <std+0x64>)
 8006128:	429c      	cmp	r4, r3
 800612a:	d002      	beq.n	8006132 <std+0x46>
 800612c:	4b09      	ldr	r3, [pc, #36]	@ (8006154 <std+0x68>)
 800612e:	429c      	cmp	r4, r3
 8006130:	d103      	bne.n	800613a <std+0x4e>
 8006132:	0020      	movs	r0, r4
 8006134:	3058      	adds	r0, #88	@ 0x58
 8006136:	f000 fb2f 	bl	8006798 <__retarget_lock_init_recursive>
 800613a:	bd10      	pop	{r4, pc}
 800613c:	080064c1 	.word	0x080064c1
 8006140:	080064e9 	.word	0x080064e9
 8006144:	08006521 	.word	0x08006521
 8006148:	0800654d 	.word	0x0800654d
 800614c:	200001bc 	.word	0x200001bc
 8006150:	20000224 	.word	0x20000224
 8006154:	2000028c 	.word	0x2000028c

08006158 <stdio_exit_handler>:
 8006158:	b510      	push	{r4, lr}
 800615a:	4a03      	ldr	r2, [pc, #12]	@ (8006168 <stdio_exit_handler+0x10>)
 800615c:	4903      	ldr	r1, [pc, #12]	@ (800616c <stdio_exit_handler+0x14>)
 800615e:	4804      	ldr	r0, [pc, #16]	@ (8006170 <stdio_exit_handler+0x18>)
 8006160:	f000 f86c 	bl	800623c <_fwalk_sglue>
 8006164:	bd10      	pop	{r4, pc}
 8006166:	46c0      	nop			@ (mov r8, r8)
 8006168:	2000000c 	.word	0x2000000c
 800616c:	0800703d 	.word	0x0800703d
 8006170:	2000001c 	.word	0x2000001c

08006174 <cleanup_stdio>:
 8006174:	6841      	ldr	r1, [r0, #4]
 8006176:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <cleanup_stdio+0x30>)
 8006178:	b510      	push	{r4, lr}
 800617a:	0004      	movs	r4, r0
 800617c:	4299      	cmp	r1, r3
 800617e:	d001      	beq.n	8006184 <cleanup_stdio+0x10>
 8006180:	f000 ff5c 	bl	800703c <_fflush_r>
 8006184:	68a1      	ldr	r1, [r4, #8]
 8006186:	4b08      	ldr	r3, [pc, #32]	@ (80061a8 <cleanup_stdio+0x34>)
 8006188:	4299      	cmp	r1, r3
 800618a:	d002      	beq.n	8006192 <cleanup_stdio+0x1e>
 800618c:	0020      	movs	r0, r4
 800618e:	f000 ff55 	bl	800703c <_fflush_r>
 8006192:	68e1      	ldr	r1, [r4, #12]
 8006194:	4b05      	ldr	r3, [pc, #20]	@ (80061ac <cleanup_stdio+0x38>)
 8006196:	4299      	cmp	r1, r3
 8006198:	d002      	beq.n	80061a0 <cleanup_stdio+0x2c>
 800619a:	0020      	movs	r0, r4
 800619c:	f000 ff4e 	bl	800703c <_fflush_r>
 80061a0:	bd10      	pop	{r4, pc}
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	200001bc 	.word	0x200001bc
 80061a8:	20000224 	.word	0x20000224
 80061ac:	2000028c 	.word	0x2000028c

080061b0 <global_stdio_init.part.0>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	4b09      	ldr	r3, [pc, #36]	@ (80061d8 <global_stdio_init.part.0+0x28>)
 80061b4:	4a09      	ldr	r2, [pc, #36]	@ (80061dc <global_stdio_init.part.0+0x2c>)
 80061b6:	2104      	movs	r1, #4
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	4809      	ldr	r0, [pc, #36]	@ (80061e0 <global_stdio_init.part.0+0x30>)
 80061bc:	2200      	movs	r2, #0
 80061be:	f7ff ff95 	bl	80060ec <std>
 80061c2:	2201      	movs	r2, #1
 80061c4:	2109      	movs	r1, #9
 80061c6:	4807      	ldr	r0, [pc, #28]	@ (80061e4 <global_stdio_init.part.0+0x34>)
 80061c8:	f7ff ff90 	bl	80060ec <std>
 80061cc:	2202      	movs	r2, #2
 80061ce:	2112      	movs	r1, #18
 80061d0:	4805      	ldr	r0, [pc, #20]	@ (80061e8 <global_stdio_init.part.0+0x38>)
 80061d2:	f7ff ff8b 	bl	80060ec <std>
 80061d6:	bd10      	pop	{r4, pc}
 80061d8:	200002f4 	.word	0x200002f4
 80061dc:	08006159 	.word	0x08006159
 80061e0:	200001bc 	.word	0x200001bc
 80061e4:	20000224 	.word	0x20000224
 80061e8:	2000028c 	.word	0x2000028c

080061ec <__sfp_lock_acquire>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	4802      	ldr	r0, [pc, #8]	@ (80061f8 <__sfp_lock_acquire+0xc>)
 80061f0:	f000 fad3 	bl	800679a <__retarget_lock_acquire_recursive>
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	46c0      	nop			@ (mov r8, r8)
 80061f8:	200002fd 	.word	0x200002fd

080061fc <__sfp_lock_release>:
 80061fc:	b510      	push	{r4, lr}
 80061fe:	4802      	ldr	r0, [pc, #8]	@ (8006208 <__sfp_lock_release+0xc>)
 8006200:	f000 facc 	bl	800679c <__retarget_lock_release_recursive>
 8006204:	bd10      	pop	{r4, pc}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	200002fd 	.word	0x200002fd

0800620c <__sinit>:
 800620c:	b510      	push	{r4, lr}
 800620e:	0004      	movs	r4, r0
 8006210:	f7ff ffec 	bl	80061ec <__sfp_lock_acquire>
 8006214:	6a23      	ldr	r3, [r4, #32]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <__sinit+0x14>
 800621a:	f7ff ffef 	bl	80061fc <__sfp_lock_release>
 800621e:	bd10      	pop	{r4, pc}
 8006220:	4b04      	ldr	r3, [pc, #16]	@ (8006234 <__sinit+0x28>)
 8006222:	6223      	str	r3, [r4, #32]
 8006224:	4b04      	ldr	r3, [pc, #16]	@ (8006238 <__sinit+0x2c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1f6      	bne.n	800621a <__sinit+0xe>
 800622c:	f7ff ffc0 	bl	80061b0 <global_stdio_init.part.0>
 8006230:	e7f3      	b.n	800621a <__sinit+0xe>
 8006232:	46c0      	nop			@ (mov r8, r8)
 8006234:	08006175 	.word	0x08006175
 8006238:	200002f4 	.word	0x200002f4

0800623c <_fwalk_sglue>:
 800623c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800623e:	0014      	movs	r4, r2
 8006240:	2600      	movs	r6, #0
 8006242:	9000      	str	r0, [sp, #0]
 8006244:	9101      	str	r1, [sp, #4]
 8006246:	68a5      	ldr	r5, [r4, #8]
 8006248:	6867      	ldr	r7, [r4, #4]
 800624a:	3f01      	subs	r7, #1
 800624c:	d504      	bpl.n	8006258 <_fwalk_sglue+0x1c>
 800624e:	6824      	ldr	r4, [r4, #0]
 8006250:	2c00      	cmp	r4, #0
 8006252:	d1f8      	bne.n	8006246 <_fwalk_sglue+0xa>
 8006254:	0030      	movs	r0, r6
 8006256:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006258:	89ab      	ldrh	r3, [r5, #12]
 800625a:	2b01      	cmp	r3, #1
 800625c:	d908      	bls.n	8006270 <_fwalk_sglue+0x34>
 800625e:	220e      	movs	r2, #14
 8006260:	5eab      	ldrsh	r3, [r5, r2]
 8006262:	3301      	adds	r3, #1
 8006264:	d004      	beq.n	8006270 <_fwalk_sglue+0x34>
 8006266:	0029      	movs	r1, r5
 8006268:	9800      	ldr	r0, [sp, #0]
 800626a:	9b01      	ldr	r3, [sp, #4]
 800626c:	4798      	blx	r3
 800626e:	4306      	orrs	r6, r0
 8006270:	3568      	adds	r5, #104	@ 0x68
 8006272:	e7ea      	b.n	800624a <_fwalk_sglue+0xe>

08006274 <iprintf>:
 8006274:	b40f      	push	{r0, r1, r2, r3}
 8006276:	b507      	push	{r0, r1, r2, lr}
 8006278:	4905      	ldr	r1, [pc, #20]	@ (8006290 <iprintf+0x1c>)
 800627a:	ab04      	add	r3, sp, #16
 800627c:	6808      	ldr	r0, [r1, #0]
 800627e:	cb04      	ldmia	r3!, {r2}
 8006280:	6881      	ldr	r1, [r0, #8]
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	f000 fbba 	bl	80069fc <_vfiprintf_r>
 8006288:	b003      	add	sp, #12
 800628a:	bc08      	pop	{r3}
 800628c:	b004      	add	sp, #16
 800628e:	4718      	bx	r3
 8006290:	20000018 	.word	0x20000018

08006294 <_puts_r>:
 8006294:	6a03      	ldr	r3, [r0, #32]
 8006296:	b570      	push	{r4, r5, r6, lr}
 8006298:	0005      	movs	r5, r0
 800629a:	000e      	movs	r6, r1
 800629c:	6884      	ldr	r4, [r0, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <_puts_r+0x12>
 80062a2:	f7ff ffb3 	bl	800620c <__sinit>
 80062a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062a8:	07db      	lsls	r3, r3, #31
 80062aa:	d405      	bmi.n	80062b8 <_puts_r+0x24>
 80062ac:	89a3      	ldrh	r3, [r4, #12]
 80062ae:	059b      	lsls	r3, r3, #22
 80062b0:	d402      	bmi.n	80062b8 <_puts_r+0x24>
 80062b2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062b4:	f000 fa71 	bl	800679a <__retarget_lock_acquire_recursive>
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	071b      	lsls	r3, r3, #28
 80062bc:	d502      	bpl.n	80062c4 <_puts_r+0x30>
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d11f      	bne.n	8006304 <_puts_r+0x70>
 80062c4:	0021      	movs	r1, r4
 80062c6:	0028      	movs	r0, r5
 80062c8:	f000 f988 	bl	80065dc <__swsetup_r>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d019      	beq.n	8006304 <_puts_r+0x70>
 80062d0:	2501      	movs	r5, #1
 80062d2:	426d      	negs	r5, r5
 80062d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062d6:	07db      	lsls	r3, r3, #31
 80062d8:	d405      	bmi.n	80062e6 <_puts_r+0x52>
 80062da:	89a3      	ldrh	r3, [r4, #12]
 80062dc:	059b      	lsls	r3, r3, #22
 80062de:	d402      	bmi.n	80062e6 <_puts_r+0x52>
 80062e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062e2:	f000 fa5b 	bl	800679c <__retarget_lock_release_recursive>
 80062e6:	0028      	movs	r0, r5
 80062e8:	bd70      	pop	{r4, r5, r6, pc}
 80062ea:	3601      	adds	r6, #1
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da04      	bge.n	80062fc <_puts_r+0x68>
 80062f2:	69a2      	ldr	r2, [r4, #24]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	dc16      	bgt.n	8006326 <_puts_r+0x92>
 80062f8:	290a      	cmp	r1, #10
 80062fa:	d014      	beq.n	8006326 <_puts_r+0x92>
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	7019      	strb	r1, [r3, #0]
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	7831      	ldrb	r1, [r6, #0]
 8006308:	3b01      	subs	r3, #1
 800630a:	2900      	cmp	r1, #0
 800630c:	d1ed      	bne.n	80062ea <_puts_r+0x56>
 800630e:	60a3      	str	r3, [r4, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	da0f      	bge.n	8006334 <_puts_r+0xa0>
 8006314:	0022      	movs	r2, r4
 8006316:	0028      	movs	r0, r5
 8006318:	310a      	adds	r1, #10
 800631a:	f000 f91d 	bl	8006558 <__swbuf_r>
 800631e:	3001      	adds	r0, #1
 8006320:	d0d6      	beq.n	80062d0 <_puts_r+0x3c>
 8006322:	250a      	movs	r5, #10
 8006324:	e7d6      	b.n	80062d4 <_puts_r+0x40>
 8006326:	0022      	movs	r2, r4
 8006328:	0028      	movs	r0, r5
 800632a:	f000 f915 	bl	8006558 <__swbuf_r>
 800632e:	3001      	adds	r0, #1
 8006330:	d1e8      	bne.n	8006304 <_puts_r+0x70>
 8006332:	e7cd      	b.n	80062d0 <_puts_r+0x3c>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	1c5a      	adds	r2, r3, #1
 8006338:	6022      	str	r2, [r4, #0]
 800633a:	220a      	movs	r2, #10
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	e7f0      	b.n	8006322 <_puts_r+0x8e>

08006340 <puts>:
 8006340:	b510      	push	{r4, lr}
 8006342:	4b03      	ldr	r3, [pc, #12]	@ (8006350 <puts+0x10>)
 8006344:	0001      	movs	r1, r0
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	f7ff ffa4 	bl	8006294 <_puts_r>
 800634c:	bd10      	pop	{r4, pc}
 800634e:	46c0      	nop			@ (mov r8, r8)
 8006350:	20000018 	.word	0x20000018

08006354 <setvbuf>:
 8006354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006356:	001d      	movs	r5, r3
 8006358:	4b57      	ldr	r3, [pc, #348]	@ (80064b8 <setvbuf+0x164>)
 800635a:	b085      	sub	sp, #20
 800635c:	681e      	ldr	r6, [r3, #0]
 800635e:	0004      	movs	r4, r0
 8006360:	000f      	movs	r7, r1
 8006362:	9200      	str	r2, [sp, #0]
 8006364:	2e00      	cmp	r6, #0
 8006366:	d005      	beq.n	8006374 <setvbuf+0x20>
 8006368:	6a33      	ldr	r3, [r6, #32]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d102      	bne.n	8006374 <setvbuf+0x20>
 800636e:	0030      	movs	r0, r6
 8006370:	f7ff ff4c 	bl	800620c <__sinit>
 8006374:	9b00      	ldr	r3, [sp, #0]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d005      	beq.n	8006386 <setvbuf+0x32>
 800637a:	2b01      	cmp	r3, #1
 800637c:	d900      	bls.n	8006380 <setvbuf+0x2c>
 800637e:	e097      	b.n	80064b0 <setvbuf+0x15c>
 8006380:	2d00      	cmp	r5, #0
 8006382:	da00      	bge.n	8006386 <setvbuf+0x32>
 8006384:	e094      	b.n	80064b0 <setvbuf+0x15c>
 8006386:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006388:	07db      	lsls	r3, r3, #31
 800638a:	d405      	bmi.n	8006398 <setvbuf+0x44>
 800638c:	89a3      	ldrh	r3, [r4, #12]
 800638e:	059b      	lsls	r3, r3, #22
 8006390:	d402      	bmi.n	8006398 <setvbuf+0x44>
 8006392:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006394:	f000 fa01 	bl	800679a <__retarget_lock_acquire_recursive>
 8006398:	0021      	movs	r1, r4
 800639a:	0030      	movs	r0, r6
 800639c:	f000 fe4e 	bl	800703c <_fflush_r>
 80063a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063a2:	2900      	cmp	r1, #0
 80063a4:	d008      	beq.n	80063b8 <setvbuf+0x64>
 80063a6:	0023      	movs	r3, r4
 80063a8:	3344      	adds	r3, #68	@ 0x44
 80063aa:	4299      	cmp	r1, r3
 80063ac:	d002      	beq.n	80063b4 <setvbuf+0x60>
 80063ae:	0030      	movs	r0, r6
 80063b0:	f000 f9f6 	bl	80067a0 <_free_r>
 80063b4:	2300      	movs	r3, #0
 80063b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80063b8:	2300      	movs	r3, #0
 80063ba:	61a3      	str	r3, [r4, #24]
 80063bc:	6063      	str	r3, [r4, #4]
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	061b      	lsls	r3, r3, #24
 80063c2:	d503      	bpl.n	80063cc <setvbuf+0x78>
 80063c4:	0030      	movs	r0, r6
 80063c6:	6921      	ldr	r1, [r4, #16]
 80063c8:	f000 f9ea 	bl	80067a0 <_free_r>
 80063cc:	89a3      	ldrh	r3, [r4, #12]
 80063ce:	4a3b      	ldr	r2, [pc, #236]	@ (80064bc <setvbuf+0x168>)
 80063d0:	4013      	ands	r3, r2
 80063d2:	81a3      	strh	r3, [r4, #12]
 80063d4:	9b00      	ldr	r3, [sp, #0]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d060      	beq.n	800649c <setvbuf+0x148>
 80063da:	ab03      	add	r3, sp, #12
 80063dc:	0021      	movs	r1, r4
 80063de:	0030      	movs	r0, r6
 80063e0:	aa02      	add	r2, sp, #8
 80063e2:	f000 fe57 	bl	8007094 <__swhatbuf_r>
 80063e6:	89a3      	ldrh	r3, [r4, #12]
 80063e8:	4303      	orrs	r3, r0
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	2d00      	cmp	r5, #0
 80063ee:	d124      	bne.n	800643a <setvbuf+0xe6>
 80063f0:	9d02      	ldr	r5, [sp, #8]
 80063f2:	0028      	movs	r0, r5
 80063f4:	f000 fa1e 	bl	8006834 <malloc>
 80063f8:	9501      	str	r5, [sp, #4]
 80063fa:	1e07      	subs	r7, r0, #0
 80063fc:	d148      	bne.n	8006490 <setvbuf+0x13c>
 80063fe:	9b02      	ldr	r3, [sp, #8]
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	42ab      	cmp	r3, r5
 8006404:	d13f      	bne.n	8006486 <setvbuf+0x132>
 8006406:	2501      	movs	r5, #1
 8006408:	426d      	negs	r5, r5
 800640a:	220c      	movs	r2, #12
 800640c:	5ea3      	ldrsh	r3, [r4, r2]
 800640e:	2202      	movs	r2, #2
 8006410:	431a      	orrs	r2, r3
 8006412:	81a2      	strh	r2, [r4, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	60a2      	str	r2, [r4, #8]
 8006418:	0022      	movs	r2, r4
 800641a:	3247      	adds	r2, #71	@ 0x47
 800641c:	6022      	str	r2, [r4, #0]
 800641e:	6122      	str	r2, [r4, #16]
 8006420:	2201      	movs	r2, #1
 8006422:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8006424:	6162      	str	r2, [r4, #20]
 8006426:	4211      	tst	r1, r2
 8006428:	d104      	bne.n	8006434 <setvbuf+0xe0>
 800642a:	059b      	lsls	r3, r3, #22
 800642c:	d402      	bmi.n	8006434 <setvbuf+0xe0>
 800642e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006430:	f000 f9b4 	bl	800679c <__retarget_lock_release_recursive>
 8006434:	0028      	movs	r0, r5
 8006436:	b005      	add	sp, #20
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643a:	2f00      	cmp	r7, #0
 800643c:	d0d9      	beq.n	80063f2 <setvbuf+0x9e>
 800643e:	6a33      	ldr	r3, [r6, #32]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <setvbuf+0xf6>
 8006444:	0030      	movs	r0, r6
 8006446:	f7ff fee1 	bl	800620c <__sinit>
 800644a:	9b00      	ldr	r3, [sp, #0]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d103      	bne.n	8006458 <setvbuf+0x104>
 8006450:	89a3      	ldrh	r3, [r4, #12]
 8006452:	9a00      	ldr	r2, [sp, #0]
 8006454:	431a      	orrs	r2, r3
 8006456:	81a2      	strh	r2, [r4, #12]
 8006458:	220c      	movs	r2, #12
 800645a:	5ea3      	ldrsh	r3, [r4, r2]
 800645c:	2208      	movs	r2, #8
 800645e:	0019      	movs	r1, r3
 8006460:	6027      	str	r7, [r4, #0]
 8006462:	6127      	str	r7, [r4, #16]
 8006464:	6165      	str	r5, [r4, #20]
 8006466:	4011      	ands	r1, r2
 8006468:	4213      	tst	r3, r2
 800646a:	d01b      	beq.n	80064a4 <setvbuf+0x150>
 800646c:	07da      	lsls	r2, r3, #31
 800646e:	d517      	bpl.n	80064a0 <setvbuf+0x14c>
 8006470:	2200      	movs	r2, #0
 8006472:	426d      	negs	r5, r5
 8006474:	60a2      	str	r2, [r4, #8]
 8006476:	61a5      	str	r5, [r4, #24]
 8006478:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800647a:	07d2      	lsls	r2, r2, #31
 800647c:	d401      	bmi.n	8006482 <setvbuf+0x12e>
 800647e:	059b      	lsls	r3, r3, #22
 8006480:	d512      	bpl.n	80064a8 <setvbuf+0x154>
 8006482:	2500      	movs	r5, #0
 8006484:	e7d6      	b.n	8006434 <setvbuf+0xe0>
 8006486:	9801      	ldr	r0, [sp, #4]
 8006488:	f000 f9d4 	bl	8006834 <malloc>
 800648c:	1e07      	subs	r7, r0, #0
 800648e:	d0ba      	beq.n	8006406 <setvbuf+0xb2>
 8006490:	2380      	movs	r3, #128	@ 0x80
 8006492:	89a2      	ldrh	r2, [r4, #12]
 8006494:	9d01      	ldr	r5, [sp, #4]
 8006496:	4313      	orrs	r3, r2
 8006498:	81a3      	strh	r3, [r4, #12]
 800649a:	e7d0      	b.n	800643e <setvbuf+0xea>
 800649c:	2500      	movs	r5, #0
 800649e:	e7b4      	b.n	800640a <setvbuf+0xb6>
 80064a0:	60a5      	str	r5, [r4, #8]
 80064a2:	e7e9      	b.n	8006478 <setvbuf+0x124>
 80064a4:	60a1      	str	r1, [r4, #8]
 80064a6:	e7e7      	b.n	8006478 <setvbuf+0x124>
 80064a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064aa:	f000 f977 	bl	800679c <__retarget_lock_release_recursive>
 80064ae:	e7e8      	b.n	8006482 <setvbuf+0x12e>
 80064b0:	2501      	movs	r5, #1
 80064b2:	426d      	negs	r5, r5
 80064b4:	e7be      	b.n	8006434 <setvbuf+0xe0>
 80064b6:	46c0      	nop			@ (mov r8, r8)
 80064b8:	20000018 	.word	0x20000018
 80064bc:	fffff35c 	.word	0xfffff35c

080064c0 <__sread>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	000c      	movs	r4, r1
 80064c4:	250e      	movs	r5, #14
 80064c6:	5f49      	ldrsh	r1, [r1, r5]
 80064c8:	f000 f914 	bl	80066f4 <_read_r>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	db03      	blt.n	80064d8 <__sread+0x18>
 80064d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80064d2:	181b      	adds	r3, r3, r0
 80064d4:	6563      	str	r3, [r4, #84]	@ 0x54
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	4a02      	ldr	r2, [pc, #8]	@ (80064e4 <__sread+0x24>)
 80064dc:	4013      	ands	r3, r2
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	e7f9      	b.n	80064d6 <__sread+0x16>
 80064e2:	46c0      	nop			@ (mov r8, r8)
 80064e4:	ffffefff 	.word	0xffffefff

080064e8 <__swrite>:
 80064e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ea:	001f      	movs	r7, r3
 80064ec:	898b      	ldrh	r3, [r1, #12]
 80064ee:	0005      	movs	r5, r0
 80064f0:	000c      	movs	r4, r1
 80064f2:	0016      	movs	r6, r2
 80064f4:	05db      	lsls	r3, r3, #23
 80064f6:	d505      	bpl.n	8006504 <__swrite+0x1c>
 80064f8:	230e      	movs	r3, #14
 80064fa:	5ec9      	ldrsh	r1, [r1, r3]
 80064fc:	2200      	movs	r2, #0
 80064fe:	2302      	movs	r3, #2
 8006500:	f000 f8e4 	bl	80066cc <_lseek_r>
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	4a05      	ldr	r2, [pc, #20]	@ (800651c <__swrite+0x34>)
 8006508:	0028      	movs	r0, r5
 800650a:	4013      	ands	r3, r2
 800650c:	81a3      	strh	r3, [r4, #12]
 800650e:	0032      	movs	r2, r6
 8006510:	230e      	movs	r3, #14
 8006512:	5ee1      	ldrsh	r1, [r4, r3]
 8006514:	003b      	movs	r3, r7
 8006516:	f000 f901 	bl	800671c <_write_r>
 800651a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800651c:	ffffefff 	.word	0xffffefff

08006520 <__sseek>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	000c      	movs	r4, r1
 8006524:	250e      	movs	r5, #14
 8006526:	5f49      	ldrsh	r1, [r1, r5]
 8006528:	f000 f8d0 	bl	80066cc <_lseek_r>
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	1c42      	adds	r2, r0, #1
 8006530:	d103      	bne.n	800653a <__sseek+0x1a>
 8006532:	4a05      	ldr	r2, [pc, #20]	@ (8006548 <__sseek+0x28>)
 8006534:	4013      	ands	r3, r2
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	bd70      	pop	{r4, r5, r6, pc}
 800653a:	2280      	movs	r2, #128	@ 0x80
 800653c:	0152      	lsls	r2, r2, #5
 800653e:	4313      	orrs	r3, r2
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	6560      	str	r0, [r4, #84]	@ 0x54
 8006544:	e7f8      	b.n	8006538 <__sseek+0x18>
 8006546:	46c0      	nop			@ (mov r8, r8)
 8006548:	ffffefff 	.word	0xffffefff

0800654c <__sclose>:
 800654c:	b510      	push	{r4, lr}
 800654e:	230e      	movs	r3, #14
 8006550:	5ec9      	ldrsh	r1, [r1, r3]
 8006552:	f000 f8a9 	bl	80066a8 <_close_r>
 8006556:	bd10      	pop	{r4, pc}

08006558 <__swbuf_r>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	0006      	movs	r6, r0
 800655c:	000d      	movs	r5, r1
 800655e:	0014      	movs	r4, r2
 8006560:	2800      	cmp	r0, #0
 8006562:	d004      	beq.n	800656e <__swbuf_r+0x16>
 8006564:	6a03      	ldr	r3, [r0, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <__swbuf_r+0x16>
 800656a:	f7ff fe4f 	bl	800620c <__sinit>
 800656e:	69a3      	ldr	r3, [r4, #24]
 8006570:	60a3      	str	r3, [r4, #8]
 8006572:	89a3      	ldrh	r3, [r4, #12]
 8006574:	071b      	lsls	r3, r3, #28
 8006576:	d502      	bpl.n	800657e <__swbuf_r+0x26>
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d109      	bne.n	8006592 <__swbuf_r+0x3a>
 800657e:	0021      	movs	r1, r4
 8006580:	0030      	movs	r0, r6
 8006582:	f000 f82b 	bl	80065dc <__swsetup_r>
 8006586:	2800      	cmp	r0, #0
 8006588:	d003      	beq.n	8006592 <__swbuf_r+0x3a>
 800658a:	2501      	movs	r5, #1
 800658c:	426d      	negs	r5, r5
 800658e:	0028      	movs	r0, r5
 8006590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	6820      	ldr	r0, [r4, #0]
 8006596:	b2ef      	uxtb	r7, r5
 8006598:	1ac0      	subs	r0, r0, r3
 800659a:	6963      	ldr	r3, [r4, #20]
 800659c:	b2ed      	uxtb	r5, r5
 800659e:	4283      	cmp	r3, r0
 80065a0:	dc05      	bgt.n	80065ae <__swbuf_r+0x56>
 80065a2:	0021      	movs	r1, r4
 80065a4:	0030      	movs	r0, r6
 80065a6:	f000 fd49 	bl	800703c <_fflush_r>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d1ed      	bne.n	800658a <__swbuf_r+0x32>
 80065ae:	68a3      	ldr	r3, [r4, #8]
 80065b0:	3001      	adds	r0, #1
 80065b2:	3b01      	subs	r3, #1
 80065b4:	60a3      	str	r3, [r4, #8]
 80065b6:	6823      	ldr	r3, [r4, #0]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	6022      	str	r2, [r4, #0]
 80065bc:	701f      	strb	r7, [r3, #0]
 80065be:	6963      	ldr	r3, [r4, #20]
 80065c0:	4283      	cmp	r3, r0
 80065c2:	d004      	beq.n	80065ce <__swbuf_r+0x76>
 80065c4:	89a3      	ldrh	r3, [r4, #12]
 80065c6:	07db      	lsls	r3, r3, #31
 80065c8:	d5e1      	bpl.n	800658e <__swbuf_r+0x36>
 80065ca:	2d0a      	cmp	r5, #10
 80065cc:	d1df      	bne.n	800658e <__swbuf_r+0x36>
 80065ce:	0021      	movs	r1, r4
 80065d0:	0030      	movs	r0, r6
 80065d2:	f000 fd33 	bl	800703c <_fflush_r>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	d0d9      	beq.n	800658e <__swbuf_r+0x36>
 80065da:	e7d6      	b.n	800658a <__swbuf_r+0x32>

080065dc <__swsetup_r>:
 80065dc:	4b2d      	ldr	r3, [pc, #180]	@ (8006694 <__swsetup_r+0xb8>)
 80065de:	b570      	push	{r4, r5, r6, lr}
 80065e0:	0005      	movs	r5, r0
 80065e2:	6818      	ldr	r0, [r3, #0]
 80065e4:	000c      	movs	r4, r1
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d004      	beq.n	80065f4 <__swsetup_r+0x18>
 80065ea:	6a03      	ldr	r3, [r0, #32]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <__swsetup_r+0x18>
 80065f0:	f7ff fe0c 	bl	800620c <__sinit>
 80065f4:	230c      	movs	r3, #12
 80065f6:	5ee2      	ldrsh	r2, [r4, r3]
 80065f8:	0713      	lsls	r3, r2, #28
 80065fa:	d423      	bmi.n	8006644 <__swsetup_r+0x68>
 80065fc:	06d3      	lsls	r3, r2, #27
 80065fe:	d407      	bmi.n	8006610 <__swsetup_r+0x34>
 8006600:	2309      	movs	r3, #9
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	2340      	movs	r3, #64	@ 0x40
 8006606:	2001      	movs	r0, #1
 8006608:	4313      	orrs	r3, r2
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	4240      	negs	r0, r0
 800660e:	e03a      	b.n	8006686 <__swsetup_r+0xaa>
 8006610:	0752      	lsls	r2, r2, #29
 8006612:	d513      	bpl.n	800663c <__swsetup_r+0x60>
 8006614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006616:	2900      	cmp	r1, #0
 8006618:	d008      	beq.n	800662c <__swsetup_r+0x50>
 800661a:	0023      	movs	r3, r4
 800661c:	3344      	adds	r3, #68	@ 0x44
 800661e:	4299      	cmp	r1, r3
 8006620:	d002      	beq.n	8006628 <__swsetup_r+0x4c>
 8006622:	0028      	movs	r0, r5
 8006624:	f000 f8bc 	bl	80067a0 <_free_r>
 8006628:	2300      	movs	r3, #0
 800662a:	6363      	str	r3, [r4, #52]	@ 0x34
 800662c:	2224      	movs	r2, #36	@ 0x24
 800662e:	89a3      	ldrh	r3, [r4, #12]
 8006630:	4393      	bics	r3, r2
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	2300      	movs	r3, #0
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	2308      	movs	r3, #8
 800663e:	89a2      	ldrh	r2, [r4, #12]
 8006640:	4313      	orrs	r3, r2
 8006642:	81a3      	strh	r3, [r4, #12]
 8006644:	6923      	ldr	r3, [r4, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <__swsetup_r+0x86>
 800664a:	21a0      	movs	r1, #160	@ 0xa0
 800664c:	2280      	movs	r2, #128	@ 0x80
 800664e:	89a3      	ldrh	r3, [r4, #12]
 8006650:	0089      	lsls	r1, r1, #2
 8006652:	0092      	lsls	r2, r2, #2
 8006654:	400b      	ands	r3, r1
 8006656:	4293      	cmp	r3, r2
 8006658:	d003      	beq.n	8006662 <__swsetup_r+0x86>
 800665a:	0021      	movs	r1, r4
 800665c:	0028      	movs	r0, r5
 800665e:	f000 fd43 	bl	80070e8 <__smakebuf_r>
 8006662:	230c      	movs	r3, #12
 8006664:	5ee2      	ldrsh	r2, [r4, r3]
 8006666:	2101      	movs	r1, #1
 8006668:	0013      	movs	r3, r2
 800666a:	400b      	ands	r3, r1
 800666c:	420a      	tst	r2, r1
 800666e:	d00b      	beq.n	8006688 <__swsetup_r+0xac>
 8006670:	2300      	movs	r3, #0
 8006672:	60a3      	str	r3, [r4, #8]
 8006674:	6963      	ldr	r3, [r4, #20]
 8006676:	425b      	negs	r3, r3
 8006678:	61a3      	str	r3, [r4, #24]
 800667a:	2000      	movs	r0, #0
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	4283      	cmp	r3, r0
 8006680:	d101      	bne.n	8006686 <__swsetup_r+0xaa>
 8006682:	0613      	lsls	r3, r2, #24
 8006684:	d4be      	bmi.n	8006604 <__swsetup_r+0x28>
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	0791      	lsls	r1, r2, #30
 800668a:	d400      	bmi.n	800668e <__swsetup_r+0xb2>
 800668c:	6963      	ldr	r3, [r4, #20]
 800668e:	60a3      	str	r3, [r4, #8]
 8006690:	e7f3      	b.n	800667a <__swsetup_r+0x9e>
 8006692:	46c0      	nop			@ (mov r8, r8)
 8006694:	20000018 	.word	0x20000018

08006698 <memset>:
 8006698:	0003      	movs	r3, r0
 800669a:	1882      	adds	r2, r0, r2
 800669c:	4293      	cmp	r3, r2
 800669e:	d100      	bne.n	80066a2 <memset+0xa>
 80066a0:	4770      	bx	lr
 80066a2:	7019      	strb	r1, [r3, #0]
 80066a4:	3301      	adds	r3, #1
 80066a6:	e7f9      	b.n	800669c <memset+0x4>

080066a8 <_close_r>:
 80066a8:	2300      	movs	r3, #0
 80066aa:	b570      	push	{r4, r5, r6, lr}
 80066ac:	4d06      	ldr	r5, [pc, #24]	@ (80066c8 <_close_r+0x20>)
 80066ae:	0004      	movs	r4, r0
 80066b0:	0008      	movs	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fb fba6 	bl	8001e04 <_close>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d103      	bne.n	80066c4 <_close_r+0x1c>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d000      	beq.n	80066c4 <_close_r+0x1c>
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	bd70      	pop	{r4, r5, r6, pc}
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	200002f8 	.word	0x200002f8

080066cc <_lseek_r>:
 80066cc:	b570      	push	{r4, r5, r6, lr}
 80066ce:	0004      	movs	r4, r0
 80066d0:	0008      	movs	r0, r1
 80066d2:	0011      	movs	r1, r2
 80066d4:	001a      	movs	r2, r3
 80066d6:	2300      	movs	r3, #0
 80066d8:	4d05      	ldr	r5, [pc, #20]	@ (80066f0 <_lseek_r+0x24>)
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	f7fb fba9 	bl	8001e32 <_lseek>
 80066e0:	1c43      	adds	r3, r0, #1
 80066e2:	d103      	bne.n	80066ec <_lseek_r+0x20>
 80066e4:	682b      	ldr	r3, [r5, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d000      	beq.n	80066ec <_lseek_r+0x20>
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
 80066ee:	46c0      	nop			@ (mov r8, r8)
 80066f0:	200002f8 	.word	0x200002f8

080066f4 <_read_r>:
 80066f4:	b570      	push	{r4, r5, r6, lr}
 80066f6:	0004      	movs	r4, r0
 80066f8:	0008      	movs	r0, r1
 80066fa:	0011      	movs	r1, r2
 80066fc:	001a      	movs	r2, r3
 80066fe:	2300      	movs	r3, #0
 8006700:	4d05      	ldr	r5, [pc, #20]	@ (8006718 <_read_r+0x24>)
 8006702:	602b      	str	r3, [r5, #0]
 8006704:	f7fb fba6 	bl	8001e54 <_read>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	d103      	bne.n	8006714 <_read_r+0x20>
 800670c:	682b      	ldr	r3, [r5, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d000      	beq.n	8006714 <_read_r+0x20>
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	bd70      	pop	{r4, r5, r6, pc}
 8006716:	46c0      	nop			@ (mov r8, r8)
 8006718:	200002f8 	.word	0x200002f8

0800671c <_write_r>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	0004      	movs	r4, r0
 8006720:	0008      	movs	r0, r1
 8006722:	0011      	movs	r1, r2
 8006724:	001a      	movs	r2, r3
 8006726:	2300      	movs	r3, #0
 8006728:	4d05      	ldr	r5, [pc, #20]	@ (8006740 <_write_r+0x24>)
 800672a:	602b      	str	r3, [r5, #0]
 800672c:	f7fb fb3c 	bl	8001da8 <_write>
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d103      	bne.n	800673c <_write_r+0x20>
 8006734:	682b      	ldr	r3, [r5, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d000      	beq.n	800673c <_write_r+0x20>
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	bd70      	pop	{r4, r5, r6, pc}
 800673e:	46c0      	nop			@ (mov r8, r8)
 8006740:	200002f8 	.word	0x200002f8

08006744 <__errno>:
 8006744:	4b01      	ldr	r3, [pc, #4]	@ (800674c <__errno+0x8>)
 8006746:	6818      	ldr	r0, [r3, #0]
 8006748:	4770      	bx	lr
 800674a:	46c0      	nop			@ (mov r8, r8)
 800674c:	20000018 	.word	0x20000018

08006750 <__libc_init_array>:
 8006750:	b570      	push	{r4, r5, r6, lr}
 8006752:	2600      	movs	r6, #0
 8006754:	4c0c      	ldr	r4, [pc, #48]	@ (8006788 <__libc_init_array+0x38>)
 8006756:	4d0d      	ldr	r5, [pc, #52]	@ (800678c <__libc_init_array+0x3c>)
 8006758:	1b64      	subs	r4, r4, r5
 800675a:	10a4      	asrs	r4, r4, #2
 800675c:	42a6      	cmp	r6, r4
 800675e:	d109      	bne.n	8006774 <__libc_init_array+0x24>
 8006760:	2600      	movs	r6, #0
 8006762:	f000 fd45 	bl	80071f0 <_init>
 8006766:	4c0a      	ldr	r4, [pc, #40]	@ (8006790 <__libc_init_array+0x40>)
 8006768:	4d0a      	ldr	r5, [pc, #40]	@ (8006794 <__libc_init_array+0x44>)
 800676a:	1b64      	subs	r4, r4, r5
 800676c:	10a4      	asrs	r4, r4, #2
 800676e:	42a6      	cmp	r6, r4
 8006770:	d105      	bne.n	800677e <__libc_init_array+0x2e>
 8006772:	bd70      	pop	{r4, r5, r6, pc}
 8006774:	00b3      	lsls	r3, r6, #2
 8006776:	58eb      	ldr	r3, [r5, r3]
 8006778:	4798      	blx	r3
 800677a:	3601      	adds	r6, #1
 800677c:	e7ee      	b.n	800675c <__libc_init_array+0xc>
 800677e:	00b3      	lsls	r3, r6, #2
 8006780:	58eb      	ldr	r3, [r5, r3]
 8006782:	4798      	blx	r3
 8006784:	3601      	adds	r6, #1
 8006786:	e7f2      	b.n	800676e <__libc_init_array+0x1e>
 8006788:	080072d8 	.word	0x080072d8
 800678c:	080072d8 	.word	0x080072d8
 8006790:	080072dc 	.word	0x080072dc
 8006794:	080072d8 	.word	0x080072d8

08006798 <__retarget_lock_init_recursive>:
 8006798:	4770      	bx	lr

0800679a <__retarget_lock_acquire_recursive>:
 800679a:	4770      	bx	lr

0800679c <__retarget_lock_release_recursive>:
 800679c:	4770      	bx	lr
	...

080067a0 <_free_r>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	0005      	movs	r5, r0
 80067a4:	1e0c      	subs	r4, r1, #0
 80067a6:	d010      	beq.n	80067ca <_free_r+0x2a>
 80067a8:	3c04      	subs	r4, #4
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	da00      	bge.n	80067b2 <_free_r+0x12>
 80067b0:	18e4      	adds	r4, r4, r3
 80067b2:	0028      	movs	r0, r5
 80067b4:	f000 f8ea 	bl	800698c <__malloc_lock>
 80067b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006830 <_free_r+0x90>)
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d105      	bne.n	80067cc <_free_r+0x2c>
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	6014      	str	r4, [r2, #0]
 80067c4:	0028      	movs	r0, r5
 80067c6:	f000 f8e9 	bl	800699c <__malloc_unlock>
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	42a3      	cmp	r3, r4
 80067ce:	d908      	bls.n	80067e2 <_free_r+0x42>
 80067d0:	6820      	ldr	r0, [r4, #0]
 80067d2:	1821      	adds	r1, r4, r0
 80067d4:	428b      	cmp	r3, r1
 80067d6:	d1f3      	bne.n	80067c0 <_free_r+0x20>
 80067d8:	6819      	ldr	r1, [r3, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	1809      	adds	r1, r1, r0
 80067de:	6021      	str	r1, [r4, #0]
 80067e0:	e7ee      	b.n	80067c0 <_free_r+0x20>
 80067e2:	001a      	movs	r2, r3
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <_free_r+0x4e>
 80067ea:	42a3      	cmp	r3, r4
 80067ec:	d9f9      	bls.n	80067e2 <_free_r+0x42>
 80067ee:	6811      	ldr	r1, [r2, #0]
 80067f0:	1850      	adds	r0, r2, r1
 80067f2:	42a0      	cmp	r0, r4
 80067f4:	d10b      	bne.n	800680e <_free_r+0x6e>
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	1809      	adds	r1, r1, r0
 80067fa:	1850      	adds	r0, r2, r1
 80067fc:	6011      	str	r1, [r2, #0]
 80067fe:	4283      	cmp	r3, r0
 8006800:	d1e0      	bne.n	80067c4 <_free_r+0x24>
 8006802:	6818      	ldr	r0, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	1841      	adds	r1, r0, r1
 8006808:	6011      	str	r1, [r2, #0]
 800680a:	6053      	str	r3, [r2, #4]
 800680c:	e7da      	b.n	80067c4 <_free_r+0x24>
 800680e:	42a0      	cmp	r0, r4
 8006810:	d902      	bls.n	8006818 <_free_r+0x78>
 8006812:	230c      	movs	r3, #12
 8006814:	602b      	str	r3, [r5, #0]
 8006816:	e7d5      	b.n	80067c4 <_free_r+0x24>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	1821      	adds	r1, r4, r0
 800681c:	428b      	cmp	r3, r1
 800681e:	d103      	bne.n	8006828 <_free_r+0x88>
 8006820:	6819      	ldr	r1, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	1809      	adds	r1, r1, r0
 8006826:	6021      	str	r1, [r4, #0]
 8006828:	6063      	str	r3, [r4, #4]
 800682a:	6054      	str	r4, [r2, #4]
 800682c:	e7ca      	b.n	80067c4 <_free_r+0x24>
 800682e:	46c0      	nop			@ (mov r8, r8)
 8006830:	20000304 	.word	0x20000304

08006834 <malloc>:
 8006834:	b510      	push	{r4, lr}
 8006836:	4b03      	ldr	r3, [pc, #12]	@ (8006844 <malloc+0x10>)
 8006838:	0001      	movs	r1, r0
 800683a:	6818      	ldr	r0, [r3, #0]
 800683c:	f000 f826 	bl	800688c <_malloc_r>
 8006840:	bd10      	pop	{r4, pc}
 8006842:	46c0      	nop			@ (mov r8, r8)
 8006844:	20000018 	.word	0x20000018

08006848 <sbrk_aligned>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4e0f      	ldr	r6, [pc, #60]	@ (8006888 <sbrk_aligned+0x40>)
 800684c:	000d      	movs	r5, r1
 800684e:	6831      	ldr	r1, [r6, #0]
 8006850:	0004      	movs	r4, r0
 8006852:	2900      	cmp	r1, #0
 8006854:	d102      	bne.n	800685c <sbrk_aligned+0x14>
 8006856:	f000 fcad 	bl	80071b4 <_sbrk_r>
 800685a:	6030      	str	r0, [r6, #0]
 800685c:	0029      	movs	r1, r5
 800685e:	0020      	movs	r0, r4
 8006860:	f000 fca8 	bl	80071b4 <_sbrk_r>
 8006864:	1c43      	adds	r3, r0, #1
 8006866:	d103      	bne.n	8006870 <sbrk_aligned+0x28>
 8006868:	2501      	movs	r5, #1
 800686a:	426d      	negs	r5, r5
 800686c:	0028      	movs	r0, r5
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	2303      	movs	r3, #3
 8006872:	1cc5      	adds	r5, r0, #3
 8006874:	439d      	bics	r5, r3
 8006876:	42a8      	cmp	r0, r5
 8006878:	d0f8      	beq.n	800686c <sbrk_aligned+0x24>
 800687a:	1a29      	subs	r1, r5, r0
 800687c:	0020      	movs	r0, r4
 800687e:	f000 fc99 	bl	80071b4 <_sbrk_r>
 8006882:	3001      	adds	r0, #1
 8006884:	d1f2      	bne.n	800686c <sbrk_aligned+0x24>
 8006886:	e7ef      	b.n	8006868 <sbrk_aligned+0x20>
 8006888:	20000300 	.word	0x20000300

0800688c <_malloc_r>:
 800688c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800688e:	2203      	movs	r2, #3
 8006890:	1ccb      	adds	r3, r1, #3
 8006892:	4393      	bics	r3, r2
 8006894:	3308      	adds	r3, #8
 8006896:	0005      	movs	r5, r0
 8006898:	001f      	movs	r7, r3
 800689a:	2b0c      	cmp	r3, #12
 800689c:	d234      	bcs.n	8006908 <_malloc_r+0x7c>
 800689e:	270c      	movs	r7, #12
 80068a0:	42b9      	cmp	r1, r7
 80068a2:	d833      	bhi.n	800690c <_malloc_r+0x80>
 80068a4:	0028      	movs	r0, r5
 80068a6:	f000 f871 	bl	800698c <__malloc_lock>
 80068aa:	4e37      	ldr	r6, [pc, #220]	@ (8006988 <_malloc_r+0xfc>)
 80068ac:	6833      	ldr	r3, [r6, #0]
 80068ae:	001c      	movs	r4, r3
 80068b0:	2c00      	cmp	r4, #0
 80068b2:	d12f      	bne.n	8006914 <_malloc_r+0x88>
 80068b4:	0039      	movs	r1, r7
 80068b6:	0028      	movs	r0, r5
 80068b8:	f7ff ffc6 	bl	8006848 <sbrk_aligned>
 80068bc:	0004      	movs	r4, r0
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d15f      	bne.n	8006982 <_malloc_r+0xf6>
 80068c2:	6834      	ldr	r4, [r6, #0]
 80068c4:	9400      	str	r4, [sp, #0]
 80068c6:	9b00      	ldr	r3, [sp, #0]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d14a      	bne.n	8006962 <_malloc_r+0xd6>
 80068cc:	2c00      	cmp	r4, #0
 80068ce:	d052      	beq.n	8006976 <_malloc_r+0xea>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	0028      	movs	r0, r5
 80068d4:	18e3      	adds	r3, r4, r3
 80068d6:	9900      	ldr	r1, [sp, #0]
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	f000 fc6b 	bl	80071b4 <_sbrk_r>
 80068de:	9b01      	ldr	r3, [sp, #4]
 80068e0:	4283      	cmp	r3, r0
 80068e2:	d148      	bne.n	8006976 <_malloc_r+0xea>
 80068e4:	6823      	ldr	r3, [r4, #0]
 80068e6:	0028      	movs	r0, r5
 80068e8:	1aff      	subs	r7, r7, r3
 80068ea:	0039      	movs	r1, r7
 80068ec:	f7ff ffac 	bl	8006848 <sbrk_aligned>
 80068f0:	3001      	adds	r0, #1
 80068f2:	d040      	beq.n	8006976 <_malloc_r+0xea>
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	19db      	adds	r3, r3, r7
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	6833      	ldr	r3, [r6, #0]
 80068fc:	685a      	ldr	r2, [r3, #4]
 80068fe:	2a00      	cmp	r2, #0
 8006900:	d133      	bne.n	800696a <_malloc_r+0xde>
 8006902:	9b00      	ldr	r3, [sp, #0]
 8006904:	6033      	str	r3, [r6, #0]
 8006906:	e019      	b.n	800693c <_malloc_r+0xb0>
 8006908:	2b00      	cmp	r3, #0
 800690a:	dac9      	bge.n	80068a0 <_malloc_r+0x14>
 800690c:	230c      	movs	r3, #12
 800690e:	602b      	str	r3, [r5, #0]
 8006910:	2000      	movs	r0, #0
 8006912:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006914:	6821      	ldr	r1, [r4, #0]
 8006916:	1bc9      	subs	r1, r1, r7
 8006918:	d420      	bmi.n	800695c <_malloc_r+0xd0>
 800691a:	290b      	cmp	r1, #11
 800691c:	d90a      	bls.n	8006934 <_malloc_r+0xa8>
 800691e:	19e2      	adds	r2, r4, r7
 8006920:	6027      	str	r7, [r4, #0]
 8006922:	42a3      	cmp	r3, r4
 8006924:	d104      	bne.n	8006930 <_malloc_r+0xa4>
 8006926:	6032      	str	r2, [r6, #0]
 8006928:	6863      	ldr	r3, [r4, #4]
 800692a:	6011      	str	r1, [r2, #0]
 800692c:	6053      	str	r3, [r2, #4]
 800692e:	e005      	b.n	800693c <_malloc_r+0xb0>
 8006930:	605a      	str	r2, [r3, #4]
 8006932:	e7f9      	b.n	8006928 <_malloc_r+0x9c>
 8006934:	6862      	ldr	r2, [r4, #4]
 8006936:	42a3      	cmp	r3, r4
 8006938:	d10e      	bne.n	8006958 <_malloc_r+0xcc>
 800693a:	6032      	str	r2, [r6, #0]
 800693c:	0028      	movs	r0, r5
 800693e:	f000 f82d 	bl	800699c <__malloc_unlock>
 8006942:	0020      	movs	r0, r4
 8006944:	2207      	movs	r2, #7
 8006946:	300b      	adds	r0, #11
 8006948:	1d23      	adds	r3, r4, #4
 800694a:	4390      	bics	r0, r2
 800694c:	1ac2      	subs	r2, r0, r3
 800694e:	4298      	cmp	r0, r3
 8006950:	d0df      	beq.n	8006912 <_malloc_r+0x86>
 8006952:	1a1b      	subs	r3, r3, r0
 8006954:	50a3      	str	r3, [r4, r2]
 8006956:	e7dc      	b.n	8006912 <_malloc_r+0x86>
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	e7ef      	b.n	800693c <_malloc_r+0xb0>
 800695c:	0023      	movs	r3, r4
 800695e:	6864      	ldr	r4, [r4, #4]
 8006960:	e7a6      	b.n	80068b0 <_malloc_r+0x24>
 8006962:	9c00      	ldr	r4, [sp, #0]
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	e7ad      	b.n	80068c6 <_malloc_r+0x3a>
 800696a:	001a      	movs	r2, r3
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	42a3      	cmp	r3, r4
 8006970:	d1fb      	bne.n	800696a <_malloc_r+0xde>
 8006972:	2300      	movs	r3, #0
 8006974:	e7da      	b.n	800692c <_malloc_r+0xa0>
 8006976:	230c      	movs	r3, #12
 8006978:	0028      	movs	r0, r5
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	f000 f80e 	bl	800699c <__malloc_unlock>
 8006980:	e7c6      	b.n	8006910 <_malloc_r+0x84>
 8006982:	6007      	str	r7, [r0, #0]
 8006984:	e7da      	b.n	800693c <_malloc_r+0xb0>
 8006986:	46c0      	nop			@ (mov r8, r8)
 8006988:	20000304 	.word	0x20000304

0800698c <__malloc_lock>:
 800698c:	b510      	push	{r4, lr}
 800698e:	4802      	ldr	r0, [pc, #8]	@ (8006998 <__malloc_lock+0xc>)
 8006990:	f7ff ff03 	bl	800679a <__retarget_lock_acquire_recursive>
 8006994:	bd10      	pop	{r4, pc}
 8006996:	46c0      	nop			@ (mov r8, r8)
 8006998:	200002fc 	.word	0x200002fc

0800699c <__malloc_unlock>:
 800699c:	b510      	push	{r4, lr}
 800699e:	4802      	ldr	r0, [pc, #8]	@ (80069a8 <__malloc_unlock+0xc>)
 80069a0:	f7ff fefc 	bl	800679c <__retarget_lock_release_recursive>
 80069a4:	bd10      	pop	{r4, pc}
 80069a6:	46c0      	nop			@ (mov r8, r8)
 80069a8:	200002fc 	.word	0x200002fc

080069ac <__sfputc_r>:
 80069ac:	6893      	ldr	r3, [r2, #8]
 80069ae:	b510      	push	{r4, lr}
 80069b0:	3b01      	subs	r3, #1
 80069b2:	6093      	str	r3, [r2, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	da04      	bge.n	80069c2 <__sfputc_r+0x16>
 80069b8:	6994      	ldr	r4, [r2, #24]
 80069ba:	42a3      	cmp	r3, r4
 80069bc:	db07      	blt.n	80069ce <__sfputc_r+0x22>
 80069be:	290a      	cmp	r1, #10
 80069c0:	d005      	beq.n	80069ce <__sfputc_r+0x22>
 80069c2:	6813      	ldr	r3, [r2, #0]
 80069c4:	1c58      	adds	r0, r3, #1
 80069c6:	6010      	str	r0, [r2, #0]
 80069c8:	7019      	strb	r1, [r3, #0]
 80069ca:	0008      	movs	r0, r1
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	f7ff fdc3 	bl	8006558 <__swbuf_r>
 80069d2:	0001      	movs	r1, r0
 80069d4:	e7f9      	b.n	80069ca <__sfputc_r+0x1e>

080069d6 <__sfputs_r>:
 80069d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d8:	0006      	movs	r6, r0
 80069da:	000f      	movs	r7, r1
 80069dc:	0014      	movs	r4, r2
 80069de:	18d5      	adds	r5, r2, r3
 80069e0:	42ac      	cmp	r4, r5
 80069e2:	d101      	bne.n	80069e8 <__sfputs_r+0x12>
 80069e4:	2000      	movs	r0, #0
 80069e6:	e007      	b.n	80069f8 <__sfputs_r+0x22>
 80069e8:	7821      	ldrb	r1, [r4, #0]
 80069ea:	003a      	movs	r2, r7
 80069ec:	0030      	movs	r0, r6
 80069ee:	f7ff ffdd 	bl	80069ac <__sfputc_r>
 80069f2:	3401      	adds	r4, #1
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d1f3      	bne.n	80069e0 <__sfputs_r+0xa>
 80069f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069fc <_vfiprintf_r>:
 80069fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069fe:	b0a1      	sub	sp, #132	@ 0x84
 8006a00:	000f      	movs	r7, r1
 8006a02:	0015      	movs	r5, r2
 8006a04:	001e      	movs	r6, r3
 8006a06:	9003      	str	r0, [sp, #12]
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	d004      	beq.n	8006a16 <_vfiprintf_r+0x1a>
 8006a0c:	6a03      	ldr	r3, [r0, #32]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <_vfiprintf_r+0x1a>
 8006a12:	f7ff fbfb 	bl	800620c <__sinit>
 8006a16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a18:	07db      	lsls	r3, r3, #31
 8006a1a:	d405      	bmi.n	8006a28 <_vfiprintf_r+0x2c>
 8006a1c:	89bb      	ldrh	r3, [r7, #12]
 8006a1e:	059b      	lsls	r3, r3, #22
 8006a20:	d402      	bmi.n	8006a28 <_vfiprintf_r+0x2c>
 8006a22:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006a24:	f7ff feb9 	bl	800679a <__retarget_lock_acquire_recursive>
 8006a28:	89bb      	ldrh	r3, [r7, #12]
 8006a2a:	071b      	lsls	r3, r3, #28
 8006a2c:	d502      	bpl.n	8006a34 <_vfiprintf_r+0x38>
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d113      	bne.n	8006a5c <_vfiprintf_r+0x60>
 8006a34:	0039      	movs	r1, r7
 8006a36:	9803      	ldr	r0, [sp, #12]
 8006a38:	f7ff fdd0 	bl	80065dc <__swsetup_r>
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d00d      	beq.n	8006a5c <_vfiprintf_r+0x60>
 8006a40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a42:	07db      	lsls	r3, r3, #31
 8006a44:	d503      	bpl.n	8006a4e <_vfiprintf_r+0x52>
 8006a46:	2001      	movs	r0, #1
 8006a48:	4240      	negs	r0, r0
 8006a4a:	b021      	add	sp, #132	@ 0x84
 8006a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a4e:	89bb      	ldrh	r3, [r7, #12]
 8006a50:	059b      	lsls	r3, r3, #22
 8006a52:	d4f8      	bmi.n	8006a46 <_vfiprintf_r+0x4a>
 8006a54:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006a56:	f7ff fea1 	bl	800679c <__retarget_lock_release_recursive>
 8006a5a:	e7f4      	b.n	8006a46 <_vfiprintf_r+0x4a>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	ac08      	add	r4, sp, #32
 8006a60:	6163      	str	r3, [r4, #20]
 8006a62:	3320      	adds	r3, #32
 8006a64:	7663      	strb	r3, [r4, #25]
 8006a66:	3310      	adds	r3, #16
 8006a68:	76a3      	strb	r3, [r4, #26]
 8006a6a:	9607      	str	r6, [sp, #28]
 8006a6c:	002e      	movs	r6, r5
 8006a6e:	7833      	ldrb	r3, [r6, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <_vfiprintf_r+0x7c>
 8006a74:	2b25      	cmp	r3, #37	@ 0x25
 8006a76:	d148      	bne.n	8006b0a <_vfiprintf_r+0x10e>
 8006a78:	1b73      	subs	r3, r6, r5
 8006a7a:	9305      	str	r3, [sp, #20]
 8006a7c:	42ae      	cmp	r6, r5
 8006a7e:	d00b      	beq.n	8006a98 <_vfiprintf_r+0x9c>
 8006a80:	002a      	movs	r2, r5
 8006a82:	0039      	movs	r1, r7
 8006a84:	9803      	ldr	r0, [sp, #12]
 8006a86:	f7ff ffa6 	bl	80069d6 <__sfputs_r>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d100      	bne.n	8006a90 <_vfiprintf_r+0x94>
 8006a8e:	e0ae      	b.n	8006bee <_vfiprintf_r+0x1f2>
 8006a90:	6963      	ldr	r3, [r4, #20]
 8006a92:	9a05      	ldr	r2, [sp, #20]
 8006a94:	189b      	adds	r3, r3, r2
 8006a96:	6163      	str	r3, [r4, #20]
 8006a98:	7833      	ldrb	r3, [r6, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d100      	bne.n	8006aa0 <_vfiprintf_r+0xa4>
 8006a9e:	e0a6      	b.n	8006bee <_vfiprintf_r+0x1f2>
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	4252      	negs	r2, r2
 8006aa6:	6062      	str	r2, [r4, #4]
 8006aa8:	a904      	add	r1, sp, #16
 8006aaa:	3254      	adds	r2, #84	@ 0x54
 8006aac:	1852      	adds	r2, r2, r1
 8006aae:	1c75      	adds	r5, r6, #1
 8006ab0:	6023      	str	r3, [r4, #0]
 8006ab2:	60e3      	str	r3, [r4, #12]
 8006ab4:	60a3      	str	r3, [r4, #8]
 8006ab6:	7013      	strb	r3, [r2, #0]
 8006ab8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006aba:	4b59      	ldr	r3, [pc, #356]	@ (8006c20 <_vfiprintf_r+0x224>)
 8006abc:	2205      	movs	r2, #5
 8006abe:	0018      	movs	r0, r3
 8006ac0:	7829      	ldrb	r1, [r5, #0]
 8006ac2:	9305      	str	r3, [sp, #20]
 8006ac4:	f000 fb88 	bl	80071d8 <memchr>
 8006ac8:	1c6e      	adds	r6, r5, #1
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d11f      	bne.n	8006b0e <_vfiprintf_r+0x112>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	06d3      	lsls	r3, r2, #27
 8006ad2:	d504      	bpl.n	8006ade <_vfiprintf_r+0xe2>
 8006ad4:	2353      	movs	r3, #83	@ 0x53
 8006ad6:	a904      	add	r1, sp, #16
 8006ad8:	185b      	adds	r3, r3, r1
 8006ada:	2120      	movs	r1, #32
 8006adc:	7019      	strb	r1, [r3, #0]
 8006ade:	0713      	lsls	r3, r2, #28
 8006ae0:	d504      	bpl.n	8006aec <_vfiprintf_r+0xf0>
 8006ae2:	2353      	movs	r3, #83	@ 0x53
 8006ae4:	a904      	add	r1, sp, #16
 8006ae6:	185b      	adds	r3, r3, r1
 8006ae8:	212b      	movs	r1, #43	@ 0x2b
 8006aea:	7019      	strb	r1, [r3, #0]
 8006aec:	782b      	ldrb	r3, [r5, #0]
 8006aee:	2b2a      	cmp	r3, #42	@ 0x2a
 8006af0:	d016      	beq.n	8006b20 <_vfiprintf_r+0x124>
 8006af2:	002e      	movs	r6, r5
 8006af4:	2100      	movs	r1, #0
 8006af6:	200a      	movs	r0, #10
 8006af8:	68e3      	ldr	r3, [r4, #12]
 8006afa:	7832      	ldrb	r2, [r6, #0]
 8006afc:	1c75      	adds	r5, r6, #1
 8006afe:	3a30      	subs	r2, #48	@ 0x30
 8006b00:	2a09      	cmp	r2, #9
 8006b02:	d950      	bls.n	8006ba6 <_vfiprintf_r+0x1aa>
 8006b04:	2900      	cmp	r1, #0
 8006b06:	d111      	bne.n	8006b2c <_vfiprintf_r+0x130>
 8006b08:	e017      	b.n	8006b3a <_vfiprintf_r+0x13e>
 8006b0a:	3601      	adds	r6, #1
 8006b0c:	e7af      	b.n	8006a6e <_vfiprintf_r+0x72>
 8006b0e:	9b05      	ldr	r3, [sp, #20]
 8006b10:	6822      	ldr	r2, [r4, #0]
 8006b12:	1ac0      	subs	r0, r0, r3
 8006b14:	2301      	movs	r3, #1
 8006b16:	4083      	lsls	r3, r0
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	0035      	movs	r5, r6
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	e7cc      	b.n	8006aba <_vfiprintf_r+0xbe>
 8006b20:	9b07      	ldr	r3, [sp, #28]
 8006b22:	1d19      	adds	r1, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	9107      	str	r1, [sp, #28]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	db01      	blt.n	8006b30 <_vfiprintf_r+0x134>
 8006b2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b2e:	e004      	b.n	8006b3a <_vfiprintf_r+0x13e>
 8006b30:	425b      	negs	r3, r3
 8006b32:	60e3      	str	r3, [r4, #12]
 8006b34:	2302      	movs	r3, #2
 8006b36:	4313      	orrs	r3, r2
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	7833      	ldrb	r3, [r6, #0]
 8006b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b3e:	d10c      	bne.n	8006b5a <_vfiprintf_r+0x15e>
 8006b40:	7873      	ldrb	r3, [r6, #1]
 8006b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b44:	d134      	bne.n	8006bb0 <_vfiprintf_r+0x1b4>
 8006b46:	9b07      	ldr	r3, [sp, #28]
 8006b48:	3602      	adds	r6, #2
 8006b4a:	1d1a      	adds	r2, r3, #4
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	9207      	str	r2, [sp, #28]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da01      	bge.n	8006b58 <_vfiprintf_r+0x15c>
 8006b54:	2301      	movs	r3, #1
 8006b56:	425b      	negs	r3, r3
 8006b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5a:	4d32      	ldr	r5, [pc, #200]	@ (8006c24 <_vfiprintf_r+0x228>)
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	0028      	movs	r0, r5
 8006b60:	7831      	ldrb	r1, [r6, #0]
 8006b62:	f000 fb39 	bl	80071d8 <memchr>
 8006b66:	2800      	cmp	r0, #0
 8006b68:	d006      	beq.n	8006b78 <_vfiprintf_r+0x17c>
 8006b6a:	2340      	movs	r3, #64	@ 0x40
 8006b6c:	1b40      	subs	r0, r0, r5
 8006b6e:	4083      	lsls	r3, r0
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	3601      	adds	r6, #1
 8006b74:	4313      	orrs	r3, r2
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	7831      	ldrb	r1, [r6, #0]
 8006b7a:	2206      	movs	r2, #6
 8006b7c:	482a      	ldr	r0, [pc, #168]	@ (8006c28 <_vfiprintf_r+0x22c>)
 8006b7e:	1c75      	adds	r5, r6, #1
 8006b80:	7621      	strb	r1, [r4, #24]
 8006b82:	f000 fb29 	bl	80071d8 <memchr>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d040      	beq.n	8006c0c <_vfiprintf_r+0x210>
 8006b8a:	4b28      	ldr	r3, [pc, #160]	@ (8006c2c <_vfiprintf_r+0x230>)
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d122      	bne.n	8006bd6 <_vfiprintf_r+0x1da>
 8006b90:	2207      	movs	r2, #7
 8006b92:	9b07      	ldr	r3, [sp, #28]
 8006b94:	3307      	adds	r3, #7
 8006b96:	4393      	bics	r3, r2
 8006b98:	3308      	adds	r3, #8
 8006b9a:	9307      	str	r3, [sp, #28]
 8006b9c:	6963      	ldr	r3, [r4, #20]
 8006b9e:	9a04      	ldr	r2, [sp, #16]
 8006ba0:	189b      	adds	r3, r3, r2
 8006ba2:	6163      	str	r3, [r4, #20]
 8006ba4:	e762      	b.n	8006a6c <_vfiprintf_r+0x70>
 8006ba6:	4343      	muls	r3, r0
 8006ba8:	002e      	movs	r6, r5
 8006baa:	2101      	movs	r1, #1
 8006bac:	189b      	adds	r3, r3, r2
 8006bae:	e7a4      	b.n	8006afa <_vfiprintf_r+0xfe>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	200a      	movs	r0, #10
 8006bb4:	0019      	movs	r1, r3
 8006bb6:	3601      	adds	r6, #1
 8006bb8:	6063      	str	r3, [r4, #4]
 8006bba:	7832      	ldrb	r2, [r6, #0]
 8006bbc:	1c75      	adds	r5, r6, #1
 8006bbe:	3a30      	subs	r2, #48	@ 0x30
 8006bc0:	2a09      	cmp	r2, #9
 8006bc2:	d903      	bls.n	8006bcc <_vfiprintf_r+0x1d0>
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0c8      	beq.n	8006b5a <_vfiprintf_r+0x15e>
 8006bc8:	9109      	str	r1, [sp, #36]	@ 0x24
 8006bca:	e7c6      	b.n	8006b5a <_vfiprintf_r+0x15e>
 8006bcc:	4341      	muls	r1, r0
 8006bce:	002e      	movs	r6, r5
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	1889      	adds	r1, r1, r2
 8006bd4:	e7f1      	b.n	8006bba <_vfiprintf_r+0x1be>
 8006bd6:	aa07      	add	r2, sp, #28
 8006bd8:	9200      	str	r2, [sp, #0]
 8006bda:	0021      	movs	r1, r4
 8006bdc:	003a      	movs	r2, r7
 8006bde:	4b14      	ldr	r3, [pc, #80]	@ (8006c30 <_vfiprintf_r+0x234>)
 8006be0:	9803      	ldr	r0, [sp, #12]
 8006be2:	e000      	b.n	8006be6 <_vfiprintf_r+0x1ea>
 8006be4:	bf00      	nop
 8006be6:	9004      	str	r0, [sp, #16]
 8006be8:	9b04      	ldr	r3, [sp, #16]
 8006bea:	3301      	adds	r3, #1
 8006bec:	d1d6      	bne.n	8006b9c <_vfiprintf_r+0x1a0>
 8006bee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006bf0:	07db      	lsls	r3, r3, #31
 8006bf2:	d405      	bmi.n	8006c00 <_vfiprintf_r+0x204>
 8006bf4:	89bb      	ldrh	r3, [r7, #12]
 8006bf6:	059b      	lsls	r3, r3, #22
 8006bf8:	d402      	bmi.n	8006c00 <_vfiprintf_r+0x204>
 8006bfa:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006bfc:	f7ff fdce 	bl	800679c <__retarget_lock_release_recursive>
 8006c00:	89bb      	ldrh	r3, [r7, #12]
 8006c02:	065b      	lsls	r3, r3, #25
 8006c04:	d500      	bpl.n	8006c08 <_vfiprintf_r+0x20c>
 8006c06:	e71e      	b.n	8006a46 <_vfiprintf_r+0x4a>
 8006c08:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006c0a:	e71e      	b.n	8006a4a <_vfiprintf_r+0x4e>
 8006c0c:	aa07      	add	r2, sp, #28
 8006c0e:	9200      	str	r2, [sp, #0]
 8006c10:	0021      	movs	r1, r4
 8006c12:	003a      	movs	r2, r7
 8006c14:	4b06      	ldr	r3, [pc, #24]	@ (8006c30 <_vfiprintf_r+0x234>)
 8006c16:	9803      	ldr	r0, [sp, #12]
 8006c18:	f000 f87c 	bl	8006d14 <_printf_i>
 8006c1c:	e7e3      	b.n	8006be6 <_vfiprintf_r+0x1ea>
 8006c1e:	46c0      	nop			@ (mov r8, r8)
 8006c20:	0800729c 	.word	0x0800729c
 8006c24:	080072a2 	.word	0x080072a2
 8006c28:	080072a6 	.word	0x080072a6
 8006c2c:	00000000 	.word	0x00000000
 8006c30:	080069d7 	.word	0x080069d7

08006c34 <_printf_common>:
 8006c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c36:	0016      	movs	r6, r2
 8006c38:	9301      	str	r3, [sp, #4]
 8006c3a:	688a      	ldr	r2, [r1, #8]
 8006c3c:	690b      	ldr	r3, [r1, #16]
 8006c3e:	000c      	movs	r4, r1
 8006c40:	9000      	str	r0, [sp, #0]
 8006c42:	4293      	cmp	r3, r2
 8006c44:	da00      	bge.n	8006c48 <_printf_common+0x14>
 8006c46:	0013      	movs	r3, r2
 8006c48:	0022      	movs	r2, r4
 8006c4a:	6033      	str	r3, [r6, #0]
 8006c4c:	3243      	adds	r2, #67	@ 0x43
 8006c4e:	7812      	ldrb	r2, [r2, #0]
 8006c50:	2a00      	cmp	r2, #0
 8006c52:	d001      	beq.n	8006c58 <_printf_common+0x24>
 8006c54:	3301      	adds	r3, #1
 8006c56:	6033      	str	r3, [r6, #0]
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	069b      	lsls	r3, r3, #26
 8006c5c:	d502      	bpl.n	8006c64 <_printf_common+0x30>
 8006c5e:	6833      	ldr	r3, [r6, #0]
 8006c60:	3302      	adds	r3, #2
 8006c62:	6033      	str	r3, [r6, #0]
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	2306      	movs	r3, #6
 8006c68:	0015      	movs	r5, r2
 8006c6a:	401d      	ands	r5, r3
 8006c6c:	421a      	tst	r2, r3
 8006c6e:	d027      	beq.n	8006cc0 <_printf_common+0x8c>
 8006c70:	0023      	movs	r3, r4
 8006c72:	3343      	adds	r3, #67	@ 0x43
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	1e5a      	subs	r2, r3, #1
 8006c78:	4193      	sbcs	r3, r2
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	0692      	lsls	r2, r2, #26
 8006c7e:	d430      	bmi.n	8006ce2 <_printf_common+0xae>
 8006c80:	0022      	movs	r2, r4
 8006c82:	9901      	ldr	r1, [sp, #4]
 8006c84:	9800      	ldr	r0, [sp, #0]
 8006c86:	9d08      	ldr	r5, [sp, #32]
 8006c88:	3243      	adds	r2, #67	@ 0x43
 8006c8a:	47a8      	blx	r5
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d025      	beq.n	8006cdc <_printf_common+0xa8>
 8006c90:	2206      	movs	r2, #6
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	2500      	movs	r5, #0
 8006c96:	4013      	ands	r3, r2
 8006c98:	2b04      	cmp	r3, #4
 8006c9a:	d105      	bne.n	8006ca8 <_printf_common+0x74>
 8006c9c:	6833      	ldr	r3, [r6, #0]
 8006c9e:	68e5      	ldr	r5, [r4, #12]
 8006ca0:	1aed      	subs	r5, r5, r3
 8006ca2:	43eb      	mvns	r3, r5
 8006ca4:	17db      	asrs	r3, r3, #31
 8006ca6:	401d      	ands	r5, r3
 8006ca8:	68a3      	ldr	r3, [r4, #8]
 8006caa:	6922      	ldr	r2, [r4, #16]
 8006cac:	4293      	cmp	r3, r2
 8006cae:	dd01      	ble.n	8006cb4 <_printf_common+0x80>
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	18ed      	adds	r5, r5, r3
 8006cb4:	2600      	movs	r6, #0
 8006cb6:	42b5      	cmp	r5, r6
 8006cb8:	d120      	bne.n	8006cfc <_printf_common+0xc8>
 8006cba:	2000      	movs	r0, #0
 8006cbc:	e010      	b.n	8006ce0 <_printf_common+0xac>
 8006cbe:	3501      	adds	r5, #1
 8006cc0:	68e3      	ldr	r3, [r4, #12]
 8006cc2:	6832      	ldr	r2, [r6, #0]
 8006cc4:	1a9b      	subs	r3, r3, r2
 8006cc6:	42ab      	cmp	r3, r5
 8006cc8:	ddd2      	ble.n	8006c70 <_printf_common+0x3c>
 8006cca:	0022      	movs	r2, r4
 8006ccc:	2301      	movs	r3, #1
 8006cce:	9901      	ldr	r1, [sp, #4]
 8006cd0:	9800      	ldr	r0, [sp, #0]
 8006cd2:	9f08      	ldr	r7, [sp, #32]
 8006cd4:	3219      	adds	r2, #25
 8006cd6:	47b8      	blx	r7
 8006cd8:	3001      	adds	r0, #1
 8006cda:	d1f0      	bne.n	8006cbe <_printf_common+0x8a>
 8006cdc:	2001      	movs	r0, #1
 8006cde:	4240      	negs	r0, r0
 8006ce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ce2:	2030      	movs	r0, #48	@ 0x30
 8006ce4:	18e1      	adds	r1, r4, r3
 8006ce6:	3143      	adds	r1, #67	@ 0x43
 8006ce8:	7008      	strb	r0, [r1, #0]
 8006cea:	0021      	movs	r1, r4
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	3145      	adds	r1, #69	@ 0x45
 8006cf0:	7809      	ldrb	r1, [r1, #0]
 8006cf2:	18a2      	adds	r2, r4, r2
 8006cf4:	3243      	adds	r2, #67	@ 0x43
 8006cf6:	3302      	adds	r3, #2
 8006cf8:	7011      	strb	r1, [r2, #0]
 8006cfa:	e7c1      	b.n	8006c80 <_printf_common+0x4c>
 8006cfc:	0022      	movs	r2, r4
 8006cfe:	2301      	movs	r3, #1
 8006d00:	9901      	ldr	r1, [sp, #4]
 8006d02:	9800      	ldr	r0, [sp, #0]
 8006d04:	9f08      	ldr	r7, [sp, #32]
 8006d06:	321a      	adds	r2, #26
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	d0e6      	beq.n	8006cdc <_printf_common+0xa8>
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7d1      	b.n	8006cb6 <_printf_common+0x82>
	...

08006d14 <_printf_i>:
 8006d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d16:	b08b      	sub	sp, #44	@ 0x2c
 8006d18:	9206      	str	r2, [sp, #24]
 8006d1a:	000a      	movs	r2, r1
 8006d1c:	3243      	adds	r2, #67	@ 0x43
 8006d1e:	9307      	str	r3, [sp, #28]
 8006d20:	9005      	str	r0, [sp, #20]
 8006d22:	9203      	str	r2, [sp, #12]
 8006d24:	7e0a      	ldrb	r2, [r1, #24]
 8006d26:	000c      	movs	r4, r1
 8006d28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d2a:	2a78      	cmp	r2, #120	@ 0x78
 8006d2c:	d809      	bhi.n	8006d42 <_printf_i+0x2e>
 8006d2e:	2a62      	cmp	r2, #98	@ 0x62
 8006d30:	d80b      	bhi.n	8006d4a <_printf_i+0x36>
 8006d32:	2a00      	cmp	r2, #0
 8006d34:	d100      	bne.n	8006d38 <_printf_i+0x24>
 8006d36:	e0bc      	b.n	8006eb2 <_printf_i+0x19e>
 8006d38:	497b      	ldr	r1, [pc, #492]	@ (8006f28 <_printf_i+0x214>)
 8006d3a:	9104      	str	r1, [sp, #16]
 8006d3c:	2a58      	cmp	r2, #88	@ 0x58
 8006d3e:	d100      	bne.n	8006d42 <_printf_i+0x2e>
 8006d40:	e090      	b.n	8006e64 <_printf_i+0x150>
 8006d42:	0025      	movs	r5, r4
 8006d44:	3542      	adds	r5, #66	@ 0x42
 8006d46:	702a      	strb	r2, [r5, #0]
 8006d48:	e022      	b.n	8006d90 <_printf_i+0x7c>
 8006d4a:	0010      	movs	r0, r2
 8006d4c:	3863      	subs	r0, #99	@ 0x63
 8006d4e:	2815      	cmp	r0, #21
 8006d50:	d8f7      	bhi.n	8006d42 <_printf_i+0x2e>
 8006d52:	f7f9 f9d9 	bl	8000108 <__gnu_thumb1_case_shi>
 8006d56:	0016      	.short	0x0016
 8006d58:	fff6001f 	.word	0xfff6001f
 8006d5c:	fff6fff6 	.word	0xfff6fff6
 8006d60:	001ffff6 	.word	0x001ffff6
 8006d64:	fff6fff6 	.word	0xfff6fff6
 8006d68:	fff6fff6 	.word	0xfff6fff6
 8006d6c:	003600a1 	.word	0x003600a1
 8006d70:	fff60080 	.word	0xfff60080
 8006d74:	00b2fff6 	.word	0x00b2fff6
 8006d78:	0036fff6 	.word	0x0036fff6
 8006d7c:	fff6fff6 	.word	0xfff6fff6
 8006d80:	0084      	.short	0x0084
 8006d82:	0025      	movs	r5, r4
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	3542      	adds	r5, #66	@ 0x42
 8006d88:	1d11      	adds	r1, r2, #4
 8006d8a:	6019      	str	r1, [r3, #0]
 8006d8c:	6813      	ldr	r3, [r2, #0]
 8006d8e:	702b      	strb	r3, [r5, #0]
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0a0      	b.n	8006ed6 <_printf_i+0x1c2>
 8006d94:	6818      	ldr	r0, [r3, #0]
 8006d96:	6809      	ldr	r1, [r1, #0]
 8006d98:	1d02      	adds	r2, r0, #4
 8006d9a:	060d      	lsls	r5, r1, #24
 8006d9c:	d50b      	bpl.n	8006db6 <_printf_i+0xa2>
 8006d9e:	6806      	ldr	r6, [r0, #0]
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	2e00      	cmp	r6, #0
 8006da4:	da03      	bge.n	8006dae <_printf_i+0x9a>
 8006da6:	232d      	movs	r3, #45	@ 0x2d
 8006da8:	9a03      	ldr	r2, [sp, #12]
 8006daa:	4276      	negs	r6, r6
 8006dac:	7013      	strb	r3, [r2, #0]
 8006dae:	4b5e      	ldr	r3, [pc, #376]	@ (8006f28 <_printf_i+0x214>)
 8006db0:	270a      	movs	r7, #10
 8006db2:	9304      	str	r3, [sp, #16]
 8006db4:	e018      	b.n	8006de8 <_printf_i+0xd4>
 8006db6:	6806      	ldr	r6, [r0, #0]
 8006db8:	601a      	str	r2, [r3, #0]
 8006dba:	0649      	lsls	r1, r1, #25
 8006dbc:	d5f1      	bpl.n	8006da2 <_printf_i+0x8e>
 8006dbe:	b236      	sxth	r6, r6
 8006dc0:	e7ef      	b.n	8006da2 <_printf_i+0x8e>
 8006dc2:	6808      	ldr	r0, [r1, #0]
 8006dc4:	6819      	ldr	r1, [r3, #0]
 8006dc6:	c940      	ldmia	r1!, {r6}
 8006dc8:	0605      	lsls	r5, r0, #24
 8006dca:	d402      	bmi.n	8006dd2 <_printf_i+0xbe>
 8006dcc:	0640      	lsls	r0, r0, #25
 8006dce:	d500      	bpl.n	8006dd2 <_printf_i+0xbe>
 8006dd0:	b2b6      	uxth	r6, r6
 8006dd2:	6019      	str	r1, [r3, #0]
 8006dd4:	4b54      	ldr	r3, [pc, #336]	@ (8006f28 <_printf_i+0x214>)
 8006dd6:	270a      	movs	r7, #10
 8006dd8:	9304      	str	r3, [sp, #16]
 8006dda:	2a6f      	cmp	r2, #111	@ 0x6f
 8006ddc:	d100      	bne.n	8006de0 <_printf_i+0xcc>
 8006dde:	3f02      	subs	r7, #2
 8006de0:	0023      	movs	r3, r4
 8006de2:	2200      	movs	r2, #0
 8006de4:	3343      	adds	r3, #67	@ 0x43
 8006de6:	701a      	strb	r2, [r3, #0]
 8006de8:	6863      	ldr	r3, [r4, #4]
 8006dea:	60a3      	str	r3, [r4, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db03      	blt.n	8006df8 <_printf_i+0xe4>
 8006df0:	2104      	movs	r1, #4
 8006df2:	6822      	ldr	r2, [r4, #0]
 8006df4:	438a      	bics	r2, r1
 8006df6:	6022      	str	r2, [r4, #0]
 8006df8:	2e00      	cmp	r6, #0
 8006dfa:	d102      	bne.n	8006e02 <_printf_i+0xee>
 8006dfc:	9d03      	ldr	r5, [sp, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00c      	beq.n	8006e1c <_printf_i+0x108>
 8006e02:	9d03      	ldr	r5, [sp, #12]
 8006e04:	0030      	movs	r0, r6
 8006e06:	0039      	movs	r1, r7
 8006e08:	f7f9 fa0e 	bl	8000228 <__aeabi_uidivmod>
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	3d01      	subs	r5, #1
 8006e10:	5c5b      	ldrb	r3, [r3, r1]
 8006e12:	702b      	strb	r3, [r5, #0]
 8006e14:	0033      	movs	r3, r6
 8006e16:	0006      	movs	r6, r0
 8006e18:	429f      	cmp	r7, r3
 8006e1a:	d9f3      	bls.n	8006e04 <_printf_i+0xf0>
 8006e1c:	2f08      	cmp	r7, #8
 8006e1e:	d109      	bne.n	8006e34 <_printf_i+0x120>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	07db      	lsls	r3, r3, #31
 8006e24:	d506      	bpl.n	8006e34 <_printf_i+0x120>
 8006e26:	6862      	ldr	r2, [r4, #4]
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	dc02      	bgt.n	8006e34 <_printf_i+0x120>
 8006e2e:	2330      	movs	r3, #48	@ 0x30
 8006e30:	3d01      	subs	r5, #1
 8006e32:	702b      	strb	r3, [r5, #0]
 8006e34:	9b03      	ldr	r3, [sp, #12]
 8006e36:	1b5b      	subs	r3, r3, r5
 8006e38:	6123      	str	r3, [r4, #16]
 8006e3a:	9b07      	ldr	r3, [sp, #28]
 8006e3c:	0021      	movs	r1, r4
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	9805      	ldr	r0, [sp, #20]
 8006e42:	9b06      	ldr	r3, [sp, #24]
 8006e44:	aa09      	add	r2, sp, #36	@ 0x24
 8006e46:	f7ff fef5 	bl	8006c34 <_printf_common>
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d148      	bne.n	8006ee0 <_printf_i+0x1cc>
 8006e4e:	2001      	movs	r0, #1
 8006e50:	4240      	negs	r0, r0
 8006e52:	b00b      	add	sp, #44	@ 0x2c
 8006e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e56:	2220      	movs	r2, #32
 8006e58:	6809      	ldr	r1, [r1, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	6022      	str	r2, [r4, #0]
 8006e5e:	2278      	movs	r2, #120	@ 0x78
 8006e60:	4932      	ldr	r1, [pc, #200]	@ (8006f2c <_printf_i+0x218>)
 8006e62:	9104      	str	r1, [sp, #16]
 8006e64:	0021      	movs	r1, r4
 8006e66:	3145      	adds	r1, #69	@ 0x45
 8006e68:	700a      	strb	r2, [r1, #0]
 8006e6a:	6819      	ldr	r1, [r3, #0]
 8006e6c:	6822      	ldr	r2, [r4, #0]
 8006e6e:	c940      	ldmia	r1!, {r6}
 8006e70:	0610      	lsls	r0, r2, #24
 8006e72:	d402      	bmi.n	8006e7a <_printf_i+0x166>
 8006e74:	0650      	lsls	r0, r2, #25
 8006e76:	d500      	bpl.n	8006e7a <_printf_i+0x166>
 8006e78:	b2b6      	uxth	r6, r6
 8006e7a:	6019      	str	r1, [r3, #0]
 8006e7c:	07d3      	lsls	r3, r2, #31
 8006e7e:	d502      	bpl.n	8006e86 <_printf_i+0x172>
 8006e80:	2320      	movs	r3, #32
 8006e82:	4313      	orrs	r3, r2
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	2e00      	cmp	r6, #0
 8006e88:	d001      	beq.n	8006e8e <_printf_i+0x17a>
 8006e8a:	2710      	movs	r7, #16
 8006e8c:	e7a8      	b.n	8006de0 <_printf_i+0xcc>
 8006e8e:	2220      	movs	r2, #32
 8006e90:	6823      	ldr	r3, [r4, #0]
 8006e92:	4393      	bics	r3, r2
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	e7f8      	b.n	8006e8a <_printf_i+0x176>
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	680d      	ldr	r5, [r1, #0]
 8006e9c:	1d10      	adds	r0, r2, #4
 8006e9e:	6949      	ldr	r1, [r1, #20]
 8006ea0:	6018      	str	r0, [r3, #0]
 8006ea2:	6813      	ldr	r3, [r2, #0]
 8006ea4:	062e      	lsls	r6, r5, #24
 8006ea6:	d501      	bpl.n	8006eac <_printf_i+0x198>
 8006ea8:	6019      	str	r1, [r3, #0]
 8006eaa:	e002      	b.n	8006eb2 <_printf_i+0x19e>
 8006eac:	066d      	lsls	r5, r5, #25
 8006eae:	d5fb      	bpl.n	8006ea8 <_printf_i+0x194>
 8006eb0:	8019      	strh	r1, [r3, #0]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9d03      	ldr	r5, [sp, #12]
 8006eb6:	6123      	str	r3, [r4, #16]
 8006eb8:	e7bf      	b.n	8006e3a <_printf_i+0x126>
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	1d11      	adds	r1, r2, #4
 8006ebe:	6019      	str	r1, [r3, #0]
 8006ec0:	6815      	ldr	r5, [r2, #0]
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	0028      	movs	r0, r5
 8006ec6:	6862      	ldr	r2, [r4, #4]
 8006ec8:	f000 f986 	bl	80071d8 <memchr>
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	d001      	beq.n	8006ed4 <_printf_i+0x1c0>
 8006ed0:	1b40      	subs	r0, r0, r5
 8006ed2:	6060      	str	r0, [r4, #4]
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9a03      	ldr	r2, [sp, #12]
 8006edc:	7013      	strb	r3, [r2, #0]
 8006ede:	e7ac      	b.n	8006e3a <_printf_i+0x126>
 8006ee0:	002a      	movs	r2, r5
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	9906      	ldr	r1, [sp, #24]
 8006ee6:	9805      	ldr	r0, [sp, #20]
 8006ee8:	9d07      	ldr	r5, [sp, #28]
 8006eea:	47a8      	blx	r5
 8006eec:	3001      	adds	r0, #1
 8006eee:	d0ae      	beq.n	8006e4e <_printf_i+0x13a>
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	079b      	lsls	r3, r3, #30
 8006ef4:	d415      	bmi.n	8006f22 <_printf_i+0x20e>
 8006ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef8:	68e0      	ldr	r0, [r4, #12]
 8006efa:	4298      	cmp	r0, r3
 8006efc:	daa9      	bge.n	8006e52 <_printf_i+0x13e>
 8006efe:	0018      	movs	r0, r3
 8006f00:	e7a7      	b.n	8006e52 <_printf_i+0x13e>
 8006f02:	0022      	movs	r2, r4
 8006f04:	2301      	movs	r3, #1
 8006f06:	9906      	ldr	r1, [sp, #24]
 8006f08:	9805      	ldr	r0, [sp, #20]
 8006f0a:	9e07      	ldr	r6, [sp, #28]
 8006f0c:	3219      	adds	r2, #25
 8006f0e:	47b0      	blx	r6
 8006f10:	3001      	adds	r0, #1
 8006f12:	d09c      	beq.n	8006e4e <_printf_i+0x13a>
 8006f14:	3501      	adds	r5, #1
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f1a:	1a9b      	subs	r3, r3, r2
 8006f1c:	42ab      	cmp	r3, r5
 8006f1e:	dcf0      	bgt.n	8006f02 <_printf_i+0x1ee>
 8006f20:	e7e9      	b.n	8006ef6 <_printf_i+0x1e2>
 8006f22:	2500      	movs	r5, #0
 8006f24:	e7f7      	b.n	8006f16 <_printf_i+0x202>
 8006f26:	46c0      	nop			@ (mov r8, r8)
 8006f28:	080072ad 	.word	0x080072ad
 8006f2c:	080072be 	.word	0x080072be

08006f30 <__sflush_r>:
 8006f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f32:	220c      	movs	r2, #12
 8006f34:	5e8b      	ldrsh	r3, [r1, r2]
 8006f36:	0005      	movs	r5, r0
 8006f38:	000c      	movs	r4, r1
 8006f3a:	071a      	lsls	r2, r3, #28
 8006f3c:	d456      	bmi.n	8006fec <__sflush_r+0xbc>
 8006f3e:	684a      	ldr	r2, [r1, #4]
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	dc02      	bgt.n	8006f4a <__sflush_r+0x1a>
 8006f44:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	dd4e      	ble.n	8006fe8 <__sflush_r+0xb8>
 8006f4a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	d04b      	beq.n	8006fe8 <__sflush_r+0xb8>
 8006f50:	2200      	movs	r2, #0
 8006f52:	2080      	movs	r0, #128	@ 0x80
 8006f54:	682e      	ldr	r6, [r5, #0]
 8006f56:	602a      	str	r2, [r5, #0]
 8006f58:	001a      	movs	r2, r3
 8006f5a:	0140      	lsls	r0, r0, #5
 8006f5c:	6a21      	ldr	r1, [r4, #32]
 8006f5e:	4002      	ands	r2, r0
 8006f60:	4203      	tst	r3, r0
 8006f62:	d033      	beq.n	8006fcc <__sflush_r+0x9c>
 8006f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	075b      	lsls	r3, r3, #29
 8006f6a:	d506      	bpl.n	8006f7a <__sflush_r+0x4a>
 8006f6c:	6863      	ldr	r3, [r4, #4]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <__sflush_r+0x4a>
 8006f76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f78:	1ad2      	subs	r2, r2, r3
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	0028      	movs	r0, r5
 8006f7e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006f80:	6a21      	ldr	r1, [r4, #32]
 8006f82:	47b8      	blx	r7
 8006f84:	89a2      	ldrh	r2, [r4, #12]
 8006f86:	1c43      	adds	r3, r0, #1
 8006f88:	d106      	bne.n	8006f98 <__sflush_r+0x68>
 8006f8a:	6829      	ldr	r1, [r5, #0]
 8006f8c:	291d      	cmp	r1, #29
 8006f8e:	d846      	bhi.n	800701e <__sflush_r+0xee>
 8006f90:	4b29      	ldr	r3, [pc, #164]	@ (8007038 <__sflush_r+0x108>)
 8006f92:	410b      	asrs	r3, r1
 8006f94:	07db      	lsls	r3, r3, #31
 8006f96:	d442      	bmi.n	800701e <__sflush_r+0xee>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	6063      	str	r3, [r4, #4]
 8006f9c:	6923      	ldr	r3, [r4, #16]
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	04d2      	lsls	r2, r2, #19
 8006fa2:	d505      	bpl.n	8006fb0 <__sflush_r+0x80>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <__sflush_r+0x7e>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d100      	bne.n	8006fb0 <__sflush_r+0x80>
 8006fae:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fb2:	602e      	str	r6, [r5, #0]
 8006fb4:	2900      	cmp	r1, #0
 8006fb6:	d017      	beq.n	8006fe8 <__sflush_r+0xb8>
 8006fb8:	0023      	movs	r3, r4
 8006fba:	3344      	adds	r3, #68	@ 0x44
 8006fbc:	4299      	cmp	r1, r3
 8006fbe:	d002      	beq.n	8006fc6 <__sflush_r+0x96>
 8006fc0:	0028      	movs	r0, r5
 8006fc2:	f7ff fbed 	bl	80067a0 <_free_r>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fca:	e00d      	b.n	8006fe8 <__sflush_r+0xb8>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	0028      	movs	r0, r5
 8006fd0:	47b8      	blx	r7
 8006fd2:	0002      	movs	r2, r0
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d1c6      	bne.n	8006f66 <__sflush_r+0x36>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d0c3      	beq.n	8006f66 <__sflush_r+0x36>
 8006fde:	2b1d      	cmp	r3, #29
 8006fe0:	d001      	beq.n	8006fe6 <__sflush_r+0xb6>
 8006fe2:	2b16      	cmp	r3, #22
 8006fe4:	d11a      	bne.n	800701c <__sflush_r+0xec>
 8006fe6:	602e      	str	r6, [r5, #0]
 8006fe8:	2000      	movs	r0, #0
 8006fea:	e01e      	b.n	800702a <__sflush_r+0xfa>
 8006fec:	690e      	ldr	r6, [r1, #16]
 8006fee:	2e00      	cmp	r6, #0
 8006ff0:	d0fa      	beq.n	8006fe8 <__sflush_r+0xb8>
 8006ff2:	680f      	ldr	r7, [r1, #0]
 8006ff4:	600e      	str	r6, [r1, #0]
 8006ff6:	1bba      	subs	r2, r7, r6
 8006ff8:	9201      	str	r2, [sp, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	079b      	lsls	r3, r3, #30
 8006ffe:	d100      	bne.n	8007002 <__sflush_r+0xd2>
 8007000:	694a      	ldr	r2, [r1, #20]
 8007002:	60a2      	str	r2, [r4, #8]
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	ddee      	ble.n	8006fe8 <__sflush_r+0xb8>
 800700a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800700c:	0032      	movs	r2, r6
 800700e:	001f      	movs	r7, r3
 8007010:	0028      	movs	r0, r5
 8007012:	9b01      	ldr	r3, [sp, #4]
 8007014:	6a21      	ldr	r1, [r4, #32]
 8007016:	47b8      	blx	r7
 8007018:	2800      	cmp	r0, #0
 800701a:	dc07      	bgt.n	800702c <__sflush_r+0xfc>
 800701c:	89a2      	ldrh	r2, [r4, #12]
 800701e:	2340      	movs	r3, #64	@ 0x40
 8007020:	2001      	movs	r0, #1
 8007022:	4313      	orrs	r3, r2
 8007024:	b21b      	sxth	r3, r3
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	4240      	negs	r0, r0
 800702a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800702c:	9b01      	ldr	r3, [sp, #4]
 800702e:	1836      	adds	r6, r6, r0
 8007030:	1a1b      	subs	r3, r3, r0
 8007032:	9301      	str	r3, [sp, #4]
 8007034:	e7e6      	b.n	8007004 <__sflush_r+0xd4>
 8007036:	46c0      	nop			@ (mov r8, r8)
 8007038:	dfbffffe 	.word	0xdfbffffe

0800703c <_fflush_r>:
 800703c:	690b      	ldr	r3, [r1, #16]
 800703e:	b570      	push	{r4, r5, r6, lr}
 8007040:	0005      	movs	r5, r0
 8007042:	000c      	movs	r4, r1
 8007044:	2b00      	cmp	r3, #0
 8007046:	d102      	bne.n	800704e <_fflush_r+0x12>
 8007048:	2500      	movs	r5, #0
 800704a:	0028      	movs	r0, r5
 800704c:	bd70      	pop	{r4, r5, r6, pc}
 800704e:	2800      	cmp	r0, #0
 8007050:	d004      	beq.n	800705c <_fflush_r+0x20>
 8007052:	6a03      	ldr	r3, [r0, #32]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <_fflush_r+0x20>
 8007058:	f7ff f8d8 	bl	800620c <__sinit>
 800705c:	220c      	movs	r2, #12
 800705e:	5ea3      	ldrsh	r3, [r4, r2]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d0f1      	beq.n	8007048 <_fflush_r+0xc>
 8007064:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007066:	07d2      	lsls	r2, r2, #31
 8007068:	d404      	bmi.n	8007074 <_fflush_r+0x38>
 800706a:	059b      	lsls	r3, r3, #22
 800706c:	d402      	bmi.n	8007074 <_fflush_r+0x38>
 800706e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007070:	f7ff fb93 	bl	800679a <__retarget_lock_acquire_recursive>
 8007074:	0028      	movs	r0, r5
 8007076:	0021      	movs	r1, r4
 8007078:	f7ff ff5a 	bl	8006f30 <__sflush_r>
 800707c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800707e:	0005      	movs	r5, r0
 8007080:	07db      	lsls	r3, r3, #31
 8007082:	d4e2      	bmi.n	800704a <_fflush_r+0xe>
 8007084:	89a3      	ldrh	r3, [r4, #12]
 8007086:	059b      	lsls	r3, r3, #22
 8007088:	d4df      	bmi.n	800704a <_fflush_r+0xe>
 800708a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800708c:	f7ff fb86 	bl	800679c <__retarget_lock_release_recursive>
 8007090:	e7db      	b.n	800704a <_fflush_r+0xe>
	...

08007094 <__swhatbuf_r>:
 8007094:	b570      	push	{r4, r5, r6, lr}
 8007096:	000e      	movs	r6, r1
 8007098:	001d      	movs	r5, r3
 800709a:	230e      	movs	r3, #14
 800709c:	5ec9      	ldrsh	r1, [r1, r3]
 800709e:	0014      	movs	r4, r2
 80070a0:	b096      	sub	sp, #88	@ 0x58
 80070a2:	2900      	cmp	r1, #0
 80070a4:	da0c      	bge.n	80070c0 <__swhatbuf_r+0x2c>
 80070a6:	89b2      	ldrh	r2, [r6, #12]
 80070a8:	2380      	movs	r3, #128	@ 0x80
 80070aa:	0011      	movs	r1, r2
 80070ac:	4019      	ands	r1, r3
 80070ae:	421a      	tst	r2, r3
 80070b0:	d114      	bne.n	80070dc <__swhatbuf_r+0x48>
 80070b2:	2380      	movs	r3, #128	@ 0x80
 80070b4:	00db      	lsls	r3, r3, #3
 80070b6:	2000      	movs	r0, #0
 80070b8:	6029      	str	r1, [r5, #0]
 80070ba:	6023      	str	r3, [r4, #0]
 80070bc:	b016      	add	sp, #88	@ 0x58
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	466a      	mov	r2, sp
 80070c2:	f000 f853 	bl	800716c <_fstat_r>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	dbed      	blt.n	80070a6 <__swhatbuf_r+0x12>
 80070ca:	23f0      	movs	r3, #240	@ 0xf0
 80070cc:	9901      	ldr	r1, [sp, #4]
 80070ce:	021b      	lsls	r3, r3, #8
 80070d0:	4019      	ands	r1, r3
 80070d2:	4b04      	ldr	r3, [pc, #16]	@ (80070e4 <__swhatbuf_r+0x50>)
 80070d4:	18c9      	adds	r1, r1, r3
 80070d6:	424b      	negs	r3, r1
 80070d8:	4159      	adcs	r1, r3
 80070da:	e7ea      	b.n	80070b2 <__swhatbuf_r+0x1e>
 80070dc:	2100      	movs	r1, #0
 80070de:	2340      	movs	r3, #64	@ 0x40
 80070e0:	e7e9      	b.n	80070b6 <__swhatbuf_r+0x22>
 80070e2:	46c0      	nop			@ (mov r8, r8)
 80070e4:	ffffe000 	.word	0xffffe000

080070e8 <__smakebuf_r>:
 80070e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070ea:	2602      	movs	r6, #2
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	0005      	movs	r5, r0
 80070f0:	000c      	movs	r4, r1
 80070f2:	b085      	sub	sp, #20
 80070f4:	4233      	tst	r3, r6
 80070f6:	d007      	beq.n	8007108 <__smakebuf_r+0x20>
 80070f8:	0023      	movs	r3, r4
 80070fa:	3347      	adds	r3, #71	@ 0x47
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	2301      	movs	r3, #1
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	b005      	add	sp, #20
 8007106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007108:	ab03      	add	r3, sp, #12
 800710a:	aa02      	add	r2, sp, #8
 800710c:	f7ff ffc2 	bl	8007094 <__swhatbuf_r>
 8007110:	9f02      	ldr	r7, [sp, #8]
 8007112:	9001      	str	r0, [sp, #4]
 8007114:	0039      	movs	r1, r7
 8007116:	0028      	movs	r0, r5
 8007118:	f7ff fbb8 	bl	800688c <_malloc_r>
 800711c:	2800      	cmp	r0, #0
 800711e:	d108      	bne.n	8007132 <__smakebuf_r+0x4a>
 8007120:	220c      	movs	r2, #12
 8007122:	5ea3      	ldrsh	r3, [r4, r2]
 8007124:	059a      	lsls	r2, r3, #22
 8007126:	d4ed      	bmi.n	8007104 <__smakebuf_r+0x1c>
 8007128:	2203      	movs	r2, #3
 800712a:	4393      	bics	r3, r2
 800712c:	431e      	orrs	r6, r3
 800712e:	81a6      	strh	r6, [r4, #12]
 8007130:	e7e2      	b.n	80070f8 <__smakebuf_r+0x10>
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	89a2      	ldrh	r2, [r4, #12]
 8007136:	6020      	str	r0, [r4, #0]
 8007138:	4313      	orrs	r3, r2
 800713a:	81a3      	strh	r3, [r4, #12]
 800713c:	9b03      	ldr	r3, [sp, #12]
 800713e:	6120      	str	r0, [r4, #16]
 8007140:	6167      	str	r7, [r4, #20]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00c      	beq.n	8007160 <__smakebuf_r+0x78>
 8007146:	0028      	movs	r0, r5
 8007148:	230e      	movs	r3, #14
 800714a:	5ee1      	ldrsh	r1, [r4, r3]
 800714c:	f000 f820 	bl	8007190 <_isatty_r>
 8007150:	2800      	cmp	r0, #0
 8007152:	d005      	beq.n	8007160 <__smakebuf_r+0x78>
 8007154:	2303      	movs	r3, #3
 8007156:	89a2      	ldrh	r2, [r4, #12]
 8007158:	439a      	bics	r2, r3
 800715a:	3b02      	subs	r3, #2
 800715c:	4313      	orrs	r3, r2
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	9a01      	ldr	r2, [sp, #4]
 8007164:	4313      	orrs	r3, r2
 8007166:	81a3      	strh	r3, [r4, #12]
 8007168:	e7cc      	b.n	8007104 <__smakebuf_r+0x1c>
	...

0800716c <_fstat_r>:
 800716c:	2300      	movs	r3, #0
 800716e:	b570      	push	{r4, r5, r6, lr}
 8007170:	4d06      	ldr	r5, [pc, #24]	@ (800718c <_fstat_r+0x20>)
 8007172:	0004      	movs	r4, r0
 8007174:	0008      	movs	r0, r1
 8007176:	0011      	movs	r1, r2
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	f7fa fe95 	bl	8001ea8 <_fstat>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d103      	bne.n	800718a <_fstat_r+0x1e>
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d000      	beq.n	800718a <_fstat_r+0x1e>
 8007188:	6023      	str	r3, [r4, #0]
 800718a:	bd70      	pop	{r4, r5, r6, pc}
 800718c:	200002f8 	.word	0x200002f8

08007190 <_isatty_r>:
 8007190:	2300      	movs	r3, #0
 8007192:	b570      	push	{r4, r5, r6, lr}
 8007194:	4d06      	ldr	r5, [pc, #24]	@ (80071b0 <_isatty_r+0x20>)
 8007196:	0004      	movs	r4, r0
 8007198:	0008      	movs	r0, r1
 800719a:	602b      	str	r3, [r5, #0]
 800719c:	f7fa fdee 	bl	8001d7c <_isatty>
 80071a0:	1c43      	adds	r3, r0, #1
 80071a2:	d103      	bne.n	80071ac <_isatty_r+0x1c>
 80071a4:	682b      	ldr	r3, [r5, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d000      	beq.n	80071ac <_isatty_r+0x1c>
 80071aa:	6023      	str	r3, [r4, #0]
 80071ac:	bd70      	pop	{r4, r5, r6, pc}
 80071ae:	46c0      	nop			@ (mov r8, r8)
 80071b0:	200002f8 	.word	0x200002f8

080071b4 <_sbrk_r>:
 80071b4:	2300      	movs	r3, #0
 80071b6:	b570      	push	{r4, r5, r6, lr}
 80071b8:	4d06      	ldr	r5, [pc, #24]	@ (80071d4 <_sbrk_r+0x20>)
 80071ba:	0004      	movs	r4, r0
 80071bc:	0008      	movs	r0, r1
 80071be:	602b      	str	r3, [r5, #0]
 80071c0:	f7fa fff2 	bl	80021a8 <_sbrk>
 80071c4:	1c43      	adds	r3, r0, #1
 80071c6:	d103      	bne.n	80071d0 <_sbrk_r+0x1c>
 80071c8:	682b      	ldr	r3, [r5, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d000      	beq.n	80071d0 <_sbrk_r+0x1c>
 80071ce:	6023      	str	r3, [r4, #0]
 80071d0:	bd70      	pop	{r4, r5, r6, pc}
 80071d2:	46c0      	nop			@ (mov r8, r8)
 80071d4:	200002f8 	.word	0x200002f8

080071d8 <memchr>:
 80071d8:	b2c9      	uxtb	r1, r1
 80071da:	1882      	adds	r2, r0, r2
 80071dc:	4290      	cmp	r0, r2
 80071de:	d101      	bne.n	80071e4 <memchr+0xc>
 80071e0:	2000      	movs	r0, #0
 80071e2:	4770      	bx	lr
 80071e4:	7803      	ldrb	r3, [r0, #0]
 80071e6:	428b      	cmp	r3, r1
 80071e8:	d0fb      	beq.n	80071e2 <memchr+0xa>
 80071ea:	3001      	adds	r0, #1
 80071ec:	e7f6      	b.n	80071dc <memchr+0x4>
	...

080071f0 <_init>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	46c0      	nop			@ (mov r8, r8)
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr

080071fc <_fini>:
 80071fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071fe:	46c0      	nop			@ (mov r8, r8)
 8007200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007202:	bc08      	pop	{r3}
 8007204:	469e      	mov	lr, r3
 8007206:	4770      	bx	lr
