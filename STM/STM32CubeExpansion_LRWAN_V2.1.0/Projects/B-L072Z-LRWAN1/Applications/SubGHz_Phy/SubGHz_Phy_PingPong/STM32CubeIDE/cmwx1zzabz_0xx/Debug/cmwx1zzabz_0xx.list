
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006310  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067d8  080067d8  000077d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067e0  080067e0  000077e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080067e4  080067e4  000077e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000044  20000000  080067e8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000994  20000044  0800682c  00008044  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200009d8  0800682c  000089d8  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c607  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006173  00000000  00000000  00024673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e0  00000000  00000000  0002a7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001416  00000000  00000000  0002bcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0001cb15  00000000  00000000  0002d0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000258e6  00000000  00000000  00049bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0009b5fd  00000000  00000000  0006f4d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0010aad6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000036bc  00000000  00000000  0010ab1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00009587  00000000  00000000  0010e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000149  00000000  00000000  0011775f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000044 	.word	0x20000044
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080063b8 	.word	0x080063b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000048 	.word	0x20000048
 8000104:	080063b8 	.word	0x080063b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4699      	mov	r9, r3
 800045e:	0c03      	lsrs	r3, r0, #16
 8000460:	469c      	mov	ip, r3
 8000462:	0413      	lsls	r3, r2, #16
 8000464:	4647      	mov	r7, r8
 8000466:	0c1b      	lsrs	r3, r3, #16
 8000468:	001d      	movs	r5, r3
 800046a:	000e      	movs	r6, r1
 800046c:	4661      	mov	r1, ip
 800046e:	0404      	lsls	r4, r0, #16
 8000470:	0c24      	lsrs	r4, r4, #16
 8000472:	b580      	push	{r7, lr}
 8000474:	0007      	movs	r7, r0
 8000476:	0c10      	lsrs	r0, r2, #16
 8000478:	434b      	muls	r3, r1
 800047a:	4365      	muls	r5, r4
 800047c:	4341      	muls	r1, r0
 800047e:	4360      	muls	r0, r4
 8000480:	0c2c      	lsrs	r4, r5, #16
 8000482:	18c0      	adds	r0, r0, r3
 8000484:	1824      	adds	r4, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	42a3      	cmp	r3, r4
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	@ 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4356      	muls	r6, r2
 800049a:	0c23      	lsrs	r3, r4, #16
 800049c:	042d      	lsls	r5, r5, #16
 800049e:	0c2d      	lsrs	r5, r5, #16
 80004a0:	1989      	adds	r1, r1, r6
 80004a2:	4463      	add	r3, ip
 80004a4:	0424      	lsls	r4, r4, #16
 80004a6:	1960      	adds	r0, r4, r5
 80004a8:	18c9      	adds	r1, r1, r3
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	d434      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ea:	469b      	mov	fp, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	465a      	mov	r2, fp
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83b      	bhi.n	8000578 <__udivmoddi4+0xc4>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e079      	b.n	80005fa <__udivmoddi4+0x146>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e076      	b.n	8000600 <__udivmoddi4+0x14c>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e029      	b.n	8000580 <__udivmoddi4+0xcc>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	469b      	mov	fp, r3
 8000558:	2320      	movs	r3, #32
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	4652      	mov	r2, sl
 800055e:	40da      	lsrs	r2, r3
 8000560:	4641      	mov	r1, r8
 8000562:	0013      	movs	r3, r2
 8000564:	464a      	mov	r2, r9
 8000566:	408a      	lsls	r2, r1
 8000568:	0017      	movs	r7, r2
 800056a:	4642      	mov	r2, r8
 800056c:	431f      	orrs	r7, r3
 800056e:	4653      	mov	r3, sl
 8000570:	4093      	lsls	r3, r2
 8000572:	001e      	movs	r6, r3
 8000574:	42af      	cmp	r7, r5
 8000576:	d9c3      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000578:	2200      	movs	r2, #0
 800057a:	2300      	movs	r3, #0
 800057c:	9200      	str	r2, [sp, #0]
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	4643      	mov	r3, r8
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0d8      	beq.n	8000538 <__udivmoddi4+0x84>
 8000586:	07fb      	lsls	r3, r7, #31
 8000588:	0872      	lsrs	r2, r6, #1
 800058a:	431a      	orrs	r2, r3
 800058c:	4646      	mov	r6, r8
 800058e:	087b      	lsrs	r3, r7, #1
 8000590:	e00e      	b.n	80005b0 <__udivmoddi4+0xfc>
 8000592:	42ab      	cmp	r3, r5
 8000594:	d101      	bne.n	800059a <__udivmoddi4+0xe6>
 8000596:	42a2      	cmp	r2, r4
 8000598:	d80c      	bhi.n	80005b4 <__udivmoddi4+0x100>
 800059a:	1aa4      	subs	r4, r4, r2
 800059c:	419d      	sbcs	r5, r3
 800059e:	2001      	movs	r0, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2100      	movs	r1, #0
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	414d      	adcs	r5, r1
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d006      	beq.n	80005be <__udivmoddi4+0x10a>
 80005b0:	42ab      	cmp	r3, r5
 80005b2:	d9ee      	bls.n	8000592 <__udivmoddi4+0xde>
 80005b4:	3e01      	subs	r6, #1
 80005b6:	1924      	adds	r4, r4, r4
 80005b8:	416d      	adcs	r5, r5
 80005ba:	2e00      	cmp	r6, #0
 80005bc:	d1f8      	bne.n	80005b0 <__udivmoddi4+0xfc>
 80005be:	9800      	ldr	r0, [sp, #0]
 80005c0:	9901      	ldr	r1, [sp, #4]
 80005c2:	465b      	mov	r3, fp
 80005c4:	1900      	adds	r0, r0, r4
 80005c6:	4169      	adcs	r1, r5
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db24      	blt.n	8000616 <__udivmoddi4+0x162>
 80005cc:	002b      	movs	r3, r5
 80005ce:	465a      	mov	r2, fp
 80005d0:	4644      	mov	r4, r8
 80005d2:	40d3      	lsrs	r3, r2
 80005d4:	002a      	movs	r2, r5
 80005d6:	40e2      	lsrs	r2, r4
 80005d8:	001c      	movs	r4, r3
 80005da:	465b      	mov	r3, fp
 80005dc:	0015      	movs	r5, r2
 80005de:	2b00      	cmp	r3, #0
 80005e0:	db2a      	blt.n	8000638 <__udivmoddi4+0x184>
 80005e2:	0026      	movs	r6, r4
 80005e4:	409e      	lsls	r6, r3
 80005e6:	0033      	movs	r3, r6
 80005e8:	0026      	movs	r6, r4
 80005ea:	4647      	mov	r7, r8
 80005ec:	40be      	lsls	r6, r7
 80005ee:	0032      	movs	r2, r6
 80005f0:	1a80      	subs	r0, r0, r2
 80005f2:	4199      	sbcs	r1, r3
 80005f4:	9000      	str	r0, [sp, #0]
 80005f6:	9101      	str	r1, [sp, #4]
 80005f8:	e79e      	b.n	8000538 <__udivmoddi4+0x84>
 80005fa:	42a3      	cmp	r3, r4
 80005fc:	d8bc      	bhi.n	8000578 <__udivmoddi4+0xc4>
 80005fe:	e782      	b.n	8000506 <__udivmoddi4+0x52>
 8000600:	4642      	mov	r2, r8
 8000602:	2320      	movs	r3, #32
 8000604:	2100      	movs	r1, #0
 8000606:	1a9b      	subs	r3, r3, r2
 8000608:	2200      	movs	r2, #0
 800060a:	9100      	str	r1, [sp, #0]
 800060c:	9201      	str	r2, [sp, #4]
 800060e:	2201      	movs	r2, #1
 8000610:	40da      	lsrs	r2, r3
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	e785      	b.n	8000522 <__udivmoddi4+0x6e>
 8000616:	4642      	mov	r2, r8
 8000618:	2320      	movs	r3, #32
 800061a:	1a9b      	subs	r3, r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	4646      	mov	r6, r8
 8000620:	409a      	lsls	r2, r3
 8000622:	0023      	movs	r3, r4
 8000624:	40f3      	lsrs	r3, r6
 8000626:	4644      	mov	r4, r8
 8000628:	4313      	orrs	r3, r2
 800062a:	002a      	movs	r2, r5
 800062c:	40e2      	lsrs	r2, r4
 800062e:	001c      	movs	r4, r3
 8000630:	465b      	mov	r3, fp
 8000632:	0015      	movs	r5, r2
 8000634:	2b00      	cmp	r3, #0
 8000636:	dad4      	bge.n	80005e2 <__udivmoddi4+0x12e>
 8000638:	4642      	mov	r2, r8
 800063a:	002f      	movs	r7, r5
 800063c:	2320      	movs	r3, #32
 800063e:	0026      	movs	r6, r4
 8000640:	4097      	lsls	r7, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	40de      	lsrs	r6, r3
 8000646:	003b      	movs	r3, r7
 8000648:	4333      	orrs	r3, r6
 800064a:	e7cd      	b.n	80005e8 <__udivmoddi4+0x134>

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			@ (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	@ (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 80006a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 80006a2:	f000 fdd1 	bl	8001248 <SystemApp_Init>
  SubghzApp_Init();
 80006a6:	f000 f98f 	bl	80009c8 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 80006aa:	bd10      	pop	{r4, pc}

080006ac <MX_SubGHz_Phy_Process>:
void MX_SubGHz_Phy_Process(void)
{
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80006ac:	2001      	movs	r0, #1
{
 80006ae:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80006b0:	4240      	negs	r0, r0
 80006b2:	f005 fb19 	bl	8005ce8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 80006b6:	bd10      	pop	{r4, pc}

080006b8 <OnledEvent>:
      break;
  }
}

static void OnledEvent(void *context)
{
 80006b8:	b510      	push	{r4, lr}
  LED_Toggle(LED_RED1);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f001 f8c6 	bl	800184c <BSP_LED_Toggle>
  LED_Toggle(LED_RED2);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f001 f8c3 	bl	800184c <BSP_LED_Toggle>
  UTIL_TIMER_Start(&timerLed);
 80006c6:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <OnledEvent+0x18>)
 80006c8:	f005 fc6a 	bl	8005fa0 <UTIL_TIMER_Start>
}
 80006cc:	bd10      	pop	{r4, pc}
 80006ce:	46c0      	nop			@ (mov r8, r8)
 80006d0:	20000060 	.word	0x20000060

080006d4 <PingPong_Process>:
{
 80006d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  Radio.Sleep();
 80006d6:	4c55      	ldr	r4, [pc, #340]	@ (800082c <PingPong_Process+0x158>)
 80006d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80006da:	4798      	blx	r3
  switch (State)
 80006dc:	4d54      	ldr	r5, [pc, #336]	@ (8000830 <PingPong_Process+0x15c>)
 80006de:	7e28      	ldrb	r0, [r5, #24]
 80006e0:	2804      	cmp	r0, #4
 80006e2:	d84c      	bhi.n	800077e <PingPong_Process+0xaa>
 80006e4:	f7ff fd18 	bl	8000118 <__gnu_thumb1_case_uqi>
 80006e8:	83878703 	.word	0x83878703
 80006ec:	9f          	.byte	0x9f
 80006ed:	00          	.byte	0x00
      if (isMaster == true)
 80006ee:	4a51      	ldr	r2, [pc, #324]	@ (8000834 <PingPong_Process+0x160>)
        if (RxBufferSize > 0)
 80006f0:	8b6b      	ldrh	r3, [r5, #26]
      if (isMaster == true)
 80006f2:	7816      	ldrb	r6, [r2, #0]
 80006f4:	9200      	str	r2, [sp, #0]
 80006f6:	2e00      	cmp	r6, #0
 80006f8:	d046      	beq.n	8000788 <PingPong_Process+0xb4>
        if (RxBufferSize > 0)
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d03f      	beq.n	800077e <PingPong_Process+0xaa>
          if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 80006fe:	4b4e      	ldr	r3, [pc, #312]	@ (8000838 <PingPong_Process+0x164>)
 8000700:	2204      	movs	r2, #4
 8000702:	0018      	movs	r0, r3
 8000704:	494d      	ldr	r1, [pc, #308]	@ (800083c <PingPong_Process+0x168>)
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	f005 fe16 	bl	8006338 <strncmp>
 800070c:	4f4c      	ldr	r7, [pc, #304]	@ (8000840 <PingPong_Process+0x16c>)
 800070e:	1e06      	subs	r6, r0, #0
 8000710:	d124      	bne.n	800075c <PingPong_Process+0x88>
            UTIL_TIMER_Stop(&timerLed);
 8000712:	0028      	movs	r0, r5
 8000714:	f005 fbf0 	bl	8005ef8 <UTIL_TIMER_Stop>
            LED_Off(LED_RED2);
 8000718:	2003      	movs	r0, #3
 800071a:	f001 f887 	bl	800182c <BSP_LED_Off>
            LED_Toggle(LED_RED1);
 800071e:	2001      	movs	r0, #1
 8000720:	f001 f894 	bl	800184c <BSP_LED_Toggle>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 8000724:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000726:	4798      	blx	r3
 8000728:	3032      	adds	r0, #50	@ 0x32
 800072a:	f000 fe17 	bl	800135c <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 800072e:	2201      	movs	r2, #1
 8000730:	0031      	movs	r1, r6
 8000732:	0010      	movs	r0, r2
 8000734:	4b43      	ldr	r3, [pc, #268]	@ (8000844 <PingPong_Process+0x170>)
 8000736:	f005 f981 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800073a:	2201      	movs	r2, #1
 800073c:	0031      	movs	r1, r6
 800073e:	0010      	movs	r0, r2
 8000740:	4b41      	ldr	r3, [pc, #260]	@ (8000848 <PingPong_Process+0x174>)
 8000742:	f005 f97b 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PING, sizeof(PING) - 1);
 8000746:	2204      	movs	r2, #4
 8000748:	0039      	movs	r1, r7
 800074a:	4d40      	ldr	r5, [pc, #256]	@ (800084c <PingPong_Process+0x178>)
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 800074c:	0028      	movs	r0, r5
 800074e:	f005 fe29 	bl	80063a4 <memcpy>
        Radio.Send(BufferTx, PAYLOAD_LEN);
 8000752:	2140      	movs	r1, #64	@ 0x40
 8000754:	0028      	movs	r0, r5
 8000756:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8000758:	4798      	blx	r3
 800075a:	e010      	b.n	800077e <PingPong_Process+0xaa>
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800075c:	0039      	movs	r1, r7
 800075e:	2204      	movs	r2, #4
 8000760:	9801      	ldr	r0, [sp, #4]
 8000762:	f005 fde9 	bl	8006338 <strncmp>
            Radio.Rx(RX_TIMEOUT_VALUE);
 8000766:	6b64      	ldr	r4, [r4, #52]	@ 0x34
          else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 8000768:	1e01      	subs	r1, r0, #0
 800076a:	d109      	bne.n	8000780 <PingPong_Process+0xac>
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800076c:	2201      	movs	r2, #1
            isMaster = false;
 800076e:	9b00      	ldr	r3, [sp, #0]
 8000770:	7018      	strb	r0, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8000772:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <PingPong_Process+0x17c>)
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8000774:	0010      	movs	r0, r2
 8000776:	f005 f961 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
            Radio.Rx(RX_TIMEOUT_VALUE);
 800077a:	4836      	ldr	r0, [pc, #216]	@ (8000854 <PingPong_Process+0x180>)
 800077c:	47a0      	blx	r4
}
 800077e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 8000780:	2201      	movs	r2, #1
 8000782:	2100      	movs	r1, #0
 8000784:	4b34      	ldr	r3, [pc, #208]	@ (8000858 <PingPong_Process+0x184>)
 8000786:	e7f5      	b.n	8000774 <PingPong_Process+0xa0>
        if (RxBufferSize > 0)
 8000788:	2b00      	cmp	r3, #0
 800078a:	d0f8      	beq.n	800077e <PingPong_Process+0xaa>
          if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800078c:	2204      	movs	r2, #4
 800078e:	492c      	ldr	r1, [pc, #176]	@ (8000840 <PingPong_Process+0x16c>)
 8000790:	4829      	ldr	r0, [pc, #164]	@ (8000838 <PingPong_Process+0x164>)
 8000792:	f005 fdd1 	bl	8006338 <strncmp>
 8000796:	1e07      	subs	r7, r0, #0
 8000798:	d11d      	bne.n	80007d6 <PingPong_Process+0x102>
            UTIL_TIMER_Stop(&timerLed);
 800079a:	0028      	movs	r0, r5
 800079c:	f005 fbac 	bl	8005ef8 <UTIL_TIMER_Stop>
            LED_Off(LED_RED1);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f001 f843 	bl	800182c <BSP_LED_Off>
            LED_Toggle(LED_RED2);
 80007a6:	2003      	movs	r0, #3
 80007a8:	f001 f850 	bl	800184c <BSP_LED_Toggle>
            HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 80007ac:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80007ae:	4798      	blx	r3
 80007b0:	3032      	adds	r0, #50	@ 0x32
 80007b2:	f000 fdd3 	bl	800135c <HAL_Delay>
            APP_LOG(TS_ON, VLEVEL_L, "..."
 80007b6:	2201      	movs	r2, #1
 80007b8:	0039      	movs	r1, r7
 80007ba:	0010      	movs	r0, r2
 80007bc:	4b27      	ldr	r3, [pc, #156]	@ (800085c <PingPong_Process+0x188>)
 80007be:	f005 f93d 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 80007c2:	2201      	movs	r2, #1
 80007c4:	0039      	movs	r1, r7
 80007c6:	0010      	movs	r0, r2
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <PingPong_Process+0x18c>)
 80007ca:	f005 f937 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
            memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 80007ce:	4d1f      	ldr	r5, [pc, #124]	@ (800084c <PingPong_Process+0x178>)
 80007d0:	491a      	ldr	r1, [pc, #104]	@ (800083c <PingPong_Process+0x168>)
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 80007d2:	2204      	movs	r2, #4
 80007d4:	e7ba      	b.n	800074c <PingPong_Process+0x78>
            isMaster = true;
 80007d6:	2001      	movs	r0, #1
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 80007d8:	0031      	movs	r1, r6
 80007da:	0002      	movs	r2, r0
            isMaster = true;
 80007dc:	9b00      	ldr	r3, [sp, #0]
 80007de:	7018      	strb	r0, [r3, #0]
            APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <PingPong_Process+0x184>)
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 80007e2:	f005 f92b 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
      Radio.Rx(RX_TIMEOUT_VALUE);
 80007e6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80007e8:	481a      	ldr	r0, [pc, #104]	@ (8000854 <PingPong_Process+0x180>)
 80007ea:	4798      	blx	r3
}
 80007ec:	e7c7      	b.n	800077e <PingPong_Process+0xaa>
      APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 80007ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000864 <PingPong_Process+0x190>)
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 80007f0:	2201      	movs	r2, #1
 80007f2:	2100      	movs	r1, #0
 80007f4:	e015      	b.n	8000822 <PingPong_Process+0x14e>
      if (isMaster == true)
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <PingPong_Process+0x160>)
 80007f8:	7819      	ldrb	r1, [r3, #0]
 80007fa:	2900      	cmp	r1, #0
 80007fc:	d00f      	beq.n	800081e <PingPong_Process+0x14a>
        HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 80007fe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8000800:	4798      	blx	r3
 8000802:	69eb      	ldr	r3, [r5, #28]
 8000804:	3332      	adds	r3, #50	@ 0x32
 8000806:	1818      	adds	r0, r3, r0
 8000808:	f000 fda8 	bl	800135c <HAL_Delay>
        APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800080c:	2201      	movs	r2, #1
 800080e:	2100      	movs	r1, #0
 8000810:	0010      	movs	r0, r2
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <PingPong_Process+0x174>)
 8000814:	f005 f912 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
        memcpy(BufferTx, PING, sizeof(PING) - 1);
 8000818:	4d0c      	ldr	r5, [pc, #48]	@ (800084c <PingPong_Process+0x178>)
 800081a:	4909      	ldr	r1, [pc, #36]	@ (8000840 <PingPong_Process+0x16c>)
 800081c:	e7d9      	b.n	80007d2 <PingPong_Process+0xfe>
        APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800081e:	2201      	movs	r2, #1
 8000820:	4b0b      	ldr	r3, [pc, #44]	@ (8000850 <PingPong_Process+0x17c>)
      APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 8000822:	0010      	movs	r0, r2
 8000824:	e7dd      	b.n	80007e2 <PingPong_Process+0x10e>
 8000826:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <PingPong_Process+0x17c>)
 8000828:	e7e2      	b.n	80007f0 <PingPong_Process+0x11c>
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	080065b0 	.word	0x080065b0
 8000830:	20000060 	.word	0x20000060
 8000834:	20000000 	.word	0x20000000
 8000838:	2000019f 	.word	0x2000019f
 800083c:	0800662c 	.word	0x0800662c
 8000840:	0800664d 	.word	0x0800664d
 8000844:	08006631 	.word	0x08006631
 8000848:	0800663b 	.word	0x0800663b
 800084c:	200000a0 	.word	0x200000a0
 8000850:	08006652 	.word	0x08006652
 8000854:	00000bb8 	.word	0x00000bb8
 8000858:	08006663 	.word	0x08006663
 800085c:	08006675 	.word	0x08006675
 8000860:	0800667f 	.word	0x0800667f
 8000864:	08006658 	.word	0x08006658

08000868 <OnRxError>:
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 8000868:	2201      	movs	r2, #1
{
 800086a:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800086c:	2100      	movs	r1, #0
 800086e:	0010      	movs	r0, r2
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <OnRxError+0x20>)
 8000872:	f005 f8e3 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  State = RX_ERROR;
 8000876:	2202      	movs	r2, #2
 8000878:	4b04      	ldr	r3, [pc, #16]	@ (800088c <OnRxError+0x24>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800087a:	2100      	movs	r1, #0
 800087c:	2001      	movs	r0, #1
  State = RX_ERROR;
 800087e:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8000880:	f005 f9fe 	bl	8005c80 <UTIL_SEQ_SetTask>
}
 8000884:	bd10      	pop	{r4, pc}
 8000886:	46c0      	nop			@ (mov r8, r8)
 8000888:	08006691 	.word	0x08006691
 800088c:	20000060 	.word	0x20000060

08000890 <OnRxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 8000890:	2201      	movs	r2, #1
{
 8000892:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 8000894:	2100      	movs	r1, #0
 8000896:	0010      	movs	r0, r2
 8000898:	4b04      	ldr	r3, [pc, #16]	@ (80008ac <OnRxTimeout+0x1c>)
 800089a:	f005 f8cf 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  State = RX_TIMEOUT;
 800089e:	2001      	movs	r0, #1
 80008a0:	4b03      	ldr	r3, [pc, #12]	@ (80008b0 <OnRxTimeout+0x20>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80008a2:	2100      	movs	r1, #0
  State = RX_TIMEOUT;
 80008a4:	7618      	strb	r0, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80008a6:	f005 f9eb 	bl	8005c80 <UTIL_SEQ_SetTask>
}
 80008aa:	bd10      	pop	{r4, pc}
 80008ac:	0800669d 	.word	0x0800669d
 80008b0:	20000060 	.word	0x20000060

080008b4 <OnTxTimeout>:
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 80008b4:	2201      	movs	r2, #1
{
 80008b6:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 80008b8:	2100      	movs	r1, #0
 80008ba:	0010      	movs	r0, r2
 80008bc:	4b05      	ldr	r3, [pc, #20]	@ (80008d4 <OnTxTimeout+0x20>)
 80008be:	f005 f8bd 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  State = TX_TIMEOUT;
 80008c2:	2204      	movs	r2, #4
 80008c4:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <OnTxTimeout+0x24>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80008c6:	2100      	movs	r1, #0
 80008c8:	2001      	movs	r0, #1
  State = TX_TIMEOUT;
 80008ca:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80008cc:	f005 f9d8 	bl	8005c80 <UTIL_SEQ_SetTask>
}
 80008d0:	bd10      	pop	{r4, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	080066ab 	.word	0x080066ab
 80008d8:	20000060 	.word	0x20000060

080008dc <OnRxDone>:
{
 80008dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008de:	0016      	movs	r6, r2
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 80008e0:	2201      	movs	r2, #1
{
 80008e2:	b085      	sub	sp, #20
 80008e4:	001f      	movs	r7, r3
 80008e6:	000c      	movs	r4, r1
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 80008e8:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <OnRxDone+0xa4>)
 80008ea:	2100      	movs	r1, #0
{
 80008ec:	9003      	str	r0, [sp, #12]
  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 80008ee:	0010      	movs	r0, r2
 80008f0:	f005 f8a4 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2100      	movs	r1, #0
 80008f8:	0010      	movs	r0, r2
 80008fa:	4b22      	ldr	r3, [pc, #136]	@ (8000984 <OnRxDone+0xa8>)
 80008fc:	9701      	str	r7, [sp, #4]
 80008fe:	9600      	str	r6, [sp, #0]
 8000900:	f005 f89c 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  State = RX;
 8000904:	2100      	movs	r1, #0
  SnrValue = LoraSnr_FskCfo;
 8000906:	4b20      	ldr	r3, [pc, #128]	@ (8000988 <OnRxDone+0xac>)
 8000908:	4d20      	ldr	r5, [pc, #128]	@ (800098c <OnRxDone+0xb0>)
 800090a:	77df      	strb	r7, [r3, #31]
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800090c:	4f20      	ldr	r7, [pc, #128]	@ (8000990 <OnRxDone+0xb4>)
 800090e:	22ff      	movs	r2, #255	@ 0xff
 8000910:	0038      	movs	r0, r7
  State = RX;
 8000912:	7629      	strb	r1, [r5, #24]
  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 8000914:	f005 fd08 	bl	8006328 <memset>
  RxBufferSize = size;
 8000918:	836c      	strh	r4, [r5, #26]
  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800091a:	2cff      	cmp	r4, #255	@ 0xff
 800091c:	d804      	bhi.n	8000928 <OnRxDone+0x4c>
    memcpy(BufferRx, payload, RxBufferSize);
 800091e:	0022      	movs	r2, r4
 8000920:	0038      	movs	r0, r7
 8000922:	9903      	ldr	r1, [sp, #12]
 8000924:	f005 fd3e 	bl	80063a4 <memcpy>
  RssiValue = rssi;
 8000928:	3502      	adds	r5, #2
 800092a:	77ee      	strb	r6, [r5, #31]
  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800092c:	2201      	movs	r2, #1
 800092e:	9400      	str	r4, [sp, #0]
 8000930:	2100      	movs	r1, #0
 8000932:	2003      	movs	r0, #3
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <OnRxDone+0xb8>)
 8000936:	f005 f881 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 800093a:	2400      	movs	r4, #0
    if (i % 16 == 15)
 800093c:	250f      	movs	r5, #15
    APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800093e:	5d3a      	ldrb	r2, [r7, r4]
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <OnRxDone+0xbc>)
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	2200      	movs	r2, #0
 8000946:	2003      	movs	r0, #3
 8000948:	0011      	movs	r1, r2
 800094a:	f005 f877 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
    if (i % 16 == 15)
 800094e:	0023      	movs	r3, r4
 8000950:	402b      	ands	r3, r5
 8000952:	2b0f      	cmp	r3, #15
 8000954:	d105      	bne.n	8000962 <OnRxDone+0x86>
      APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 8000956:	2200      	movs	r2, #0
 8000958:	2003      	movs	r0, #3
 800095a:	0011      	movs	r1, r2
 800095c:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <OnRxDone+0xc0>)
 800095e:	f005 f86d 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  for (int i = 0; i < PAYLOAD_LEN; i++)
 8000962:	3401      	adds	r4, #1
 8000964:	2c40      	cmp	r4, #64	@ 0x40
 8000966:	d1ea      	bne.n	800093e <OnRxDone+0x62>
  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 8000968:	2200      	movs	r2, #0
 800096a:	4b0c      	ldr	r3, [pc, #48]	@ (800099c <OnRxDone+0xc0>)
 800096c:	0011      	movs	r1, r2
 800096e:	2003      	movs	r0, #3
 8000970:	f005 f864 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 8000974:	2100      	movs	r1, #0
 8000976:	2001      	movs	r0, #1
 8000978:	f005 f982 	bl	8005c80 <UTIL_SEQ_SetTask>
}
 800097c:	b005      	add	sp, #20
 800097e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000980:	080066b9 	.word	0x080066b9
 8000984:	080066c4 	.word	0x080066c4
 8000988:	20000061 	.word	0x20000061
 800098c:	20000060 	.word	0x20000060
 8000990:	2000019f 	.word	0x2000019f
 8000994:	080066e6 	.word	0x080066e6
 8000998:	080066fa 	.word	0x080066fa
 800099c:	080066f7 	.word	0x080066f7

080009a0 <OnTxDone>:
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 80009a0:	2201      	movs	r2, #1
{
 80009a2:	b510      	push	{r4, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 80009a4:	2100      	movs	r1, #0
 80009a6:	0010      	movs	r0, r2
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <OnTxDone+0x20>)
 80009aa:	f005 f847 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  State = TX;
 80009ae:	2203      	movs	r2, #3
 80009b0:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <OnTxDone+0x24>)
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80009b2:	2100      	movs	r1, #0
 80009b4:	2001      	movs	r0, #1
  State = TX;
 80009b6:	761a      	strb	r2, [r3, #24]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 80009b8:	f005 f962 	bl	8005c80 <UTIL_SEQ_SetTask>
}
 80009bc:	bd10      	pop	{r4, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	080066ff 	.word	0x080066ff
 80009c4:	20000060 	.word	0x20000060

080009c8 <SubghzApp_Init>:
  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 80009c8:	2200      	movs	r2, #0
{
 80009ca:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n",
 80009cc:	2400      	movs	r4, #0
 80009ce:	2501      	movs	r5, #1
{
 80009d0:	b08d      	sub	sp, #52	@ 0x34
  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 80009d2:	0011      	movs	r1, r2
 80009d4:	4b4e      	ldr	r3, [pc, #312]	@ (8000b10 <SubghzApp_Init+0x148>)
 80009d6:	2002      	movs	r0, #2
 80009d8:	f005 f830 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n",
 80009dc:	0022      	movs	r2, r4
 80009de:	0021      	movs	r1, r4
 80009e0:	4b4c      	ldr	r3, [pc, #304]	@ (8000b14 <SubghzApp_Init+0x14c>)
 80009e2:	9402      	str	r4, [sp, #8]
 80009e4:	9501      	str	r5, [sp, #4]
 80009e6:	9500      	str	r5, [sp, #0]
 80009e8:	2002      	movs	r0, #2
 80009ea:	f005 f827 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&timerLed, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 80009ee:	4e4a      	ldr	r6, [pc, #296]	@ (8000b18 <SubghzApp_Init+0x150>)
 80009f0:	0022      	movs	r2, r4
 80009f2:	4b4a      	ldr	r3, [pc, #296]	@ (8000b1c <SubghzApp_Init+0x154>)
 80009f4:	4269      	negs	r1, r5
 80009f6:	0030      	movs	r0, r6
 80009f8:	9400      	str	r4, [sp, #0]
 80009fa:	f005 fa1f 	bl	8005e3c <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&timerLed, LED_PERIOD_MS);
 80009fe:	21c8      	movs	r1, #200	@ 0xc8
 8000a00:	0030      	movs	r0, r6
 8000a02:	f005 fb0b 	bl	800601c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&timerLed);
 8000a06:	0030      	movs	r0, r6
 8000a08:	f005 faca 	bl	8005fa0 <UTIL_TIMER_Start>
  Radio.Init(&RadioEvents);
 8000a0c:	0030      	movs	r0, r6
  RadioEvents.TxDone = OnTxDone;
 8000a0e:	4b44      	ldr	r3, [pc, #272]	@ (8000b20 <SubghzApp_Init+0x158>)
  Radio.Init(&RadioEvents);
 8000a10:	3024      	adds	r0, #36	@ 0x24
  RadioEvents.TxDone = OnTxDone;
 8000a12:	6273      	str	r3, [r6, #36]	@ 0x24
  RadioEvents.RxDone = OnRxDone;
 8000a14:	4b43      	ldr	r3, [pc, #268]	@ (8000b24 <SubghzApp_Init+0x15c>)
 8000a16:	62f3      	str	r3, [r6, #44]	@ 0x2c
  RadioEvents.TxTimeout = OnTxTimeout;
 8000a18:	4b43      	ldr	r3, [pc, #268]	@ (8000b28 <SubghzApp_Init+0x160>)
 8000a1a:	62b3      	str	r3, [r6, #40]	@ 0x28
  RadioEvents.RxTimeout = OnRxTimeout;
 8000a1c:	4b43      	ldr	r3, [pc, #268]	@ (8000b2c <SubghzApp_Init+0x164>)
 8000a1e:	6333      	str	r3, [r6, #48]	@ 0x30
  RadioEvents.RxError = OnRxError;
 8000a20:	4b43      	ldr	r3, [pc, #268]	@ (8000b30 <SubghzApp_Init+0x168>)
 8000a22:	6373      	str	r3, [r6, #52]	@ 0x34
  Radio.Init(&RadioEvents);
 8000a24:	4b43      	ldr	r3, [pc, #268]	@ (8000b34 <SubghzApp_Init+0x16c>)
 8000a26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4798      	blx	r3
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8000a2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 8000a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 8000a34:	0d80      	lsrs	r0, r0, #22
 8000a36:	61f0      	str	r0, [r6, #28]
  Radio.SetChannel(RF_FREQUENCY);
 8000a38:	68db      	ldr	r3, [r3, #12]
 8000a3a:	483f      	ldr	r0, [pc, #252]	@ (8000b38 <SubghzApp_Init+0x170>)
 8000a3c:	4798      	blx	r3
  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 8000a3e:	0022      	movs	r2, r4
 8000a40:	0021      	movs	r1, r4
 8000a42:	4b3e      	ldr	r3, [pc, #248]	@ (8000b3c <SubghzApp_Init+0x174>)
 8000a44:	2002      	movs	r0, #2
 8000a46:	f004 fff9 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 8000a4a:	0022      	movs	r2, r4
 8000a4c:	0021      	movs	r1, r4
 8000a4e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b40 <SubghzApp_Init+0x178>)
 8000a50:	2002      	movs	r0, #2
 8000a52:	f004 fff3 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 8000a56:	227d      	movs	r2, #125	@ 0x7d
 8000a58:	0021      	movs	r1, r4
 8000a5a:	9200      	str	r2, [sp, #0]
 8000a5c:	4b39      	ldr	r3, [pc, #228]	@ (8000b44 <SubghzApp_Init+0x17c>)
 8000a5e:	0022      	movs	r2, r4
 8000a60:	2002      	movs	r0, #2
 8000a62:	f004 ffeb 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 8000a66:	2207      	movs	r2, #7
 8000a68:	0021      	movs	r1, r4
 8000a6a:	0017      	movs	r7, r2
 8000a6c:	9200      	str	r2, [sp, #0]
 8000a6e:	4b36      	ldr	r3, [pc, #216]	@ (8000b48 <SubghzApp_Init+0x180>)
 8000a70:	0022      	movs	r2, r4
 8000a72:	2002      	movs	r0, #2
 8000a74:	f004 ffe2 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8000a78:	4b34      	ldr	r3, [pc, #208]	@ (8000b4c <SubghzApp_Init+0x184>)
 8000a7a:	0028      	movs	r0, r5
 8000a7c:	9308      	str	r3, [sp, #32]
 8000a7e:	2308      	movs	r3, #8
 8000a80:	9302      	str	r3, [sp, #8]
 8000a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000a84:	9700      	str	r7, [sp, #0]
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	210e      	movs	r1, #14
 8000a8a:	0017      	movs	r7, r2
 8000a8c:	0023      	movs	r3, r4
 8000a8e:	0022      	movs	r2, r4
 8000a90:	9407      	str	r4, [sp, #28]
 8000a92:	9406      	str	r4, [sp, #24]
 8000a94:	9405      	str	r4, [sp, #20]
 8000a96:	9504      	str	r5, [sp, #16]
 8000a98:	9403      	str	r4, [sp, #12]
 8000a9a:	9501      	str	r5, [sp, #4]
 8000a9c:	47b8      	blx	r7
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8000a9e:	2305      	movs	r3, #5
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	3303      	adds	r3, #3
 8000aa4:	9301      	str	r3, [sp, #4]
 8000aa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000aa8:	2207      	movs	r2, #7
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	0021      	movs	r1, r4
 8000aae:	001f      	movs	r7, r3
 8000ab0:	0028      	movs	r0, r5
 8000ab2:	002b      	movs	r3, r5
 8000ab4:	9509      	str	r5, [sp, #36]	@ 0x24
 8000ab6:	9408      	str	r4, [sp, #32]
 8000ab8:	9407      	str	r4, [sp, #28]
 8000aba:	9406      	str	r4, [sp, #24]
 8000abc:	9505      	str	r5, [sp, #20]
 8000abe:	9404      	str	r4, [sp, #16]
 8000ac0:	9403      	str	r4, [sp, #12]
 8000ac2:	9400      	str	r4, [sp, #0]
 8000ac4:	47b8      	blx	r7
  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8000ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000ac8:	21ff      	movs	r1, #255	@ 0xff
 8000aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000acc:	0028      	movs	r0, r5
 8000ace:	4798      	blx	r3
  LED_Init(LED_RED1);
 8000ad0:	0028      	movs	r0, r5
 8000ad2:	f000 fe69 	bl	80017a8 <BSP_LED_Init>
  LED_Init(LED_RED2);
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f000 fe66 	bl	80017a8 <BSP_LED_Init>
  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 8000adc:	0021      	movs	r1, r4
 8000ade:	22ff      	movs	r2, #255	@ 0xff
 8000ae0:	481b      	ldr	r0, [pc, #108]	@ (8000b50 <SubghzApp_Init+0x188>)
 8000ae2:	f005 fc21 	bl	8006328 <memset>
  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 8000ae6:	69f2      	ldr	r2, [r6, #28]
 8000ae8:	0021      	movs	r1, r4
 8000aea:	9200      	str	r2, [sp, #0]
 8000aec:	0028      	movs	r0, r5
 8000aee:	002a      	movs	r2, r5
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <SubghzApp_Init+0x18c>)
 8000af2:	f004 ffa3 	bl	8005a3c <UTIL_ADV_TRACE_COND_FSend>
  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 8000af6:	69f0      	ldr	r0, [r6, #28]
 8000af8:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <SubghzApp_Init+0x184>)
 8000afa:	18c0      	adds	r0, r0, r3
 8000afc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000afe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b00:	4798      	blx	r3
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 8000b02:	0021      	movs	r1, r4
 8000b04:	0028      	movs	r0, r5
 8000b06:	4a14      	ldr	r2, [pc, #80]	@ (8000b58 <SubghzApp_Init+0x190>)
 8000b08:	f005 f954 	bl	8005db4 <UTIL_SEQ_RegTask>
}
 8000b0c:	b00d      	add	sp, #52	@ 0x34
 8000b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b10:	0800670a 	.word	0x0800670a
 8000b14:	08006718 	.word	0x08006718
 8000b18:	20000060 	.word	0x20000060
 8000b1c:	080006b9 	.word	0x080006b9
 8000b20:	080009a1 	.word	0x080009a1
 8000b24:	080008dd 	.word	0x080008dd
 8000b28:	080008b5 	.word	0x080008b5
 8000b2c:	08000891 	.word	0x08000891
 8000b30:	08000869 	.word	0x08000869
 8000b34:	080065b0 	.word	0x080065b0
 8000b38:	33bca100 	.word	0x33bca100
 8000b3c:	08006731 	.word	0x08006731
 8000b40:	08006743 	.word	0x08006743
 8000b44:	08006755 	.word	0x08006755
 8000b48:	08006766 	.word	0x08006766
 8000b4c:	00000bb8 	.word	0x00000bb8
 8000b50:	200000a0 	.word	0x200000a0
 8000b54:	08006773 	.word	0x08006773
 8000b58:	080006d5 	.word	0x080006d5

08000b5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b5c:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4b08      	ldr	r3, [pc, #32]	@ (8000b84 <MX_DMA_Init+0x28>)

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000b62:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b66:	430a      	orrs	r2, r1
 8000b68:	631a      	str	r2, [r3, #48]	@ 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000b6a:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	400b      	ands	r3, r1
 8000b70:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000b72:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b74:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000b76:	f001 f8cd 	bl	8001d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000b7a:	200b      	movs	r0, #11
 8000b7c:	f001 f8f4 	bl	8001d68 <HAL_NVIC_EnableIRQ>

}
 8000b80:	bd07      	pop	{r0, r1, r2, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	40021000 	.word	0x40021000

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8c:	222c      	movs	r2, #44	@ 0x2c
 8000b8e:	2100      	movs	r1, #0
 8000b90:	a807      	add	r0, sp, #28
 8000b92:	f005 fbc9 	bl	8006328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b96:	2214      	movs	r2, #20
 8000b98:	2100      	movs	r1, #0
 8000b9a:	a801      	add	r0, sp, #4
 8000b9c:	f005 fbc4 	bl	8006328 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000ba4:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8000ba6:	2380      	movs	r3, #128	@ 0x80
 8000ba8:	031b      	lsls	r3, r3, #12
 8000baa:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000bac:	2380      	movs	r3, #128	@ 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000bae:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb0:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000bb2:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000bb6:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb8:	940a      	str	r4, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000bba:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f001 fc76 	bl	80024ac <HAL_RCC_OscConfig>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <SystemClock_Config+0x3e>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc8:	2380      	movs	r3, #128	@ 0x80
 8000bca:	4a11      	ldr	r2, [pc, #68]	@ (8000c10 <SystemClock_Config+0x88>)
 8000bcc:	055b      	lsls	r3, r3, #21
 8000bce:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6393      	str	r3, [r2, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8000c14 <SystemClock_Config+0x8c>)
 8000bd6:	4b10      	ldr	r3, [pc, #64]	@ (8000c18 <SystemClock_Config+0x90>)
 8000bd8:	6811      	ldr	r1, [r2, #0]
 8000bda:	4019      	ands	r1, r3
 8000bdc:	2380      	movs	r3, #128	@ 0x80
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	430b      	orrs	r3, r1
 8000be2:	6013      	str	r3, [r2, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8000be4:	6851      	ldr	r1, [r2, #4]
 8000be6:	000b      	movs	r3, r1
 8000be8:	4023      	ands	r3, r4
 8000bea:	4221      	tst	r1, r4
 8000bec:	d1fa      	bne.n	8000be4 <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000bee:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bf0:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000bf2:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bf4:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	3a0c      	subs	r2, #12
 8000bf8:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c00:	f001 fede 	bl	80029c0 <HAL_RCC_ClockConfig>
 8000c04:	2800      	cmp	r0, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x84>
 8000c08:	b672      	cpsid	i
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <SystemClock_Config+0x82>
}
 8000c0c:	b014      	add	sp, #80	@ 0x50
 8000c0e:	bd10      	pop	{r4, pc}
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40007000 	.word	0x40007000
 8000c18:	ffffe7ff 	.word	0xffffe7ff

08000c1c <main>:
{
 8000c1c:	b510      	push	{r4, lr}
  HAL_Init();
 8000c1e:	f001 f841 	bl	8001ca4 <HAL_Init>
  SystemClock_Config();
 8000c22:	f7ff ffb1 	bl	8000b88 <SystemClock_Config>
  MX_SubGHz_Phy_Init();
 8000c26:	f7ff fd3b 	bl	80006a0 <MX_SubGHz_Phy_Init>
    MX_SubGHz_Phy_Process();
 8000c2a:	f7ff fd3f 	bl	80006ac <MX_SubGHz_Phy_Process>
  while (1)
 8000c2e:	e7fc      	b.n	8000c2a <main+0xe>

08000c30 <Error_Handler>:
 8000c30:	b672      	cpsid	i
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <Error_Handler+0x2>

08000c34 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c34:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8000c36:	2500      	movs	r5, #0
{
 8000c38:	b091      	sub	sp, #68	@ 0x44
  RTC_TimeTypeDef sTime = {0};
 8000c3a:	2214      	movs	r2, #20
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	a801      	add	r0, sp, #4
 8000c40:	f005 fb72 	bl	8006328 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8000c44:	2228      	movs	r2, #40	@ 0x28
 8000c46:	0029      	movs	r1, r5
 8000c48:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 8000c4a:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000c4c:	f005 fb6c 	bl	8006328 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c50:	4c24      	ldr	r4, [pc, #144]	@ (8000ce4 <MX_RTC_Init+0xb0>)
 8000c52:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c54:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 8000c56:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8000c58:	231f      	movs	r3, #31
 8000c5a:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8000c5c:	4b23      	ldr	r3, [pc, #140]	@ (8000cec <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c5e:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8000c60:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c62:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c64:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c66:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c68:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c6a:	f002 f937 	bl	8002edc <HAL_RTC_Init>
 8000c6e:	42a8      	cmp	r0, r5
 8000c70:	d001      	beq.n	8000c76 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 8000c72:	f7ff ffdd 	bl	8000c30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000c76:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	0020      	movs	r0, r4
 8000c7c:	a901      	add	r1, sp, #4
  sTime.Hours = 0;
 8000c7e:	809d      	strh	r5, [r3, #4]
  sTime.Seconds = 0;
 8000c80:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000c82:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000c84:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000c86:	f002 f991 	bl	8002fac <HAL_RTC_SetTime>
 8000c8a:	2800      	cmp	r0, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000c8e:	f7ff ffcf 	bl	8000c30 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c92:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c94:	2200      	movs	r2, #0
 8000c96:	4669      	mov	r1, sp
 8000c98:	0020      	movs	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000c9a:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000c9c:	f002 fa02 	bl	80030a4 <HAL_RTC_SetDate>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000ca4:	f7ff ffc4 	bl	8000c30 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8000ca8:	2200      	movs	r2, #0
 8000caa:	466b      	mov	r3, sp
 8000cac:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 8000cae:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8000cb0:	23a0      	movs	r3, #160	@ 0xa0
 8000cb2:	051b      	lsls	r3, r3, #20
 8000cb4:	930c      	str	r3, [sp, #48]	@ 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8000cb6:	2319      	movs	r3, #25
 8000cb8:	211e      	movs	r1, #30
 8000cba:	446b      	add	r3, sp
 8000cbc:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8000cbe:	2380      	movs	r3, #128	@ 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000cc0:	0020      	movs	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 8000cc2:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000cc4:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 8000cc6:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000cc8:	9209      	str	r2, [sp, #36]	@ 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000cca:	920a      	str	r2, [sp, #40]	@ 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000ccc:	920b      	str	r2, [sp, #44]	@ 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000cce:	920d      	str	r2, [sp, #52]	@ 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 8000cd0:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000cd2:	f002 fa4d 	bl	8003170 <HAL_RTC_SetAlarm_IT>
 8000cd6:	2800      	cmp	r0, #0
 8000cd8:	d001      	beq.n	8000cde <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8000cda:	f7ff ffa9 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cde:	b011      	add	sp, #68	@ 0x44
 8000ce0:	bd30      	pop	{r4, r5, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	200002a0 	.word	0x200002a0
 8000ce8:	40002800 	.word	0x40002800
 8000cec:	000003ff 	.word	0x000003ff
 8000cf0:	00010101 	.word	0x00010101

08000cf4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8000cf4:	b510      	push	{r4, lr}
 8000cf6:	0004      	movs	r4, r0
 8000cf8:	b08e      	sub	sp, #56	@ 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	2238      	movs	r2, #56	@ 0x38
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4668      	mov	r0, sp
 8000d00:	f005 fb12 	bl	8006328 <memset>
  if (rtcHandle->Instance == RTC)
 8000d04:	4b0f      	ldr	r3, [pc, #60]	@ (8000d44 <HAL_RTC_MspInit+0x50>)
 8000d06:	6822      	ldr	r2, [r4, #0]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d118      	bne.n	8000d3e <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000d0c:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8000d10:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d12:	33fc      	adds	r3, #252	@ 0xfc
 8000d14:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d16:	f001 fbc9 	bl	80024ac <HAL_RCC_OscConfig>
 8000d1a:	2800      	cmp	r0, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8000d1e:	f7ff ff87 	bl	8000c30 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d22:	2380      	movs	r3, #128	@ 0x80
 8000d24:	4a08      	ldr	r2, [pc, #32]	@ (8000d48 <HAL_RTC_MspInit+0x54>)
 8000d26:	02db      	lsls	r3, r3, #11
 8000d28:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000d2a:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8000d2c:	430b      	orrs	r3, r1
 8000d2e:	6513      	str	r3, [r2, #80]	@ 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	0011      	movs	r1, r2
 8000d34:	f000 ffee 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f001 f815 	bl	8001d68 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8000d3e:	b00e      	add	sp, #56	@ 0x38
 8000d40:	bd10      	pop	{r4, pc}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	40002800 	.word	0x40002800
 8000d48:	40021000 	.word	0x40021000

08000d4c <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8000d4c:	4b01      	ldr	r3, [pc, #4]	@ (8000d54 <RTC_IF_GetTimerContext+0x8>)
 8000d4e:	6818      	ldr	r0, [r3, #0]
}
 8000d50:	4770      	bx	lr
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	200002c4 	.word	0x200002c4

08000d58 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8000d58:	2003      	movs	r0, #3
 8000d5a:	4770      	bx	lr

08000d5c <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000d5c:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8000d5e:	0e41      	lsrs	r1, r0, #25
 8000d60:	227d      	movs	r2, #125	@ 0x7d
 8000d62:	2300      	movs	r3, #0
 8000d64:	01c0      	lsls	r0, r0, #7
 8000d66:	f7ff fb57 	bl	8000418 <__aeabi_uldivmod>
}
 8000d6a:	bd10      	pop	{r4, pc}

08000d6c <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8000d6c:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8000d6e:	227d      	movs	r2, #125	@ 0x7d
 8000d70:	2300      	movs	r3, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	f7ff fb70 	bl	8000458 <__aeabi_lmul>
 8000d78:	0649      	lsls	r1, r1, #25
 8000d7a:	09c0      	lsrs	r0, r0, #7
 8000d7c:	4308      	orrs	r0, r1
}
 8000d7e:	bd10      	pop	{r4, pc}

08000d80 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000d80:	4806      	ldr	r0, [pc, #24]	@ (8000d9c <RTC_IF_StopTimer+0x1c>)
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <RTC_IF_StopTimer+0x20>)
 8000d84:	6801      	ldr	r1, [r0, #0]
{
 8000d86:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000d88:	68ca      	ldr	r2, [r1, #12]
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	0049      	lsls	r1, r1, #1
 8000d94:	f001 ffde 	bl	8002d54 <HAL_RTC_DeactivateAlarm>
}
 8000d98:	2000      	movs	r0, #0
 8000d9a:	bd10      	pop	{r4, pc}
 8000d9c:	200002a0 	.word	0x200002a0
 8000da0:	fffffe7f 	.word	0xfffffe7f

08000da4 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8000da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000da6:	4e25      	ldr	r6, [pc, #148]	@ (8000e3c <RTC_GetCalendarValue+0x98>)
{
 8000da8:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000daa:	2200      	movs	r2, #0
 8000dac:	0030      	movs	r0, r6
{
 8000dae:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000db0:	f002 fabc 	bl	800332c <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000db4:	4f22      	ldr	r7, [pc, #136]	@ (8000e40 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8000db6:	2200      	movs	r2, #0
 8000db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dba:	0029      	movs	r1, r5
 8000dbc:	0030      	movs	r0, r6
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	f002 fade 	bl	8003380 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	0021      	movs	r1, r4
 8000dc8:	0030      	movs	r0, r6
 8000dca:	f002 faaf 	bl	800332c <HAL_RTC_GetTime>
 8000dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8000dd0:	9a01      	ldr	r2, [sp, #4]
 8000dd2:	4053      	eors	r3, r2
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1ec      	bne.n	8000db4 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000dda:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000ddc:	78ea      	ldrb	r2, [r5, #3]
 8000dde:	4819      	ldr	r0, [pc, #100]	@ (8000e44 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000de0:	786e      	ldrb	r6, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000de2:	4350      	muls	r0, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000de4:	400a      	ands	r2, r1
 8000de6:	1e53      	subs	r3, r2, #1
 8000de8:	419a      	sbcs	r2, r3
 8000dea:	4253      	negs	r3, r2
 8000dec:	4a16      	ldr	r2, [pc, #88]	@ (8000e48 <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000dee:	3e01      	subs	r6, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000df0:	4013      	ands	r3, r2
 8000df2:	4a16      	ldr	r2, [pc, #88]	@ (8000e4c <RTC_GetCalendarValue+0xa8>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

  calendarValue += (RTC_DateStruct->Date - 1);
 8000df4:	78ad      	ldrb	r5, [r5, #2]
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000df6:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000df8:	223d      	movs	r2, #61	@ 0x3d
 8000dfa:	4372      	muls	r2, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8000dfc:	0076      	lsls	r6, r6, #1
 8000dfe:	40f3      	lsrs	r3, r6
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000e00:	3201      	adds	r2, #1
 8000e02:	0fd7      	lsrs	r7, r2, #31
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000e04:	3003      	adds	r0, #3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000e06:	18ba      	adds	r2, r7, r2
 8000e08:	3d01      	subs	r5, #1
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000e0a:	0880      	lsrs	r0, r0, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 8000e0c:	1828      	adds	r0, r5, r0
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000e0e:	1052      	asrs	r2, r2, #1
 8000e10:	1812      	adds	r2, r2, r0
  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8000e12:	20e1      	movs	r0, #225	@ 0xe1
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8000e14:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 8000e16:	1ad3      	subs	r3, r2, r3
  calendarValue *= SECONDS_IN_1DAY;
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <RTC_GetCalendarValue+0xac>)
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8000e1a:	0100      	lsls	r0, r0, #4
  calendarValue *= SECONDS_IN_1DAY;
 8000e1c:	4353      	muls	r3, r2
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8000e1e:	7822      	ldrb	r2, [r4, #0]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8000e20:	7861      	ldrb	r1, [r4, #1]
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8000e22:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8000e24:	223c      	movs	r2, #60	@ 0x3c
 8000e26:	434a      	muls	r2, r1
 8000e28:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8000e2a:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8000e2c:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8000e2e:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8000e30:	6863      	ldr	r3, [r4, #4]
 8000e32:	0280      	lsls	r0, r0, #10
 8000e34:	1ac0      	subs	r0, r0, r3
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <RTC_GetCalendarValue+0xb0>)
 8000e38:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 8000e3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000e3c:	200002a0 	.word	0x200002a0
 8000e40:	40002800 	.word	0x40002800
 8000e44:	000005b5 	.word	0x000005b5
 8000e48:	00555550 	.word	0x00555550
 8000e4c:	00445550 	.word	0x00445550
 8000e50:	00015180 	.word	0x00015180
 8000e54:	000003ff 	.word	0x000003ff

08000e58 <RTC_IF_SetTimerContext>:
{
 8000e58:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8000e5a:	4c04      	ldr	r4, [pc, #16]	@ (8000e6c <RTC_IF_SetTimerContext+0x14>)
 8000e5c:	4904      	ldr	r1, [pc, #16]	@ (8000e70 <RTC_IF_SetTimerContext+0x18>)
 8000e5e:	0020      	movs	r0, r4
 8000e60:	3018      	adds	r0, #24
 8000e62:	f7ff ff9f 	bl	8000da4 <RTC_GetCalendarValue>
 8000e66:	6020      	str	r0, [r4, #0]
}
 8000e68:	bd10      	pop	{r4, pc}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	200002c4 	.word	0x200002c4
 8000e70:	200002c8 	.word	0x200002c8

08000e74 <RTC_IF_GetTimerElapsedTime>:
{
 8000e74:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8000e76:	4668      	mov	r0, sp
 8000e78:	a901      	add	r1, sp, #4
 8000e7a:	f7ff ff93 	bl	8000da4 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8000e7e:	4b02      	ldr	r3, [pc, #8]	@ (8000e88 <RTC_IF_GetTimerElapsedTime+0x14>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	1ac0      	subs	r0, r0, r3
}
 8000e84:	b007      	add	sp, #28
 8000e86:	bd00      	pop	{pc}
 8000e88:	200002c4 	.word	0x200002c4

08000e8c <RTC_IF_StartTimer>:
{
 8000e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8000e92:	f7ff ffef 	bl	8000e74 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8000e96:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8000e98:	1a30      	subs	r0, r6, r0
 8000e9a:	2803      	cmp	r0, #3
 8000e9c:	d800      	bhi.n	8000ea0 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f004 fe81 	bl	8005ba8 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8000ea6:	f004 feab 	bl	8005c00 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8000eaa:	4c3f      	ldr	r4, [pc, #252]	@ (8000fa8 <RTC_IF_StartTimer+0x11c>)
 8000eac:	7923      	ldrb	r3, [r4, #4]
 8000eae:	9300      	str	r3, [sp, #0]
 8000eb0:	79a3      	ldrb	r3, [r4, #6]
 8000eb2:	7967      	ldrb	r7, [r4, #5]
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	79e3      	ldrb	r3, [r4, #7]
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	68a3      	ldr	r3, [r4, #8]
 8000ebc:	9303      	str	r3, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8000ebe:	7e63      	ldrb	r3, [r4, #25]
 8000ec0:	9304      	str	r3, [sp, #16]
 8000ec2:	7ea5      	ldrb	r5, [r4, #26]
 8000ec4:	7ee3      	ldrb	r3, [r4, #27]
 8000ec6:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 8000ec8:	f7ff ff5a 	bl	8000d80 <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 8000ecc:	0028      	movs	r0, r5
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8000ece:	4b37      	ldr	r3, [pc, #220]	@ (8000fac <RTC_IF_StartTimer+0x120>)
 8000ed0:	9a03      	ldr	r2, [sp, #12]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8000ed2:	4937      	ldr	r1, [pc, #220]	@ (8000fb0 <RTC_IF_StartTimer+0x124>)
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8000ed4:	1a9a      	subs	r2, r3, r2
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8000ed6:	05b3      	lsls	r3, r6, #22
 8000ed8:	0d9b      	lsrs	r3, r3, #22
 8000eda:	18d2      	adds	r2, r2, r3
 8000edc:	b292      	uxth	r2, r2
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8000ede:	0ab3      	lsrs	r3, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d841      	bhi.n	8000f68 <RTC_IF_StartTimer+0xdc>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8000ee4:	21e1      	movs	r1, #225	@ 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8000ee6:	9e00      	ldr	r6, [sp, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8000ee8:	0109      	lsls	r1, r1, #4
 8000eea:	428b      	cmp	r3, r1
 8000eec:	d241      	bcs.n	8000f72 <RTC_IF_StartTimer+0xe6>
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8000eee:	2b3b      	cmp	r3, #59	@ 0x3b
 8000ef0:	d844      	bhi.n	8000f7c <RTC_IF_StartTimer+0xf0>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8000ef2:	0a91      	lsrs	r1, r2, #10
 8000ef4:	028d      	lsls	r5, r1, #10
 8000ef6:	1b52      	subs	r2, r2, r5
 8000ef8:	b292      	uxth	r2, r2
 8000efa:	9200      	str	r2, [sp, #0]
 8000efc:	9a01      	ldr	r2, [sp, #4]
 8000efe:	1855      	adds	r5, r2, r1
 8000f00:	18ed      	adds	r5, r5, r3
 8000f02:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8000f04:	2d3b      	cmp	r5, #59	@ 0x3b
 8000f06:	d83d      	bhi.n	8000f84 <RTC_IF_StartTimer+0xf8>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8000f08:	2f3b      	cmp	r7, #59	@ 0x3b
 8000f0a:	d840      	bhi.n	8000f8e <RTC_IF_StartTimer+0x102>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8000f0c:	2e17      	cmp	r6, #23
 8000f0e:	d843      	bhi.n	8000f98 <RTC_IF_StartTimer+0x10c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8000f10:	9a04      	ldr	r2, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 8000f12:	9905      	ldr	r1, [sp, #20]
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <RTC_IF_StartTimer+0x128>)
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8000f16:	3a01      	subs	r2, #1
  if (RTC_DateStruct.Year % 4 == 0)
 8000f18:	0789      	lsls	r1, r1, #30
 8000f1a:	d142      	bne.n	8000fa2 <RTC_IF_StartTimer+0x116>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8000f1c:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8000f1e:	4288      	cmp	r0, r1
 8000f20:	d902      	bls.n	8000f28 <RTC_IF_StartTimer+0x9c>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8000f22:	f7ff fa73 	bl	800040c <__aeabi_idivmod>
 8000f26:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8000f28:	9a00      	ldr	r2, [sp, #0]
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <RTC_IF_StartTimer+0x120>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8000f2c:	77a5      	strb	r5, [r4, #30]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8000f32:	23a0      	movs	r3, #160	@ 0xa0
 8000f34:	051b      	lsls	r3, r3, #20
 8000f36:	6363      	str	r3, [r4, #52]	@ 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8000f38:	0023      	movs	r3, r4
 8000f3a:	333c      	adds	r3, #60	@ 0x3c
 8000f3c:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8000f3e:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f40:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8000f42:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8000f44:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8000f46:	2380      	movs	r3, #128	@ 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8000f48:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8000f4a:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8000f4c:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8000f4e:	481a      	ldr	r0, [pc, #104]	@ (8000fb8 <RTC_IF_StartTimer+0x12c>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8000f50:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8000f52:	7726      	strb	r6, [r4, #28]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000f54:	63a5      	str	r5, [r4, #56]	@ 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8000f56:	6325      	str	r5, [r4, #48]	@ 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8000f58:	6423      	str	r3, [r4, #64]	@ 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f5a:	62a5      	str	r5, [r4, #40]	@ 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f5c:	62e5      	str	r5, [r4, #44]	@ 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8000f5e:	f002 f907 	bl	8003170 <HAL_RTC_SetAlarm_IT>
}
 8000f62:	0028      	movs	r0, r5
 8000f64:	b007      	add	sp, #28
 8000f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8000f68:	4d14      	ldr	r5, [pc, #80]	@ (8000fbc <RTC_IF_StartTimer+0x130>)
    rtcAlarmDays++;
 8000f6a:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8000f6c:	195b      	adds	r3, r3, r5
    rtcAlarmDays++;
 8000f6e:	b280      	uxth	r0, r0
 8000f70:	e7b6      	b.n	8000ee0 <RTC_IF_StartTimer+0x54>
    timeoutValue -= SECONDS_IN_1HOUR;
 8000f72:	4d13      	ldr	r5, [pc, #76]	@ (8000fc0 <RTC_IF_StartTimer+0x134>)
    rtcAlarmHours++;
 8000f74:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8000f76:	195b      	adds	r3, r3, r5
    rtcAlarmHours++;
 8000f78:	b2b6      	uxth	r6, r6
 8000f7a:	e7b6      	b.n	8000eea <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 8000f7c:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8000f7e:	3b3c      	subs	r3, #60	@ 0x3c
    rtcAlarmMinutes++;
 8000f80:	b2bf      	uxth	r7, r7
 8000f82:	e7b4      	b.n	8000eee <RTC_IF_StartTimer+0x62>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8000f84:	3d3c      	subs	r5, #60	@ 0x3c
    rtcAlarmMinutes++;
 8000f86:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8000f88:	b2ad      	uxth	r5, r5
    rtcAlarmMinutes++;
 8000f8a:	b2bf      	uxth	r7, r7
 8000f8c:	e7ba      	b.n	8000f04 <RTC_IF_StartTimer+0x78>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8000f8e:	3f3c      	subs	r7, #60	@ 0x3c
    rtcAlarmHours++;
 8000f90:	3601      	adds	r6, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8000f92:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8000f94:	b2b6      	uxth	r6, r6
 8000f96:	e7b7      	b.n	8000f08 <RTC_IF_StartTimer+0x7c>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8000f98:	3e18      	subs	r6, #24
    rtcAlarmDays++;
 8000f9a:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8000f9c:	b2b6      	uxth	r6, r6
    rtcAlarmDays++;
 8000f9e:	b280      	uxth	r0, r0
 8000fa0:	e7b4      	b.n	8000f0c <RTC_IF_StartTimer+0x80>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8000fa2:	189b      	adds	r3, r3, r2
 8000fa4:	7b19      	ldrb	r1, [r3, #12]
 8000fa6:	e7ba      	b.n	8000f1e <RTC_IF_StartTimer+0x92>
 8000fa8:	200002c4 	.word	0x200002c4
 8000fac:	000003ff 	.word	0x000003ff
 8000fb0:	0001517f 	.word	0x0001517f
 8000fb4:	080063d0 	.word	0x080063d0
 8000fb8:	200002a0 	.word	0x200002a0
 8000fbc:	fffeae80 	.word	0xfffeae80
 8000fc0:	fffff1f0 	.word	0xfffff1f0

08000fc4 <RTC_IF_GetTime>:
{
 8000fc4:	b530      	push	{r4, r5, lr}
 8000fc6:	b087      	sub	sp, #28
 8000fc8:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8000fca:	a901      	add	r1, sp, #4
 8000fcc:	4668      	mov	r0, sp
 8000fce:	f7ff fee9 	bl	8000da4 <RTC_GetCalendarValue>
 8000fd2:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8000fd4:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8000fd6:	227d      	movs	r2, #125	@ 0x7d
 8000fd8:	2300      	movs	r3, #0
 8000fda:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8000fdc:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8000fde:	f7ff fa3b 	bl	8000458 <__aeabi_lmul>
 8000fe2:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8000fe4:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8000fe6:	0aa0      	lsrs	r0, r4, #10
}
 8000fe8:	b007      	add	sp, #28
 8000fea:	bd30      	pop	{r4, r5, pc}

08000fec <RTC_IF_BkUp_Write_Seconds>:
{
 8000fec:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000fee:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <RTC_IF_BkUp_Write_Seconds+0x10>)
{
 8000ff0:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f002 f9e5 	bl	80033c4 <HAL_RTCEx_BKUPWrite>
}
 8000ffa:	bd10      	pop	{r4, pc}
 8000ffc:	200002a0 	.word	0x200002a0

08001000 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8001000:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001002:	4b03      	ldr	r3, [pc, #12]	@ (8001010 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
{
 8001004:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001006:	2101      	movs	r1, #1
 8001008:	0018      	movs	r0, r3
 800100a:	f002 f9db 	bl	80033c4 <HAL_RTCEx_BKUPWrite>
}
 800100e:	bd10      	pop	{r4, pc}
 8001010:	200002a0 	.word	0x200002a0

08001014 <RTC_IF_BkUp_Read_Seconds>:
{
 8001014:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001016:	2100      	movs	r1, #0
 8001018:	4801      	ldr	r0, [pc, #4]	@ (8001020 <RTC_IF_BkUp_Read_Seconds+0xc>)
 800101a:	f002 f9d9 	bl	80033d0 <HAL_RTCEx_BKUPRead>
}
 800101e:	bd10      	pop	{r4, pc}
 8001020:	200002a0 	.word	0x200002a0

08001024 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8001024:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001026:	2101      	movs	r1, #1
 8001028:	4801      	ldr	r0, [pc, #4]	@ (8001030 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 800102a:	f002 f9d1 	bl	80033d0 <HAL_RTCEx_BKUPRead>
}
 800102e:	bd10      	pop	{r4, pc}
 8001030:	200002a0 	.word	0x200002a0

08001034 <RTC_IF_Init>:
{
 8001034:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 8001036:	4d11      	ldr	r5, [pc, #68]	@ (800107c <RTC_IF_Init+0x48>)
{
 8001038:	b08b      	sub	sp, #44	@ 0x2c
  if (RTC_Initalized == false)
 800103a:	782b      	ldrb	r3, [r5, #0]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d119      	bne.n	8001074 <RTC_IF_Init+0x40>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001040:	3320      	adds	r3, #32
 8001042:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001044:	2380      	movs	r3, #128	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001046:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001048:	025b      	lsls	r3, r3, #9
 800104a:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800104c:	f001 fda6 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8001050:	2800      	cmp	r0, #0
 8001052:	d000      	beq.n	8001056 <RTC_IF_Init+0x22>
      while (1);
 8001054:	e7fe      	b.n	8001054 <RTC_IF_Init+0x20>
    MX_RTC_Init();
 8001056:	f7ff fded 	bl	8000c34 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800105a:	2180      	movs	r1, #128	@ 0x80
 800105c:	4c08      	ldr	r4, [pc, #32]	@ (8001080 <RTC_IF_Init+0x4c>)
 800105e:	0049      	lsls	r1, r1, #1
 8001060:	0020      	movs	r0, r4
 8001062:	f001 fe77 	bl	8002d54 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001066:	0020      	movs	r0, r4
 8001068:	f002 f9b8 	bl	80033dc <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 800106c:	f7ff fef4 	bl	8000e58 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8001070:	2301      	movs	r3, #1
 8001072:	702b      	strb	r3, [r5, #0]
}
 8001074:	2000      	movs	r0, #0
 8001076:	b00b      	add	sp, #44	@ 0x2c
 8001078:	bd30      	pop	{r4, r5, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	20000308 	.word	0x20000308
 8001080:	200002a0 	.word	0x200002a0

08001084 <RTC_IF_GetTimerValue>:
{
 8001084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 8001086:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <RTC_IF_GetTimerValue+0x18>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4283      	cmp	r3, r0
 800108e:	d003      	beq.n	8001098 <RTC_IF_GetTimerValue+0x14>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8001090:	4668      	mov	r0, sp
 8001092:	a901      	add	r1, sp, #4
 8001094:	f7ff fe86 	bl	8000da4 <RTC_GetCalendarValue>
}
 8001098:	b007      	add	sp, #28
 800109a:	bd00      	pop	{pc}
 800109c:	20000308 	.word	0x20000308

080010a0 <RTC_IF_DelayMs>:
{
 80010a0:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80010a2:	227d      	movs	r2, #125	@ 0x7d
 80010a4:	2300      	movs	r3, #0
 80010a6:	0e41      	lsrs	r1, r0, #25
 80010a8:	01c0      	lsls	r0, r0, #7
 80010aa:	f7ff f9b5 	bl	8000418 <__aeabi_uldivmod>
 80010ae:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 80010b0:	f7ff ffe8 	bl	8001084 <RTC_IF_GetTimerValue>
 80010b4:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 80010b6:	f7ff ffe5 	bl	8001084 <RTC_IF_GetTimerValue>
 80010ba:	1b40      	subs	r0, r0, r5
 80010bc:	42a0      	cmp	r0, r4
 80010be:	d300      	bcc.n	80010c2 <RTC_IF_DelayMs+0x22>
}
 80010c0:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	e7f7      	b.n	80010b6 <RTC_IF_DelayMs+0x16>

080010c6 <HAL_RTC_AlarmAEventCallback>:
{
 80010c6:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 80010c8:	f004 ffc4 	bl	8006054 <UTIL_TIMER_IRQ_Handler>
}
 80010cc:	bd10      	pop	{r4, pc}

080010ce <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80010ce:	4770      	bx	lr

080010d0 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 80010d0:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010d2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80010d6:	b672      	cpsid	i
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 80010d8:	f000 fcb8 	bl	8001a4c <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 80010dc:	2304      	movs	r3, #4
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <PWR_EnterStopMode+0x24>)
 80010e0:	6811      	ldr	r1, [r2, #0]
 80010e2:	430b      	orrs	r3, r1
 80010e4:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010e6:	f384 8810 	msr	PRIMASK, r4
  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80010ea:	2101      	movs	r1, #1
 80010ec:	0008      	movs	r0, r1
 80010ee:	f001 f943 	bl	8002378 <HAL_PWR_EnterSTOPMode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80010f2:	bd10      	pop	{r4, pc}
 80010f4:	40007000 	.word	0x40007000

080010f8 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80010f8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80010fe:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8001100:	2201      	movs	r2, #1
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <PWR_ExitStopMode+0x4c>)
 8001104:	6819      	ldr	r1, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 800110a:	2204      	movs	r2, #4
 800110c:	6819      	ldr	r1, [r3, #0]
 800110e:	4211      	tst	r1, r2
 8001110:	d0fc      	beq.n	800110c <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8001112:	2280      	movs	r2, #128	@ 0x80
 8001114:	6819      	ldr	r1, [r3, #0]
 8001116:	0452      	lsls	r2, r2, #17
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	0492      	lsls	r2, r2, #18
 8001120:	6819      	ldr	r1, [r3, #0]
 8001122:	4211      	tst	r1, r2
 8001124:	d0fc      	beq.n	8001120 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8001126:	2203      	movs	r2, #3
 8001128:	68d9      	ldr	r1, [r3, #12]
 800112a:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 800112c:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 800112e:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8001130:	68da      	ldr	r2, [r3, #12]
 8001132:	400a      	ands	r2, r1
 8001134:	2a0c      	cmp	r2, #12
 8001136:	d1fb      	bne.n	8001130 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8001138:	f000 fbae 	bl	8001898 <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800113c:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001140:	bd10      	pop	{r4, pc}
 8001142:	46c0      	nop			@ (mov r8, r8)
 8001144:	40021000 	.word	0x40021000

08001148 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001148:	b510      	push	{r4, lr}

  /* USER CODE END EnterSleepMode_1 */
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800114a:	2101      	movs	r1, #1
 800114c:	2000      	movs	r0, #0
 800114e:	f001 f8db 	bl	8002308 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001152:	bd10      	pop	{r4, pc}

08001154 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
 8001154:	4770      	bx	lr

08001156 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
 8001156:	4770      	bx	lr

08001158 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	4a09      	ldr	r2, [pc, #36]	@ (8001180 <HAL_MspInit+0x28>)
 800115c:	055b      	lsls	r3, r3, #21
 800115e:	6b91      	ldr	r1, [r2, #56]	@ 0x38
{
 8001160:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	430b      	orrs	r3, r1
 8001164:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8001166:	f001 f8c7 	bl	80022f8 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 800116a:	f001 f94b 	bl	8002404 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 800116e:	2308      	movs	r3, #8
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_MspInit+0x2c>)
 8001172:	6811      	ldr	r1, [r2, #0]
 8001174:	430b      	orrs	r3, r1
 8001176:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8001178:	f001 f93a 	bl	80023f0 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117c:	bd10      	pop	{r4, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	40021000 	.word	0x40021000
 8001184:	40022000 	.word	0x40022000

08001188 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler>

0800118a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler>

0800118c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800118e:	4770      	bx	lr

08001190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001190:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001192:	f000 fd9b 	bl	8001ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001196:	bd10      	pop	{r4, pc}

08001198 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8001198:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 800119a:	4803      	ldr	r0, [pc, #12]	@ (80011a8 <EXTI0_1_IRQHandler+0x10>)
 800119c:	f000 ff4e 	bl	800203c <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <EXTI0_1_IRQHandler+0x14>)
 80011a2:	f000 ff4b 	bl	800203c <HAL_EXTI_IRQHandler>
#endif
}
 80011a6:	bd10      	pop	{r4, pc}
 80011a8:	2000044c 	.word	0x2000044c
 80011ac:	20000444 	.word	0x20000444

080011b0 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
 80011b0:	4770      	bx	lr
	...

080011b4 <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 80011b4:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 80011b6:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <EXTI4_15_IRQHandler+0x10>)
 80011b8:	f000 ff40 	bl	800203c <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80011bc:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <EXTI4_15_IRQHandler+0x14>)
 80011be:	f000 ff3d 	bl	800203c <HAL_EXTI_IRQHandler>
#endif
}
 80011c2:	bd10      	pop	{r4, pc}
 80011c4:	2000043c 	.word	0x2000043c
 80011c8:	20000454 	.word	0x20000454

080011cc <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80011cc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011ce:	4802      	ldr	r0, [pc, #8]	@ (80011d8 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 80011d0:	f000 fedb 	bl	8001f8a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	2000030c 	.word	0x2000030c

080011dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80011dc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011de:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <USART2_IRQHandler+0xc>)
 80011e0:	f002 fc24 	bl	8003a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011e4:	bd10      	pop	{r4, pc}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	20000354 	.word	0x20000354

080011ec <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 80011ec:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80011ee:	4802      	ldr	r0, [pc, #8]	@ (80011f8 <RTC_IRQHandler+0xc>)
 80011f0:	f001 fe0e 	bl	8002e10 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80011f4:	bd10      	pop	{r4, pc}
 80011f6:	46c0      	nop			@ (mov r8, r8)
 80011f8:	200002a0 	.word	0x200002a0

080011fc <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 80011fc:	b40c      	push	{r2, r3}
 80011fe:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001200:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8001202:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001204:	4a03      	ldr	r2, [pc, #12]	@ (8001214 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8001206:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001208:	f004 ff66 	bl	80060d8 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800120c:	b003      	add	sp, #12
 800120e:	bc08      	pop	{r3}
 8001210:	b002      	add	sp, #8
 8001212:	4718      	bx	r3
 8001214:	0800677d 	.word	0x0800677d

08001218 <TimestampNow>:
{
 8001218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800121a:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 800121c:	ae02      	add	r6, sp, #8
 800121e:	0030      	movs	r0, r6
{
 8001220:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001222:	f004 fdd7 	bl	8005dd4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001226:	2104      	movs	r1, #4
 8001228:	5e73      	ldrsh	r3, [r6, r1]
 800122a:	0020      	movs	r0, r4
 800122c:	2110      	movs	r1, #16
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <TimestampNow+0x2c>)
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	9b02      	ldr	r3, [sp, #8]
 8001234:	f7ff ffe2 	bl	80011fc <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8001238:	0020      	movs	r0, r4
 800123a:	f7fe ff65 	bl	8000108 <strlen>
 800123e:	8028      	strh	r0, [r5, #0]
}
 8001240:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	0800677d 	.word	0x0800677d

08001248 <SystemApp_Init>:
{
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124c:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2704      	movs	r7, #4
{
 8001250:	b08b      	sub	sp, #44	@ 0x2c
  UTIL_TIMER_Init();
 8001252:	f004 fde7 	bl	8005e24 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	220c      	movs	r2, #12
 8001258:	2100      	movs	r1, #0
 800125a:	a807      	add	r0, sp, #28
 800125c:	f005 f864 	bl	8006328 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001260:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4c2c      	ldr	r4, [pc, #176]	@ (8001314 <SystemApp_Init+0xcc>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	20a0      	movs	r0, #160	@ 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001268:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	432b      	orrs	r3, r5
 800126c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800126e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001270:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	402b      	ands	r3, r5
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001278:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800127a:	4333      	orrs	r3, r6
 800127c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800127e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001280:	4033      	ands	r3, r6
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001288:	433b      	orrs	r3, r7
 800128a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800128c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800128e:	403b      	ands	r3, r7
 8001290:	9303      	str	r3, [sp, #12]
 8001292:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001294:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001296:	4313      	orrs	r3, r2
 8001298:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800129a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800129c:	4013      	ands	r3, r2
 800129e:	9304      	str	r3, [sp, #16]
 80012a0:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 80012a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001318 <SystemApp_Init+0xd0>)
 80012a8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f000 fed9 	bl	8002060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80012ae:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <SystemApp_Init+0xd4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	a905      	add	r1, sp, #20
 80012b2:	481b      	ldr	r0, [pc, #108]	@ (8001320 <SystemApp_Init+0xd8>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 80012b4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	f000 fed3 	bl	8002060 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	a905      	add	r1, sp, #20
 80012bc:	4819      	ldr	r0, [pc, #100]	@ (8001324 <SystemApp_Init+0xdc>)
 80012be:	f000 fecf 	bl	8002060 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012c2:	a905      	add	r1, sp, #20
 80012c4:	4818      	ldr	r0, [pc, #96]	@ (8001328 <SystemApp_Init+0xe0>)
 80012c6:	f000 fecb 	bl	8002060 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80012ca:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 80012cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80012ce:	43ab      	bics	r3, r5
 80012d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 80012d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80012d4:	43b3      	bics	r3, r6
 80012d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 80012d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80012da:	43bb      	bics	r3, r7
 80012dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 80012de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80012e0:	4393      	bics	r3, r2
 80012e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
  DBG_Disable();
 80012e4:	f000 f856 	bl	8001394 <DBG_Disable>
  DBG_ProbesInit();
 80012e8:	f000 f876 	bl	80013d8 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 80012ec:	f004 fb3e 	bl	800596c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 80012f0:	480e      	ldr	r0, [pc, #56]	@ (800132c <SystemApp_Init+0xe4>)
 80012f2:	f004 fb55 	bl	80059a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 80012f6:	0030      	movs	r0, r6
 80012f8:	f004 fb58 	bl	80059ac <UTIL_ADV_TRACE_SetVerboseLevel>
  Sx_Board_Bus_Init();
 80012fc:	f000 fc7c 	bl	8001bf8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8001300:	f000 faca 	bl	8001898 <CMWX1ZZABZ0XX_RADIO_IoInit>
  UTIL_LPM_Init();
 8001304:	f004 fc48 	bl	8005b98 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001308:	0029      	movs	r1, r5
 800130a:	0028      	movs	r0, r5
 800130c:	f004 fc62 	bl	8005bd4 <UTIL_LPM_SetOffMode>
}
 8001310:	b00b      	add	sp, #44	@ 0x2c
 8001312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	00009fff 	.word	0x00009fff
 800131c:	0000ffff 	.word	0x0000ffff
 8001320:	50000400 	.word	0x50000400
 8001324:	50000800 	.word	0x50000800
 8001328:	50001c00 	.word	0x50001c00
 800132c:	08001219 	.word	0x08001219

08001330 <UTIL_SEQ_Idle>:
{
 8001330:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 8001332:	f004 fc77 	bl	8005c24 <UTIL_LPM_EnterLowPower>
}
 8001336:	bd10      	pop	{r4, pc}

08001338 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001338:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800133a:	2101      	movs	r1, #1
 800133c:	2004      	movs	r0, #4
 800133e:	f004 fc33 	bl	8005ba8 <UTIL_LPM_SetStopMode>
}
 8001342:	bd10      	pop	{r4, pc}

08001344 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001344:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001346:	2100      	movs	r1, #0
 8001348:	2004      	movs	r0, #4
 800134a:	f004 fc2d 	bl	8005ba8 <UTIL_LPM_SetStopMode>
}
 800134e:	bd10      	pop	{r4, pc}

08001350 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001350:	2000      	movs	r0, #0
 8001352:	4770      	bx	lr

08001354 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001354:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8001356:	f7ff fe95 	bl	8001084 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 800135a:	bd10      	pop	{r4, pc}

0800135c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800135c:	b507      	push	{r0, r1, r2, lr}
 800135e:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8001360:	9801      	ldr	r0, [sp, #4]
 8001362:	f7ff fe9d 	bl	80010a0 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001366:	bd07      	pop	{r0, r1, r2, pc}

08001368 <DBG_ConfigForLpm>:
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 8001368:	2380      	movs	r3, #128	@ 0x80
{
 800136a:	b510      	push	{r4, lr}
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 800136c:	4c07      	ldr	r4, [pc, #28]	@ (800138c <DBG_ConfigForLpm+0x24>)
 800136e:	03db      	lsls	r3, r3, #15
 8001370:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001372:	4313      	orrs	r3, r2
 8001374:	6363      	str	r3, [r4, #52]	@ 0x34
    HAL_DBGMCU_DisableDBGSleepMode();
 8001376:	f000 fcb5 	bl	8001ce4 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 800137a:	f000 fcbb 	bl	8001cf4 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 800137e:	f000 fcc1 	bl	8001d04 <HAL_DBGMCU_DisableDBGStandbyMode>
    __HAL_RCC_DBGMCU_CLK_DISABLE();
 8001382:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001384:	4a02      	ldr	r2, [pc, #8]	@ (8001390 <DBG_ConfigForLpm+0x28>)
 8001386:	4013      	ands	r3, r2
 8001388:	6363      	str	r3, [r4, #52]	@ 0x34
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 800138a:	bd10      	pop	{r4, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	ffbfffff 	.word	0xffbfffff

08001394 <DBG_Disable>:
{
 8001394:	b510      	push	{r4, lr}
 8001396:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	220c      	movs	r2, #12
 800139a:	2100      	movs	r1, #0
 800139c:	a803      	add	r0, sp, #12
 800139e:	f004 ffc3 	bl	8006328 <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 80013a6:	23c0      	movs	r3, #192	@ 0xc0
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80013a8:	2401      	movs	r4, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 80013ac:	01db      	lsls	r3, r3, #7
 80013ae:	9301      	str	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <DBG_Disable+0x40>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80013b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 80013b8:	4322      	orrs	r2, r4
 80013ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013be:	4023      	ands	r3, r4
 80013c0:	9300      	str	r3, [sp, #0]
 80013c2:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f000 fe4c 	bl	8002060 <HAL_GPIO_Init>
  DBG_ConfigForLpm(1);
 80013c8:	0020      	movs	r0, r4
 80013ca:	f7ff ffcd 	bl	8001368 <DBG_ConfigForLpm>
}
 80013ce:	b006      	add	sp, #24
 80013d0:	bd10      	pop	{r4, pc}
 80013d2:	46c0      	nop			@ (mov r8, r8)
 80013d4:	40021000 	.word	0x40021000

080013d8 <DBG_ProbesInit>:
#endif /* PROBE_PINS_ENABLED */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 80013d8:	4770      	bx	lr
	...

080013dc <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance        = USART2;
 80013dc:	480a      	ldr	r0, [pc, #40]	@ (8001408 <MX_USART2_UART_Init+0x2c>)
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USART2_UART_Init+0x30>)
{
 80013e0:	b510      	push	{r4, lr}
  huart2.Instance        = USART2;
 80013e2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate   = USART_BAUDRATE;
 80013e4:	23e1      	movs	r3, #225	@ 0xe1
 80013e6:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits   = UART_STOPBITS_1;
  huart2.Init.Parity     = UART_PARITY_NONE;
  huart2.Init.Mode       = UART_MODE_TX;
 80013e8:	2208      	movs	r2, #8
  huart2.Init.BaudRate   = USART_BAUDRATE;
 80013ea:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ec:	2300      	movs	r3, #0
  huart2.Init.Mode       = UART_MODE_TX;
 80013ee:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013f0:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits   = UART_STOPBITS_1;
 80013f2:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity     = UART_PARITY_NONE;
 80013f4:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80013f6:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f8:	f002 fea0 	bl	800413c <HAL_UART_Init>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
 8001400:	f7ff fc16 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001404:	bd10      	pop	{r4, pc}
 8001406:	46c0      	nop			@ (mov r8, r8)
 8001408:	20000354 	.word	0x20000354
 800140c:	40004400 	.word	0x40004400

08001410 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8001410:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001412:	0005      	movs	r5, r0
 8001414:	b093      	sub	sp, #76	@ 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	2214      	movs	r2, #20
 8001418:	2100      	movs	r1, #0
 800141a:	a804      	add	r0, sp, #16
 800141c:	f004 ff84 	bl	8006328 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001420:	2224      	movs	r2, #36	@ 0x24
 8001422:	2100      	movs	r1, #0
 8001424:	a809      	add	r0, sp, #36	@ 0x24
 8001426:	f004 ff7f 	bl	8006328 <memset>

  if (uartHandle->Instance == USART2)
 800142a:	4b37      	ldr	r3, [pc, #220]	@ (8001508 <HAL_UART_MspInit+0xf8>)
 800142c:	682a      	ldr	r2, [r5, #0]
 800142e:	429a      	cmp	r2, r3
 8001430:	d168      	bne.n	8001504 <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8001432:	2201      	movs	r2, #1
 8001434:	4b35      	ldr	r3, [pc, #212]	@ (800150c <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001436:	2604      	movs	r6, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 8001438:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800143a:	4311      	orrs	r1, r2
 800143c:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800143e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001440:	4011      	ands	r1, r2
 8001442:	9101      	str	r1, [sp, #4]
 8001444:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8001446:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001448:	4311      	orrs	r1, r2
 800144a:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800144c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800144e:	4011      	ands	r1, r2
 8001450:	9102      	str	r1, [sp, #8]
 8001452:	9902      	ldr	r1, [sp, #8]
    __USART2_CLK_ENABLE();
 8001454:	2180      	movs	r1, #128	@ 0x80
 8001456:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001458:	0289      	lsls	r1, r1, #10
 800145a:	4308      	orrs	r0, r1
 800145c:	6398      	str	r0, [r3, #56]	@ 0x38
    DMAx_CLK_ENABLE();
 800145e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001460:	4310      	orrs	r0, r2
 8001462:	6318      	str	r0, [r3, #48]	@ 0x30
 8001464:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001466:	4002      	ands	r2, r0
 8001468:	9203      	str	r2, [sp, #12]
 800146a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800146c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146e:	a809      	add	r0, sp, #36	@ 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8001470:	4311      	orrs	r1, r2
 8001472:	6399      	str	r1, [r3, #56]	@ 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001474:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001476:	960c      	str	r6, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001478:	9309      	str	r3, [sp, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800147a:	f001 fb8f 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 800147e:	2800      	cmp	r0, #0
 8001480:	d001      	beq.n	8001486 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8001482:	f7ff fbd5 	bl	8000c30 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8001486:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001488:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800148c:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800148e:	a904      	add	r1, sp, #16
 8001490:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001494:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8001496:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800149a:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800149c:	f000 fde0 	bl	8002060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80014a0:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80014a2:	20a0      	movs	r0, #160	@ 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80014a4:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80014a6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80014a8:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80014aa:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80014ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80014b2:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f000 fdd4 	bl	8002060 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80014b8:	4f15      	ldr	r7, [pc, #84]	@ (8001510 <HAL_UART_MspInit+0x100>)
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <HAL_UART_MspInit+0x104>)
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014bc:	0038      	movs	r0, r7
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 80014be:	603b      	str	r3, [r7, #0]
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80014c0:	2310      	movs	r3, #16
 80014c2:	60bb      	str	r3, [r7, #8]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80014c4:	3370      	adds	r3, #112	@ 0x70
    hdma_usart2_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 80014c6:	607e      	str	r6, [r7, #4]
    hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80014c8:	60fc      	str	r4, [r7, #12]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80014ca:	613b      	str	r3, [r7, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014cc:	617c      	str	r4, [r7, #20]
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 80014ce:	61bc      	str	r4, [r7, #24]
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
 80014d0:	61fc      	str	r4, [r7, #28]
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;
 80014d2:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014d4:	f000 fc64 	bl	8001da0 <HAL_DMA_Init>
 80014d8:	42a0      	cmp	r0, r4
 80014da:	d001      	beq.n	80014e0 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80014dc:	f7ff fba8 	bl	8000c30 <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2100      	movs	r1, #0
 80014e4:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 80014e6:	66ef      	str	r7, [r5, #108]	@ 0x6c
 80014e8:	62bd      	str	r5, [r7, #40]	@ 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 80014ea:	f000 fc13 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 80014ee:	200b      	movs	r0, #11
 80014f0:	f000 fc3a 	bl	8001d68 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 80014f4:	201c      	movs	r0, #28
 80014f6:	2201      	movs	r2, #1
 80014f8:	2100      	movs	r1, #0
 80014fa:	f000 fc0b 	bl	8001d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 80014fe:	201c      	movs	r0, #28
 8001500:	f000 fc32 	bl	8001d68 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8001504:	b013      	add	sp, #76	@ 0x4c
 8001506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001508:	40004400 	.word	0x40004400
 800150c:	40021000 	.word	0x40021000
 8001510:	2000030c 	.word	0x2000030c
 8001514:	40020080 	.word	0x40020080

08001518 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_UART_MspDeInit+0x30>)
 800151a:	6802      	ldr	r2, [r0, #0]
{
 800151c:	b510      	push	{r4, lr}
 800151e:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8001520:	429a      	cmp	r2, r3
 8001522:	d10f      	bne.n	8001544 <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8001524:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8001526:	4a09      	ldr	r2, [pc, #36]	@ (800154c <HAL_UART_MspDeInit+0x34>)
 8001528:	4909      	ldr	r1, [pc, #36]	@ (8001550 <HAL_UART_MspDeInit+0x38>)
 800152a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 800152c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 800152e:	400b      	ands	r3, r1
 8001530:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8001532:	210c      	movs	r1, #12
 8001534:	f000 fe50 	bl	80021d8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001538:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800153a:	f000 fc75 	bl	8001e28 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800153e:	201c      	movs	r0, #28
 8001540:	f000 fc1e 	bl	8001d80 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001544:	bd10      	pop	{r4, pc}
 8001546:	46c0      	nop			@ (mov r8, r8)
 8001548:	40004400 	.word	0x40004400
 800154c:	40021000 	.word	0x40021000
 8001550:	fffdffff 	.word	0xfffdffff

08001554 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001554:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001556:	4b04      	ldr	r3, [pc, #16]	@ (8001568 <vcom_Init+0x14>)
 8001558:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 800155a:	f7ff faff 	bl	8000b5c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800155e:	f7ff ff3d 	bl	80013dc <MX_USART2_UART_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001562:	2000      	movs	r0, #0
 8001564:	bd10      	pop	{r4, pc}
 8001566:	46c0      	nop			@ (mov r8, r8)
 8001568:	200003d8 	.word	0x200003d8

0800156c <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 800156c:	2280      	movs	r2, #128	@ 0x80
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <vcom_DeInit+0x28>)
 8001570:	0292      	lsls	r2, r2, #10
 8001572:	6a99      	ldr	r1, [r3, #40]	@ 0x28
{
 8001574:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8001576:	430a      	orrs	r2, r1
 8001578:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 800157a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800157c:	4906      	ldr	r1, [pc, #24]	@ (8001598 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800157e:	4807      	ldr	r0, [pc, #28]	@ (800159c <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8001580:	400a      	ands	r2, r1
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_UART_MspDeInit(&huart2);
 8001584:	f7ff ffc8 	bl	8001518 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001588:	200b      	movs	r0, #11
 800158a:	f000 fbf9 	bl	8001d80 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800158e:	2000      	movs	r0, #0
 8001590:	bd10      	pop	{r4, pc}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	40021000 	.word	0x40021000
 8001598:	fffdffff 	.word	0xfffdffff
 800159c:	20000354 	.word	0x20000354

080015a0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80015a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80015a2:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <vcom_Trace_DMA+0x14>)
{
 80015a4:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80015a6:	0001      	movs	r1, r0
 80015a8:	0018      	movs	r0, r3
 80015aa:	f002 f997 	bl	80038dc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80015ae:	2000      	movs	r0, #0
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	20000354 	.word	0x20000354

080015b8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80015b8:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80015ba:	2180      	movs	r1, #128	@ 0x80

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80015bc:	4c10      	ldr	r4, [pc, #64]	@ (8001600 <vcom_ReceiveInit+0x48>)
  RxCpltCallback = RxCb;
 80015be:	4d11      	ldr	r5, [pc, #68]	@ (8001604 <vcom_ReceiveInit+0x4c>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80015c0:	9a01      	ldr	r2, [sp, #4]
  RxCpltCallback = RxCb;
 80015c2:	6068      	str	r0, [r5, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80015c4:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80015c6:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80015c8:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80015ca:	f002 fe6d 	bl	80042a8 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80015ce:	2280      	movs	r2, #128	@ 0x80
 80015d0:	6823      	ldr	r3, [r4, #0]
 80015d2:	0252      	lsls	r2, r2, #9
 80015d4:	69d9      	ldr	r1, [r3, #28]
 80015d6:	4211      	tst	r1, r2
 80015d8:	d1fc      	bne.n	80015d4 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80015da:	2280      	movs	r2, #128	@ 0x80
 80015dc:	03d2      	lsls	r2, r2, #15
 80015de:	69d9      	ldr	r1, [r3, #28]
 80015e0:	4211      	tst	r1, r2
 80015e2:	d0fc      	beq.n	80015de <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80015e4:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80015e6:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&huart2);
 80015ec:	f002 fea2 	bl	8004334 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80015f0:	0029      	movs	r1, r5
 80015f2:	2201      	movs	r2, #1
 80015f4:	0020      	movs	r0, r4
 80015f6:	3108      	adds	r1, #8
 80015f8:	f002 fe20 	bl	800423c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80015fc:	2000      	movs	r0, #0
 80015fe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8001600:	20000354 	.word	0x20000354
 8001604:	200003d8 	.word	0x200003d8

08001608 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001608:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 800160a:	4b02      	ldr	r3, [pc, #8]	@ (8001614 <HAL_UART_TxCpltCallback+0xc>)
 800160c:	2000      	movs	r0, #0
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001612:	bd10      	pop	{r4, pc}
 8001614:	200003d8 	.word	0x200003d8

08001618 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001618:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 800161a:	4c0a      	ldr	r4, [pc, #40]	@ (8001644 <HAL_UART_RxCpltCallback+0x2c>)
{
 800161c:	0005      	movs	r5, r0
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 800161e:	6863      	ldr	r3, [r4, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d007      	beq.n	8001634 <HAL_UART_RxCpltCallback+0x1c>
 8001624:	1d02      	adds	r2, r0, #4
 8001626:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8001628:	2a00      	cmp	r2, #0
 800162a:	d103      	bne.n	8001634 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 800162c:	0020      	movs	r0, r4
 800162e:	2101      	movs	r1, #1
 8001630:	3008      	adds	r0, #8
 8001632:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8001634:	0021      	movs	r1, r4
 8001636:	0028      	movs	r0, r5
 8001638:	2201      	movs	r2, #1
 800163a:	3108      	adds	r1, #8
 800163c:	f002 fdfe 	bl	800423c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001640:	bd70      	pop	{r4, r5, r6, pc}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	200003d8 	.word	0x200003d8

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001648:	480d      	ldr	r0, [pc, #52]	@ (8001680 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800164a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	@ (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	@ (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <LoopForever+0xe>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	@ (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	@ (8001694 <LoopForever+0x16>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001672:	f000 fae9 	bl	8001c48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f004 fe71 	bl	800635c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff facf 	bl	8000c1c <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
   ldr   r0, =_estack
 8001680:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 800168c:	080067e8 	.word	0x080067e8
  ldr r2, =_sbss
 8001690:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8001694:	200009d8 	.word	0x200009d8

08001698 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_COMP_IRQHandler>
	...

0800169c <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 800169c:	23fa      	movs	r3, #250	@ 0xfa
{
 800169e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80016a0:	0005      	movs	r5, r0
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80016a2:	009b      	lsls	r3, r3, #2
{
 80016a4:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4806      	ldr	r0, [pc, #24]	@ (80016c4 <BSP_SPI1_SendRecv+0x28>)
 80016aa:	0013      	movs	r3, r2
 80016ac:	000a      	movs	r2, r1
 80016ae:	0029      	movs	r1, r5
 80016b0:	f001 ffb0 	bl	8003614 <HAL_SPI_TransmitReceive>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d101      	bne.n	80016bc <BSP_SPI1_SendRecv+0x20>
  {
    ret = len;
 80016b8:	0020      	movs	r0, r4
  }
  return ret;
}
 80016ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80016bc:	2006      	movs	r0, #6
 80016be:	4240      	negs	r0, r0
  return ret;
 80016c0:	e7fb      	b.n	80016ba <BSP_SPI1_SendRecv+0x1e>
 80016c2:	46c0      	nop			@ (mov r8, r8)
 80016c4:	200003e4 	.word	0x200003e4

080016c8 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_SPI1_Init+0x54>)
{
 80016ca:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 80016cc:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80016ce:	2382      	movs	r3, #130	@ 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80016d0:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 80016d6:	33fc      	adds	r3, #252	@ 0xfc
 80016d8:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80016da:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80016dc:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80016de:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80016e0:	6145      	str	r5, [r0, #20]
{
 80016e2:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 80016e4:	f001 fa4a 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 80016e8:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 80016ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001720 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 80016ec:	490d      	ldr	r1, [pc, #52]	@ (8001724 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 80016ee:	4290      	cmp	r0, r2
 80016f0:	d80d      	bhi.n	800170e <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f2:	2300      	movs	r3, #0
 80016f4:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80016f6:	6263      	str	r3, [r4, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f8:	62a3      	str	r3, [r4, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 80016fa:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 80016fc:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 80016fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8001700:	0020      	movs	r0, r4
 8001702:	f001 ff1f 	bl	8003544 <HAL_SPI_Init>
 8001706:	1e43      	subs	r3, r0, #1
 8001708:	4198      	sbcs	r0, r3
  return ret;
 800170a:	b2c0      	uxtb	r0, r0
}
 800170c:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 800170e:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8001710:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8001712:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8001714:	2b08      	cmp	r3, #8
 8001716:	d0ec      	beq.n	80016f2 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8001718:	0840      	lsrs	r0, r0, #1
 800171a:	e7e8      	b.n	80016ee <MX_SPI1_Init+0x26>
 800171c:	40013000 	.word	0x40013000
 8001720:	00989680 	.word	0x00989680
 8001724:	08006450 	.word	0x08006450

08001728 <BSP_SPI1_Init>:
{
 8001728:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 800172a:	4d1b      	ldr	r5, [pc, #108]	@ (8001798 <BSP_SPI1_Init+0x70>)
 800172c:	4b1b      	ldr	r3, [pc, #108]	@ (800179c <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800172e:	0028      	movs	r0, r5
{
 8001730:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8001732:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001734:	f002 f8b4 	bl	80038a0 <HAL_SPI_GetState>
 8001738:	1e04      	subs	r4, r0, #0
 800173a:	d002      	beq.n	8001742 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800173c:	2000      	movs	r0, #0
}
 800173e:	b007      	add	sp, #28
 8001740:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	4a16      	ldr	r2, [pc, #88]	@ (80017a0 <BSP_SPI1_Init+0x78>)
 8001746:	015b      	lsls	r3, r3, #5
 8001748:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 800174a:	430b      	orrs	r3, r1
 800174c:	6353      	str	r3, [r2, #52]	@ 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174e:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8001752:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001754:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	3301      	adds	r3, #1
 800175a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800175c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800175e:	337d      	adds	r3, #125	@ 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001760:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8001762:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001764:	f000 fc7c 	bl	8002060 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001768:	20a0      	movs	r0, #160	@ 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800176a:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800176c:	a901      	add	r1, sp, #4
 800176e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8001770:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8001772:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001774:	f000 fc74 	bl	8002060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001778:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800177a:	480a      	ldr	r0, [pc, #40]	@ (80017a4 <BSP_SPI1_Init+0x7c>)
 800177c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800177e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001780:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001782:	f000 fc6d 	bl	8002060 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8001786:	0028      	movs	r0, r5
 8001788:	f7ff ff9e 	bl	80016c8 <MX_SPI1_Init>
 800178c:	2800      	cmp	r0, #0
 800178e:	d0d5      	beq.n	800173c <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8001790:	2008      	movs	r0, #8
 8001792:	4240      	negs	r0, r0
  return ret;
 8001794:	e7d3      	b.n	800173e <BSP_SPI1_Init+0x16>
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	200003e4 	.word	0x200003e4
 800179c:	40013000 	.word	0x40013000
 80017a0:	40021000 	.word	0x40021000
 80017a4:	50000400 	.word	0x50000400

080017a8 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80017a8:	b500      	push	{lr}
 80017aa:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80017ac:	2803      	cmp	r0, #3
 80017ae:	d80c      	bhi.n	80017ca <BSP_LED_Init+0x22>
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <BSP_LED_Init+0x78>)
 80017b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b4:	f7fe fcb0 	bl	8000118 <__gnu_thumb1_case_uqi>
 80017b8:	2b231b02 	.word	0x2b231b02
 80017bc:	2102      	movs	r1, #2
 80017be:	430a      	orrs	r2, r1
 80017c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c4:	400b      	ands	r3, r1
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80017ca:	4b16      	ldr	r3, [pc, #88]	@ (8001824 <BSP_LED_Init+0x7c>)
 80017cc:	0042      	lsls	r2, r0, #1
 80017ce:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80017d0:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80017d2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017dc:	3303      	adds	r3, #3
 80017de:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <BSP_LED_Init+0x80>)
 80017e2:	a905      	add	r1, sp, #20
 80017e4:	58c0      	ldr	r0, [r0, r3]
 80017e6:	f000 fc3b 	bl	8002060 <HAL_GPIO_Init>
}
 80017ea:	b00b      	add	sp, #44	@ 0x2c
 80017ec:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 80017ee:	2101      	movs	r1, #1
 80017f0:	430a      	orrs	r2, r1
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f6:	400b      	ands	r3, r1
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	9b02      	ldr	r3, [sp, #8]
 80017fc:	e7e5      	b.n	80017ca <BSP_LED_Init+0x22>
 80017fe:	2102      	movs	r1, #2
 8001800:	430a      	orrs	r2, r1
 8001802:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001806:	400b      	ands	r3, r1
 8001808:	9303      	str	r3, [sp, #12]
 800180a:	9b03      	ldr	r3, [sp, #12]
 800180c:	e7dd      	b.n	80017ca <BSP_LED_Init+0x22>
 800180e:	2102      	movs	r1, #2
 8001810:	430a      	orrs	r2, r1
 8001812:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001816:	400b      	ands	r3, r1
 8001818:	9304      	str	r3, [sp, #16]
 800181a:	9b04      	ldr	r3, [sp, #16]
 800181c:	e7d5      	b.n	80017ca <BSP_LED_Init+0x22>
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	40021000 	.word	0x40021000
 8001824:	08006470 	.word	0x08006470
 8001828:	20000004 	.word	0x20000004

0800182c <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <BSP_LED_Off+0x18>)
{
 800182e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001830:	0042      	lsls	r2, r0, #1
 8001832:	5ad1      	ldrh	r1, [r2, r3]
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <BSP_LED_Off+0x1c>)
 8001836:	0080      	lsls	r0, r0, #2
 8001838:	2200      	movs	r2, #0
 800183a:	58c0      	ldr	r0, [r0, r3]
 800183c:	f000 fd4e 	bl	80022dc <HAL_GPIO_WritePin>
}
 8001840:	bd10      	pop	{r4, pc}
 8001842:	46c0      	nop			@ (mov r8, r8)
 8001844:	08006470 	.word	0x08006470
 8001848:	20000004 	.word	0x20000004

0800184c <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800184c:	4b04      	ldr	r3, [pc, #16]	@ (8001860 <BSP_LED_Toggle+0x14>)
{
 800184e:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001850:	0042      	lsls	r2, r0, #1
 8001852:	5ad1      	ldrh	r1, [r2, r3]
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <BSP_LED_Toggle+0x18>)
 8001856:	0080      	lsls	r0, r0, #2
 8001858:	58c0      	ldr	r0, [r0, r3]
 800185a:	f000 fd45 	bl	80022e8 <HAL_GPIO_TogglePin>
}
 800185e:	bd10      	pop	{r4, pc}
 8001860:	08006470 	.word	0x08006470
 8001864:	20000004 	.word	0x20000004

08001868 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8001868:	2005      	movs	r0, #5
 800186a:	4770      	bx	lr

0800186c <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 800186c:	0002      	movs	r2, r0
 800186e:	b510      	push	{r4, lr}

  if (state == SET)
 8001870:	2801      	cmp	r0, #1
 8001872:	d109      	bne.n	8001888 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8001874:	2180      	movs	r1, #128	@ 0x80
 8001876:	20a0      	movs	r0, #160	@ 0xa0
 8001878:	0149      	lsls	r1, r1, #5
 800187a:	05c0      	lsls	r0, r0, #23
 800187c:	f000 fd2e 	bl	80022dc <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8001880:	2005      	movs	r0, #5
 8001882:	f7ff fd6b 	bl	800135c <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8001886:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8001888:	2180      	movs	r1, #128	@ 0x80
 800188a:	20a0      	movs	r0, #160	@ 0xa0
 800188c:	2200      	movs	r2, #0
 800188e:	0149      	lsls	r1, r1, #5
 8001890:	05c0      	lsls	r0, r0, #23
 8001892:	f000 fd23 	bl	80022dc <HAL_GPIO_WritePin>
}
 8001896:	e7f6      	b.n	8001886 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08001898 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8001898:	2300      	movs	r3, #0
{
 800189a:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800189c:	2602      	movs	r6, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 800189e:	2204      	movs	r2, #4
{
 80018a0:	b097      	sub	sp, #92	@ 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 80018a2:	4c65      	ldr	r4, [pc, #404]	@ (8001a38 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 80018a4:	9310      	str	r3, [sp, #64]	@ 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 80018a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 80018a8:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 80018aa:	4333      	orrs	r3, r6
 80018ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018ae:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 80018b0:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 80018b2:	4033      	ands	r3, r6
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80018b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 80018ba:	4f60      	ldr	r7, [pc, #384]	@ (8001a3c <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80018bc:	4333      	orrs	r3, r6
 80018be:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80018c2:	a80c      	add	r0, sp, #48	@ 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 80018c4:	4033      	ands	r3, r6
 80018c6:	9302      	str	r3, [sp, #8]
 80018c8:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 80018ca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80018cc:	4333      	orrs	r3, r6
 80018ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80018d2:	4033      	ands	r3, r6
 80018d4:	9303      	str	r3, [sp, #12]
 80018d6:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80018d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80018da:	4313      	orrs	r3, r2
 80018dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80018de:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 80018e0:	910f      	str	r1, [sp, #60]	@ 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80018e2:	4013      	ands	r3, r2
 80018e4:	9304      	str	r3, [sp, #16]
 80018e6:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80018e8:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80018ea:	0001      	movs	r1, r0
 80018ec:	4854      	ldr	r0, [pc, #336]	@ (8001a40 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80018ee:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80018f0:	930c      	str	r3, [sp, #48]	@ 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 80018f2:	960e      	str	r6, [sp, #56]	@ 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80018f4:	f000 fbb4 	bl	8002060 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 80018f8:	4b52      	ldr	r3, [pc, #328]	@ (8001a44 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80018fa:	a80c      	add	r0, sp, #48	@ 0x30
 80018fc:	0001      	movs	r1, r0
 80018fe:	4850      	ldr	r0, [pc, #320]	@ (8001a40 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001900:	930d      	str	r3, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001902:	960c      	str	r6, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001904:	f000 fbac 	bl	8002060 <HAL_GPIO_Init>
 8001908:	a80c      	add	r0, sp, #48	@ 0x30
 800190a:	0001      	movs	r1, r0
 800190c:	484c      	ldr	r0, [pc, #304]	@ (8001a40 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 800190e:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001910:	950c      	str	r5, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001912:	f000 fba5 	bl	8002060 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001916:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001918:	a80c      	add	r0, sp, #48	@ 0x30
 800191a:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 800191c:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800191e:	484a      	ldr	r0, [pc, #296]	@ (8001a48 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001920:	970d      	str	r7, [sp, #52]	@ 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001922:	930c      	str	r3, [sp, #48]	@ 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001924:	f000 fb9c 	bl	8002060 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8001928:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800192a:	27a0      	movs	r7, #160	@ 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800192c:	4333      	orrs	r3, r6
 800192e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001930:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001932:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8001934:	4033      	ands	r3, r6
 8001936:	9309      	str	r3, [sp, #36]	@ 0x24
 8001938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800193a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800193c:	05ff      	lsls	r7, r7, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800193e:	432b      	orrs	r3, r5
 8001940:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001942:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001944:	a811      	add	r0, sp, #68	@ 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8001946:	402b      	ands	r3, r5
 8001948:	930a      	str	r3, [sp, #40]	@ 0x28
 800194a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800194c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800194e:	432b      	orrs	r3, r5
 8001950:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001952:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	9114      	str	r1, [sp, #80]	@ 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8001956:	402b      	ands	r3, r5
 8001958:	930b      	str	r3, [sp, #44]	@ 0x2c
 800195a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 800195c:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800195e:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8001960:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001962:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001964:	3380      	adds	r3, #128	@ 0x80
 8001966:	9311      	str	r3, [sp, #68]	@ 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001968:	9612      	str	r6, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800196a:	9613      	str	r6, [sp, #76]	@ 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800196c:	f000 fb78 	bl	8002060 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8001970:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001972:	a811      	add	r0, sp, #68	@ 0x44
 8001974:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8001976:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001978:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800197a:	3340      	adds	r3, #64	@ 0x40
 800197c:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800197e:	f000 fb6f 	bl	8002060 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8001982:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001984:	a811      	add	r0, sp, #68	@ 0x44
 8001986:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8001988:	9315      	str	r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800198a:	482d      	ldr	r0, [pc, #180]	@ (8001a40 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800198c:	3308      	adds	r3, #8
 800198e:	9311      	str	r3, [sp, #68]	@ 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001990:	f000 fb66 	bl	8002060 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8001994:	2080      	movs	r0, #128	@ 0x80
 8001996:	0200      	lsls	r0, r0, #8
 8001998:	900c      	str	r0, [sp, #48]	@ 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	950d      	str	r5, [sp, #52]	@ 0x34
  initStruct.Pull = GPIO_PULLUP;
 800199c:	950e      	str	r5, [sp, #56]	@ 0x38
  RADIO_NSS_CLK_ENABLE();
 800199e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80019a0:	a80c      	add	r0, sp, #48	@ 0x30
  RADIO_NSS_CLK_ENABLE();
 80019a2:	432b      	orrs	r3, r5
 80019a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80019a6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80019a8:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 80019aa:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80019ac:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 80019ae:	9305      	str	r3, [sp, #20]
 80019b0:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 80019b2:	f000 fb55 	bl	8002060 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80019b6:	2180      	movs	r1, #128	@ 0x80
 80019b8:	002a      	movs	r2, r5
 80019ba:	0038      	movs	r0, r7
 80019bc:	0209      	lsls	r1, r1, #8
 80019be:	f000 fc8d 	bl	80022dc <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80019c2:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 80019c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 80019c6:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 80019c8:	432b      	orrs	r3, r5
 80019ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80019cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80019ce:	0038      	movs	r0, r7
  RADIO_TCXO_VCC_CLK_ENABLE();
 80019d0:	402b      	ands	r3, r5
 80019d2:	9306      	str	r3, [sp, #24]
 80019d4:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 80019d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80019d8:	432b      	orrs	r3, r5
 80019da:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80019dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80019de:	402b      	ands	r3, r5
 80019e0:	9307      	str	r3, [sp, #28]
 80019e2:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80019e4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80019e6:	4313      	orrs	r3, r2
 80019e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80019ea:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80019ec:	4013      	ands	r3, r2
 80019ee:	9308      	str	r3, [sp, #32]
 80019f0:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 80019f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80019f4:	4313      	orrs	r3, r2
 80019f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80019f8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80019fa:	0014      	movs	r4, r2
 80019fc:	4013      	ands	r3, r2
 80019fe:	9311      	str	r3, [sp, #68]	@ 0x44
 8001a00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  initStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	930e      	str	r3, [sp, #56]	@ 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8001a06:	2380      	movs	r3, #128	@ 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001a08:	910f      	str	r1, [sp, #60]	@ 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8001a0a:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8001a0c:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 8001a0e:	930c      	str	r3, [sp, #48]	@ 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	950d      	str	r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 8001a12:	f000 fb25 	bl	8002060 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8001a16:	0038      	movs	r0, r7
 8001a18:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 8001a1a:	960c      	str	r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 8001a1c:	f000 fb20 	bl	8002060 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8001a20:	a90c      	add	r1, sp, #48	@ 0x30
 8001a22:	4809      	ldr	r0, [pc, #36]	@ (8001a48 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 8001a24:	960c      	str	r6, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 8001a26:	f000 fb1b 	bl	8002060 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8001a2a:	4807      	ldr	r0, [pc, #28]	@ (8001a48 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 8001a2c:	a90c      	add	r1, sp, #48	@ 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 8001a2e:	940c      	str	r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 8001a30:	f000 fb16 	bl	8002060 <HAL_GPIO_Init>
}
 8001a34:	b017      	add	sp, #92	@ 0x5c
 8001a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	10110000 	.word	0x10110000
 8001a40:	50000400 	.word	0x50000400
 8001a44:	10310000 	.word	0x10310000
 8001a48:	50000800 	.word	0x50000800

08001a4c <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 8001a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8001a4e:	2608      	movs	r6, #8
{
 8001a50:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8001a52:	0032      	movs	r2, r6
 8001a54:	2100      	movs	r1, #0
 8001a56:	a803      	add	r0, sp, #12
 8001a58:	f004 fc66 	bl	8006328 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 8001a5c:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a5e:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a60:	4c22      	ldr	r4, [pc, #136]	@ (8001aec <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a62:	4f23      	ldr	r7, [pc, #140]	@ (8001af0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a64:	4669      	mov	r1, sp
 8001a66:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 8001a68:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a6a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a6c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a6e:	f000 faf7 	bl	8002060 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a74:	4669      	mov	r1, sp
 8001a76:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a78:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a7a:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a7c:	f000 faf0 	bl	8002060 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a80:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a82:	4669      	mov	r1, sp
 8001a84:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a86:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a88:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a8a:	f000 fae9 	bl	8002060 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a8e:	2380      	movs	r3, #128	@ 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a90:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a92:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a94:	4818      	ldr	r0, [pc, #96]	@ (8001af8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8001a96:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8001a98:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8001a9a:	f000 fae1 	bl	8002060 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a9e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001aa0:	25a0      	movs	r5, #160	@ 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa2:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001aa4:	2780      	movs	r7, #128	@ 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001aa6:	05ed      	lsls	r5, r5, #23
 8001aa8:	0028      	movs	r0, r5
 8001aaa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001aae:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001ab0:	f000 fad6 	bl	8002060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001ab4:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001ab6:	0028      	movs	r0, r5
 8001ab8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001aba:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001abc:	f000 fad0 	bl	8002060 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001ac0:	0020      	movs	r0, r4
 8001ac2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8001ac4:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001ac6:	f000 facb 	bl	8002060 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8001aca:	0039      	movs	r1, r7
 8001acc:	0028      	movs	r0, r5
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f000 fc04 	bl	80022dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8001ad4:	0028      	movs	r0, r5
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2140      	movs	r1, #64	@ 0x40
 8001ada:	f000 fbff 	bl	80022dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	0031      	movs	r1, r6
 8001ae2:	0020      	movs	r0, r4
 8001ae4:	f000 fbfa 	bl	80022dc <HAL_GPIO_WritePin>
}
 8001ae8:	b00b      	add	sp, #44	@ 0x2c
 8001aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aec:	50000400 	.word	0x50000400
 8001af0:	10110000 	.word	0x10110000
 8001af4:	10310000 	.word	0x10310000
 8001af8:	50000800 	.word	0x50000800

08001afc <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 8001afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001afe:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b00:	f3ef 8310 	mrs	r3, PRIMASK
 8001b04:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b06:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8001b08:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 8001b0a:	4e11      	ldr	r6, [pc, #68]	@ (8001b50 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 8001b0c:	4d11      	ldr	r5, [pc, #68]	@ (8001b54 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 8001b0e:	00e3      	lsls	r3, r4, #3
 8001b10:	18f6      	adds	r6, r6, r3
 8001b12:	00a7      	lsls	r7, r4, #2
 8001b14:	5979      	ldr	r1, [r7, r5]
 8001b16:	0030      	movs	r0, r6
 8001b18:	f000 fa89 	bl	800202e <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8001b1c:	9b00      	ldr	r3, [sp, #0]
 8001b1e:	2100      	movs	r1, #0
 8001b20:	59da      	ldr	r2, [r3, r7]
 8001b22:	0030      	movs	r0, r6
 8001b24:	f000 fa7c 	bl	8002020 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 8001b28:	002b      	movs	r3, r5
 8001b2a:	3310      	adds	r3, #16
 8001b2c:	56e6      	ldrsb	r6, [r4, r3]
 8001b2e:	3514      	adds	r5, #20
 8001b30:	2200      	movs	r2, #0
 8001b32:	0030      	movs	r0, r6
 8001b34:	5979      	ldr	r1, [r7, r5]
 8001b36:	f000 f8ed 	bl	8001d14 <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8001b3a:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 8001b3c:	0030      	movs	r0, r6
 8001b3e:	f000 f913 	bl	8001d68 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8001b42:	2c04      	cmp	r4, #4
 8001b44:	d1e1      	bne.n	8001b0a <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b46:	9b01      	ldr	r3, [sp, #4]
 8001b48:	f383 8810 	msr	PRIMASK, r3
}
 8001b4c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001b4e:	46c0      	nop			@ (mov r8, r8)
 8001b50:	2000043c 	.word	0x2000043c
 8001b54:	0800647c 	.word	0x0800647c

08001b58 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 8001b58:	2000      	movs	r0, #0
 8001b5a:	4770      	bx	lr

08001b5c <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 8001b5c:	3801      	subs	r0, #1
{
 8001b5e:	b510      	push	{r4, lr}
  switch (state)
 8001b60:	2803      	cmp	r0, #3
 8001b62:	d811      	bhi.n	8001b88 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8001b64:	f7fe fad8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8001b68:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 8001b6c:	20a0      	movs	r0, #160	@ 0xa0
 8001b6e:	2201      	movs	r2, #1
 8001b70:	2102      	movs	r1, #2
 8001b72:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001b74:	f000 fbb2 	bl	80022dc <HAL_GPIO_WritePin>
}
 8001b78:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001b7e:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8001b80:	e7f8      	b.n	8001b74 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8001b82:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001b84:	2102      	movs	r1, #2
 8001b86:	e7fa      	b.n	8001b7e <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8001b88:	20a0      	movs	r0, #160	@ 0xa0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	05c0      	lsls	r0, r0, #23
 8001b90:	f000 fba4 	bl	80022dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2104      	movs	r1, #4
 8001b98:	4802      	ldr	r0, [pc, #8]	@ (8001ba4 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8001b9a:	f000 fb9f 	bl	80022dc <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	e7f0      	b.n	8001b84 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 8001ba2:	46c0      	nop			@ (mov r8, r8)
 8001ba4:	50000800 	.word	0x50000800

08001ba8 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 8001ba8:	2001      	movs	r0, #1
 8001baa:	4770      	bx	lr

08001bac <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 8001bac:	b530      	push	{r4, r5, lr}
 8001bae:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8001bb0:	220c      	movs	r2, #12
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	a803      	add	r0, sp, #12
 8001bb6:	f004 fbb7 	bl	8006328 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bba:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001bbc:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8001bf4 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 8001bc0:	a901      	add	r1, sp, #4
 8001bc2:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001bc4:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc6:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 8001bc8:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001bca:	f000 fa49 	bl	8002060 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	0021      	movs	r1, r4
 8001bd2:	0028      	movs	r0, r5
 8001bd4:	f000 fb82 	bl	80022dc <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001bd8:	0020      	movs	r0, r4
 8001bda:	f7ff fbbf 	bl	800135c <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001be0:	0028      	movs	r0, r5
 8001be2:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 8001be4:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8001be6:	f000 fa3b 	bl	8002060 <HAL_GPIO_Init>
  HAL_Delay(6);
 8001bea:	2006      	movs	r0, #6
 8001bec:	f7ff fbb6 	bl	800135c <HAL_Delay>
}
 8001bf0:	b007      	add	sp, #28
 8001bf2:	bd30      	pop	{r4, r5, pc}
 8001bf4:	50000800 	.word	0x50000800

08001bf8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 8001bf8:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 8001bfa:	f7ff fd95 	bl	8001728 <BSP_SPI1_Init>
}
 8001bfe:	bd10      	pop	{r4, pc}

08001c00 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 8001c00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001c02:	240e      	movs	r4, #14
{
 8001c04:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001c06:	446c      	add	r4, sp
{
 8001c08:	80d8      	strh	r0, [r3, #6]
 8001c0a:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	0021      	movs	r1, r4
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff fd43 	bl	800169c <BSP_SPI1_SendRecv>
  return rxData;
 8001c16:	8820      	ldrh	r0, [r4, #0]
}
 8001c18:	b004      	add	sp, #16
 8001c1a:	bd10      	pop	{r4, pc}

08001c1c <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 8001c1c:	0002      	movs	r2, r0
 8001c1e:	b510      	push	{r4, lr}
  if (state == 0)
 8001c20:	2800      	cmp	r0, #0
 8001c22:	d106      	bne.n	8001c32 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	20a0      	movs	r0, #160	@ 0xa0
 8001c28:	0209      	lsls	r1, r1, #8
 8001c2a:	05c0      	lsls	r0, r0, #23
 8001c2c:	f000 fb56 	bl	80022dc <HAL_GPIO_WritePin>
}
 8001c30:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	e7f6      	b.n	8001c24 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

08001c38 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 8001c38:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	4801      	ldr	r0, [pc, #4]	@ (8001c44 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 8001c3e:	f000 fb47 	bl	80022d0 <HAL_GPIO_ReadPin>
}
 8001c42:	bd10      	pop	{r4, pc}
 8001c44:	50000400 	.word	0x50000400

08001c48 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001c48:	2280      	movs	r2, #128	@ 0x80
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <SystemInit+0x44>)
 8001c4c:	0052      	lsls	r2, r2, #1
 8001c4e:	6819      	ldr	r1, [r3, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	490e      	ldr	r1, [pc, #56]	@ (8001c90 <SystemInit+0x48>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	490d      	ldr	r1, [pc, #52]	@ (8001c94 <SystemInit+0x4c>)
 8001c60:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c62:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001c64:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	438a      	bics	r2, r1
 8001c6a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	490a      	ldr	r1, [pc, #40]	@ (8001c98 <SystemInit+0x50>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001c74:	68da      	ldr	r2, [r3, #12]
 8001c76:	4909      	ldr	r1, [pc, #36]	@ (8001c9c <SystemInit+0x54>)
 8001c78:	400a      	ands	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c80:	2280      	movs	r2, #128	@ 0x80
 8001c82:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <SystemInit+0x58>)
 8001c84:	0512      	lsls	r2, r2, #20
 8001c86:	609a      	str	r2, [r3, #8]
#endif
}
 8001c88:	4770      	bx	lr
 8001c8a:	46c0      	nop			@ (mov r8, r8)
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	88ff400c 	.word	0x88ff400c
 8001c94:	fef6fff6 	.word	0xfef6fff6
 8001c98:	fffbffff 	.word	0xfffbffff
 8001c9c:	ff02ffff 	.word	0xff02ffff
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	4a08      	ldr	r2, [pc, #32]	@ (8001cc8 <HAL_Init+0x24>)
{
 8001ca8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001caa:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cac:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cb2:	f7ff fb4d 	bl	8001350 <HAL_InitTick>
 8001cb6:	1e04      	subs	r4, r0, #0
 8001cb8:	d103      	bne.n	8001cc2 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cba:	f7ff fa4d 	bl	8001158 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001cbe:	0020      	movs	r0, r4
 8001cc0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001cc2:	2401      	movs	r4, #1
 8001cc4:	e7fb      	b.n	8001cbe <HAL_Init+0x1a>
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	40022000 	.word	0x40022000

08001ccc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001ccc:	4a03      	ldr	r2, [pc, #12]	@ (8001cdc <HAL_IncTick+0x10>)
 8001cce:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <HAL_IncTick+0x14>)
 8001cd0:	6811      	ldr	r1, [r2, #0]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	185b      	adds	r3, r3, r1
 8001cd6:	6013      	str	r3, [r2, #0]
}
 8001cd8:	4770      	bx	lr
 8001cda:	46c0      	nop			@ (mov r8, r8)
 8001cdc:	2000045c 	.word	0x2000045c
 8001ce0:	2000001c 	.word	0x2000001c

08001ce4 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	4a02      	ldr	r2, [pc, #8]	@ (8001cf0 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8001ce8:	6853      	ldr	r3, [r2, #4]
 8001cea:	438b      	bics	r3, r1
 8001cec:	6053      	str	r3, [r2, #4]
}
 8001cee:	4770      	bx	lr
 8001cf0:	40015800 	.word	0x40015800

08001cf4 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001cf4:	2102      	movs	r1, #2
 8001cf6:	4a02      	ldr	r2, [pc, #8]	@ (8001d00 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8001cf8:	6853      	ldr	r3, [r2, #4]
 8001cfa:	438b      	bics	r3, r1
 8001cfc:	6053      	str	r3, [r2, #4]
}
 8001cfe:	4770      	bx	lr
 8001d00:	40015800 	.word	0x40015800

08001d04 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001d04:	2104      	movs	r1, #4
 8001d06:	4a02      	ldr	r2, [pc, #8]	@ (8001d10 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8001d08:	6853      	ldr	r3, [r2, #4]
 8001d0a:	438b      	bics	r3, r1
 8001d0c:	6053      	str	r3, [r2, #4]
}
 8001d0e:	4770      	bx	lr
 8001d10:	40015800 	.word	0x40015800

08001d14 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d14:	b510      	push	{r4, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d16:	24ff      	movs	r4, #255	@ 0xff
 8001d18:	2203      	movs	r2, #3
 8001d1a:	000b      	movs	r3, r1
 8001d1c:	0021      	movs	r1, r4
 8001d1e:	4002      	ands	r2, r0
 8001d20:	00d2      	lsls	r2, r2, #3
 8001d22:	4091      	lsls	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d24:	019b      	lsls	r3, r3, #6
 8001d26:	4023      	ands	r3, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d28:	43c9      	mvns	r1, r1
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d2a:	4093      	lsls	r3, r2
  if ((int32_t)(IRQn) >= 0)
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	db0a      	blt.n	8001d46 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d30:	24c0      	movs	r4, #192	@ 0xc0
 8001d32:	4a0b      	ldr	r2, [pc, #44]	@ (8001d60 <HAL_NVIC_SetPriority+0x4c>)
 8001d34:	0880      	lsrs	r0, r0, #2
 8001d36:	0080      	lsls	r0, r0, #2
 8001d38:	1880      	adds	r0, r0, r2
 8001d3a:	00a4      	lsls	r4, r4, #2
 8001d3c:	5902      	ldr	r2, [r0, r4]
 8001d3e:	400a      	ands	r2, r1
 8001d40:	4313      	orrs	r3, r2
 8001d42:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001d44:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d46:	220f      	movs	r2, #15
 8001d48:	4010      	ands	r0, r2
 8001d4a:	3808      	subs	r0, #8
 8001d4c:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <HAL_NVIC_SetPriority+0x50>)
 8001d4e:	0880      	lsrs	r0, r0, #2
 8001d50:	0080      	lsls	r0, r0, #2
 8001d52:	1880      	adds	r0, r0, r2
 8001d54:	69c2      	ldr	r2, [r0, #28]
 8001d56:	4011      	ands	r1, r2
 8001d58:	4319      	orrs	r1, r3
 8001d5a:	61c1      	str	r1, [r0, #28]
 8001d5c:	e7f2      	b.n	8001d44 <HAL_NVIC_SetPriority+0x30>
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d68:	2800      	cmp	r0, #0
 8001d6a:	db05      	blt.n	8001d78 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6c:	231f      	movs	r3, #31
 8001d6e:	4018      	ands	r0, r3
 8001d70:	3b1e      	subs	r3, #30
 8001d72:	4083      	lsls	r3, r0
 8001d74:	4a01      	ldr	r2, [pc, #4]	@ (8001d7c <HAL_NVIC_EnableIRQ+0x14>)
 8001d76:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d78:	4770      	bx	lr
 8001d7a:	46c0      	nop			@ (mov r8, r8)
 8001d7c:	e000e100 	.word	0xe000e100

08001d80 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d80:	2800      	cmp	r0, #0
 8001d82:	db09      	blt.n	8001d98 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d84:	231f      	movs	r3, #31
 8001d86:	4018      	ands	r0, r3
 8001d88:	3b1e      	subs	r3, #30
 8001d8a:	4083      	lsls	r3, r0
 8001d8c:	4a03      	ldr	r2, [pc, #12]	@ (8001d9c <HAL_NVIC_DisableIRQ+0x1c>)
 8001d8e:	67d3      	str	r3, [r2, #124]	@ 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d90:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001d94:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001d98:	4770      	bx	lr
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	e000e104 	.word	0xe000e104

08001da0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da2:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8001da4:	2001      	movs	r0, #1
  if(hdma == NULL)
 8001da6:	2c00      	cmp	r4, #0
 8001da8:	d035      	beq.n	8001e16 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001daa:	6825      	ldr	r5, [r4, #0]
 8001dac:	4b1a      	ldr	r3, [pc, #104]	@ (8001e18 <HAL_DMA_Init+0x78>)
 8001dae:	2114      	movs	r1, #20
 8001db0:	18e8      	adds	r0, r5, r3
 8001db2:	f7fe f9bb 	bl	800012c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001db6:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001db8:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8001dba:	6423      	str	r3, [r4, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dc0:	6460      	str	r0, [r4, #68]	@ 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dc2:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dc4:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dc6:	4b16      	ldr	r3, [pc, #88]	@ (8001e20 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001dc8:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001dca:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8001dcc:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dce:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8001dd0:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	433b      	orrs	r3, r7
 8001dd4:	6967      	ldr	r7, [r4, #20]
 8001dd6:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd8:	69a7      	ldr	r7, [r4, #24]
 8001dda:	433b      	orrs	r3, r7
 8001ddc:	69e7      	ldr	r7, [r4, #28]
 8001dde:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de0:	6a27      	ldr	r7, [r4, #32]
 8001de2:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8001de4:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001de6:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001de8:	2380      	movs	r3, #128	@ 0x80
 8001dea:	01db      	lsls	r3, r3, #7
 8001dec:	4299      	cmp	r1, r3
 8001dee:	d00c      	beq.n	8001e0a <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001df0:	251c      	movs	r5, #28
 8001df2:	4028      	ands	r0, r5
 8001df4:	3d0d      	subs	r5, #13
 8001df6:	4085      	lsls	r5, r0
 8001df8:	490a      	ldr	r1, [pc, #40]	@ (8001e24 <HAL_DMA_Init+0x84>)
 8001dfa:	680b      	ldr	r3, [r1, #0]
 8001dfc:	43ab      	bics	r3, r5
 8001dfe:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e00:	6863      	ldr	r3, [r4, #4]
 8001e02:	680d      	ldr	r5, [r1, #0]
 8001e04:	4083      	lsls	r3, r0
 8001e06:	432b      	orrs	r3, r5
 8001e08:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0a:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e0c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0e:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e10:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8001e12:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001e14:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8001e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e18:	bffdfff8 	.word	0xbffdfff8
 8001e1c:	40020000 	.word	0x40020000
 8001e20:	ffff800f 	.word	0xffff800f
 8001e24:	400200a8 	.word	0x400200a8

08001e28 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	2501      	movs	r5, #1
 8001e2c:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8001e2e:	0028      	movs	r0, r5
  if (NULL == hdma )
 8001e30:	2c00      	cmp	r4, #0
 8001e32:	d021      	beq.n	8001e78 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001e34:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e36:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8001e38:	6833      	ldr	r3, [r6, #0]
 8001e3a:	43ab      	bics	r3, r5
 8001e3c:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e7c <HAL_DMA_DeInit+0x54>)
 8001e40:	18f0      	adds	r0, r6, r3
 8001e42:	f7fe f973 	bl	800012c <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e46:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e48:	0083      	lsls	r3, r0, #2
 8001e4a:	6463      	str	r3, [r4, #68]	@ 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e4c:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8001e4e:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e50:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e52:	390d      	subs	r1, #13
 8001e54:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 8001e56:	4a0a      	ldr	r2, [pc, #40]	@ (8001e80 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e58:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8001e5a:	6422      	str	r2, [r4, #64]	@ 0x40
  hdma->Instance->CCR  = 0U;
 8001e5c:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e5e:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e60:	4d08      	ldr	r5, [pc, #32]	@ (8001e84 <HAL_DMA_DeInit+0x5c>)
 8001e62:	682a      	ldr	r2, [r5, #0]
 8001e64:	438a      	bics	r2, r1
 8001e66:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8001e68:	62e0      	str	r0, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001e6a:	6320      	str	r0, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8001e6c:	6360      	str	r0, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8001e6e:	63a0      	str	r0, [r4, #56]	@ 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e70:	63e0      	str	r0, [r4, #60]	@ 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e72:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8001e74:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 8001e76:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8001e78:	bd70      	pop	{r4, r5, r6, pc}
 8001e7a:	46c0      	nop			@ (mov r8, r8)
 8001e7c:	bffdfff8 	.word	0xbffdfff8
 8001e80:	40020000 	.word	0x40020000
 8001e84:	400200a8 	.word	0x400200a8

08001e88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e8a:	1d44      	adds	r4, r0, #5
{
 8001e8c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8001e8e:	7fe5      	ldrb	r5, [r4, #31]
 8001e90:	2d01      	cmp	r5, #1
 8001e92:	d035      	beq.n	8001f00 <HAL_DMA_Start_IT+0x78>
 8001e94:	2501      	movs	r5, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e96:	1d87      	adds	r7, r0, #6
  __HAL_LOCK(hdma);
 8001e98:	77e5      	strb	r5, [r4, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e9a:	7ffd      	ldrb	r5, [r7, #31]
 8001e9c:	2600      	movs	r6, #0
 8001e9e:	46ac      	mov	ip, r5
 8001ea0:	4663      	mov	r3, ip
 8001ea2:	b2ed      	uxtb	r5, r5
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d12a      	bne.n	8001efe <HAL_DMA_Start_IT+0x76>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea8:	2402      	movs	r4, #2
 8001eaa:	77fc      	strb	r4, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eac:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eae:	63c6      	str	r6, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001eb0:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001eb2:	331b      	adds	r3, #27
    __HAL_DMA_DISABLE(hdma);
 8001eb4:	43ae      	bics	r6, r5
 8001eb6:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001eb8:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8001eba:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8001ebc:	401e      	ands	r6, r3
 8001ebe:	40b5      	lsls	r5, r6

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ec0:	9b01      	ldr	r3, [sp, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ec2:	607d      	str	r5, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8001ec4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ec6:	6883      	ldr	r3, [r0, #8]
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d10e      	bne.n	8001eea <HAL_DMA_Start_IT+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ecc:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ece:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001ed0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00c      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed6:	230e      	movs	r3, #14
 8001ed8:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001eda:	4313      	orrs	r3, r2
 8001edc:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ede:	2301      	movs	r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001ee0:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001ee2:	6822      	ldr	r2, [r4, #0]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	6023      	str	r3, [r4, #0]
}
 8001ee8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001eea:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001eec:	60e2      	str	r2, [r4, #12]
 8001eee:	e7ef      	b.n	8001ed0 <HAL_DMA_Start_IT+0x48>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	4393      	bics	r3, r2
 8001ef6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ef8:	6822      	ldr	r2, [r4, #0]
 8001efa:	230a      	movs	r3, #10
 8001efc:	e7ed      	b.n	8001eda <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma);
 8001efe:	77e6      	strb	r6, [r4, #31]
  __HAL_LOCK(hdma);
 8001f00:	2002      	movs	r0, #2
 8001f02:	e7f1      	b.n	8001ee8 <HAL_DMA_Start_IT+0x60>

08001f04 <HAL_DMA_Abort>:
{
 8001f04:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f06:	1d84      	adds	r4, r0, #6
 8001f08:	7fe2      	ldrb	r2, [r4, #31]
{
 8001f0a:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f0c:	2a02      	cmp	r2, #2
 8001f0e:	d006      	beq.n	8001f1e <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f10:	2204      	movs	r2, #4
 8001f12:	63c2      	str	r2, [r0, #60]	@ 0x3c
    return HAL_ERROR;
 8001f14:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001f16:	2200      	movs	r2, #0
 8001f18:	3305      	adds	r3, #5
 8001f1a:	77da      	strb	r2, [r3, #31]
}
 8001f1c:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f1e:	6802      	ldr	r2, [r0, #0]
 8001f20:	200e      	movs	r0, #14
 8001f22:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f24:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f26:	4381      	bics	r1, r0
 8001f28:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	6810      	ldr	r0, [r2, #0]
 8001f2e:	4388      	bics	r0, r1
 8001f30:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f34:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001f36:	402a      	ands	r2, r5
 8001f38:	000d      	movs	r5, r1
 8001f3a:	4095      	lsls	r5, r2
 8001f3c:	6045      	str	r5, [r0, #4]
    return status;
 8001f3e:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001f40:	77e1      	strb	r1, [r4, #31]
    return status;
 8001f42:	e7e8      	b.n	8001f16 <HAL_DMA_Abort+0x12>

08001f44 <HAL_DMA_Abort_IT>:
{
 8001f44:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f46:	1d84      	adds	r4, r0, #6
 8001f48:	7fe3      	ldrb	r3, [r4, #31]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d003      	beq.n	8001f56 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8001f52:	2001      	movs	r0, #1
}
 8001f54:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f56:	210e      	movs	r1, #14
 8001f58:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f5a:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	438a      	bics	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f62:	2201      	movs	r2, #1
 8001f64:	6819      	ldr	r1, [r3, #0]
 8001f66:	4391      	bics	r1, r2
 8001f68:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f6a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8001f6c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001f6e:	402b      	ands	r3, r5
 8001f70:	0015      	movs	r5, r2
 8001f72:	409d      	lsls	r5, r3
 8001f74:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001f76:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001f78:	2200      	movs	r2, #0
 8001f7a:	1d43      	adds	r3, r0, #5
 8001f7c:	77da      	strb	r2, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8001f7e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d000      	beq.n	8001f86 <HAL_DMA_Abort_IT+0x42>
      hdma->XferAbortCallback(hdma);
 8001f84:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001f86:	2000      	movs	r0, #0
 8001f88:	e7e4      	b.n	8001f54 <HAL_DMA_Abort_IT+0x10>

08001f8a <HAL_DMA_IRQHandler>:
{
 8001f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f8c:	261c      	movs	r6, #28
 8001f8e:	2704      	movs	r7, #4
 8001f90:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f92:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f94:	4032      	ands	r2, r6
 8001f96:	003e      	movs	r6, r7
 8001f98:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f9a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001f9c:	6803      	ldr	r3, [r0, #0]
 8001f9e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001fa0:	4235      	tst	r5, r6
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x36>
 8001fa4:	423c      	tst	r4, r7
 8001fa6:	d00b      	beq.n	8001fc0 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	0692      	lsls	r2, r2, #26
 8001fac:	d402      	bmi.n	8001fb4 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	43ba      	bics	r2, r7
 8001fb2:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001fb4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001fb6:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d019      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8001fbc:	4798      	blx	r3
  return;
 8001fbe:	e017      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001fc0:	2702      	movs	r7, #2
 8001fc2:	003e      	movs	r6, r7
 8001fc4:	4096      	lsls	r6, r2
 8001fc6:	4235      	tst	r5, r6
 8001fc8:	d013      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x68>
 8001fca:	423c      	tst	r4, r7
 8001fcc:	d011      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	0692      	lsls	r2, r2, #26
 8001fd2:	d406      	bmi.n	8001fe2 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fd4:	240a      	movs	r4, #10
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	43a2      	bics	r2, r4
 8001fda:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	1d83      	adds	r3, r0, #6
 8001fe0:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fe6:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001fe8:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8001fea:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d1e5      	bne.n	8001fbc <HAL_DMA_IRQHandler+0x32>
}
 8001ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001ff2:	2608      	movs	r6, #8
 8001ff4:	0037      	movs	r7, r6
 8001ff6:	4097      	lsls	r7, r2
 8001ff8:	423d      	tst	r5, r7
 8001ffa:	d0f9      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x66>
 8001ffc:	4234      	tst	r4, r6
 8001ffe:	d0f7      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002000:	250e      	movs	r5, #14
 8002002:	681c      	ldr	r4, [r3, #0]
 8002004:	43ac      	bics	r4, r5
 8002006:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002008:	2301      	movs	r3, #1
 800200a:	001c      	movs	r4, r3
 800200c:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800200e:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002010:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002012:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002014:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8002016:	2200      	movs	r2, #0
 8002018:	1d43      	adds	r3, r0, #5
 800201a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800201c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800201e:	e7e5      	b.n	8001fec <HAL_DMA_IRQHandler+0x62>

08002020 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002020:	0003      	movs	r3, r0
 8002022:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8002024:	d101      	bne.n	800202a <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002026:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8002028:	4770      	bx	lr
      status = HAL_ERROR;
 800202a:	2001      	movs	r0, #1
 800202c:	e7fc      	b.n	8002028 <HAL_EXTI_RegisterCallback+0x8>

0800202e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800202e:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8002030:	2001      	movs	r0, #1
  if (hexti == NULL)
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8002036:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8002038:	6019      	str	r1, [r3, #0]
  }
}
 800203a:	4770      	bx	lr

0800203c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800203c:	231f      	movs	r3, #31
 800203e:	6802      	ldr	r2, [r0, #0]
{
 8002040:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002042:	401a      	ands	r2, r3
 8002044:	3b1e      	subs	r3, #30
 8002046:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8002048:	4a04      	ldr	r2, [pc, #16]	@ (800205c <HAL_EXTI_IRQHandler+0x20>)
 800204a:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 800204c:	420b      	tst	r3, r1
 800204e:	d004      	beq.n	800205a <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8002050:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8002052:	6843      	ldr	r3, [r0, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d000      	beq.n	800205a <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8002058:	4798      	blx	r3
    }
  }
}
 800205a:	bd10      	pop	{r4, pc}
 800205c:	40010400 	.word	0x40010400

08002060 <HAL_GPIO_Init>:
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8002060:	2300      	movs	r3, #0
{
 8002062:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002064:	b085      	sub	sp, #20
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002066:	680a      	ldr	r2, [r1, #0]
 8002068:	0014      	movs	r4, r2
 800206a:	40dc      	lsrs	r4, r3
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x12>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800206e:	b005      	add	sp, #20
 8002070:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002072:	2401      	movs	r4, #1
 8002074:	0015      	movs	r5, r2
 8002076:	409c      	lsls	r4, r3
 8002078:	4025      	ands	r5, r4
 800207a:	9502      	str	r5, [sp, #8]
    if (iocurrent)
 800207c:	4222      	tst	r2, r4
 800207e:	d100      	bne.n	8002082 <HAL_GPIO_Init+0x22>
 8002080:	e098      	b.n	80021b4 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002082:	2510      	movs	r5, #16
 8002084:	684a      	ldr	r2, [r1, #4]
 8002086:	005f      	lsls	r7, r3, #1
 8002088:	9201      	str	r2, [sp, #4]
 800208a:	43aa      	bics	r2, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800208c:	3d0d      	subs	r5, #13
 800208e:	40bd      	lsls	r5, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002090:	4694      	mov	ip, r2
 8002092:	3a01      	subs	r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002094:	43ed      	mvns	r5, r5
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002096:	2a01      	cmp	r2, #1
 8002098:	d80d      	bhi.n	80020b6 <HAL_GPIO_Init+0x56>
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209a:	68ca      	ldr	r2, [r1, #12]
        temp = GPIOx->OSPEEDR;
 800209c:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800209e:	40ba      	lsls	r2, r7
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80020a0:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 80020a4:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80020a6:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a8:	43a2      	bics	r2, r4
 80020aa:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020ac:	9a01      	ldr	r2, [sp, #4]
 80020ae:	0912      	lsrs	r2, r2, #4
 80020b0:	409a      	lsls	r2, r3
 80020b2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80020b4:	6042      	str	r2, [r0, #4]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b6:	688a      	ldr	r2, [r1, #8]
      temp = GPIOx->PUPDR;
 80020b8:	68c4      	ldr	r4, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ba:	40ba      	lsls	r2, r7
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020bc:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020be:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 80020c0:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020c2:	4662      	mov	r2, ip
 80020c4:	2a02      	cmp	r2, #2
 80020c6:	d114      	bne.n	80020f2 <HAL_GPIO_Init+0x92>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80020c8:	2407      	movs	r4, #7
 80020ca:	260f      	movs	r6, #15
 80020cc:	401c      	ands	r4, r3
 80020ce:	00a4      	lsls	r4, r4, #2
 80020d0:	40a6      	lsls	r6, r4
 80020d2:	46b4      	mov	ip, r6
        temp = GPIOx->AFR[position >> 3U];
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	1882      	adds	r2, r0, r2
 80020da:	9203      	str	r2, [sp, #12]
 80020dc:	6a12      	ldr	r2, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80020de:	0016      	movs	r6, r2
 80020e0:	4662      	mov	r2, ip
 80020e2:	4396      	bics	r6, r2
 80020e4:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80020e6:	690e      	ldr	r6, [r1, #16]
 80020e8:	4662      	mov	r2, ip
 80020ea:	40a6      	lsls	r6, r4
 80020ec:	4316      	orrs	r6, r2
        GPIOx->AFR[position >> 3U] = temp;
 80020ee:	9a03      	ldr	r2, [sp, #12]
 80020f0:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 80020f2:	6804      	ldr	r4, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f4:	9a01      	ldr	r2, [sp, #4]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020f6:	402c      	ands	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	2503      	movs	r5, #3
 80020fa:	402a      	ands	r2, r5
 80020fc:	40ba      	lsls	r2, r7
 80020fe:	4322      	orrs	r2, r4
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002100:	2480      	movs	r4, #128	@ 0x80
      GPIOx->MODER = temp;
 8002102:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002104:	9a01      	ldr	r2, [sp, #4]
 8002106:	0564      	lsls	r4, r4, #21
 8002108:	4222      	tst	r2, r4
 800210a:	d053      	beq.n	80021b4 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210c:	4c2a      	ldr	r4, [pc, #168]	@ (80021b8 <HAL_GPIO_Init+0x158>)
 800210e:	3d02      	subs	r5, #2
 8002110:	6b62      	ldr	r2, [r4, #52]	@ 0x34
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002112:	27a0      	movs	r7, #160	@ 0xa0
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002114:	432a      	orrs	r2, r5
 8002116:	6362      	str	r2, [r4, #52]	@ 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8002118:	4a28      	ldr	r2, [pc, #160]	@ (80021bc <HAL_GPIO_Init+0x15c>)
 800211a:	089c      	lsrs	r4, r3, #2
 800211c:	00a4      	lsls	r4, r4, #2
 800211e:	18a4      	adds	r4, r4, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002120:	220f      	movs	r2, #15
 8002122:	3502      	adds	r5, #2
 8002124:	401d      	ands	r5, r3
 8002126:	00ad      	lsls	r5, r5, #2
 8002128:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2U];
 800212a:	68a6      	ldr	r6, [r4, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800212c:	05ff      	lsls	r7, r7, #23
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800212e:	4396      	bics	r6, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002130:	2200      	movs	r2, #0
 8002132:	42b8      	cmp	r0, r7
 8002134:	d014      	beq.n	8002160 <HAL_GPIO_Init+0x100>
 8002136:	4f22      	ldr	r7, [pc, #136]	@ (80021c0 <HAL_GPIO_Init+0x160>)
 8002138:	3201      	adds	r2, #1
 800213a:	42b8      	cmp	r0, r7
 800213c:	d010      	beq.n	8002160 <HAL_GPIO_Init+0x100>
 800213e:	4f21      	ldr	r7, [pc, #132]	@ (80021c4 <HAL_GPIO_Init+0x164>)
 8002140:	3201      	adds	r2, #1
 8002142:	42b8      	cmp	r0, r7
 8002144:	d00c      	beq.n	8002160 <HAL_GPIO_Init+0x100>
 8002146:	4f20      	ldr	r7, [pc, #128]	@ (80021c8 <HAL_GPIO_Init+0x168>)
 8002148:	3201      	adds	r2, #1
 800214a:	42b8      	cmp	r0, r7
 800214c:	d008      	beq.n	8002160 <HAL_GPIO_Init+0x100>
 800214e:	4f1f      	ldr	r7, [pc, #124]	@ (80021cc <HAL_GPIO_Init+0x16c>)
 8002150:	3201      	adds	r2, #1
 8002152:	42b8      	cmp	r0, r7
 8002154:	d004      	beq.n	8002160 <HAL_GPIO_Init+0x100>
 8002156:	4a1e      	ldr	r2, [pc, #120]	@ (80021d0 <HAL_GPIO_Init+0x170>)
 8002158:	1882      	adds	r2, r0, r2
 800215a:	1e57      	subs	r7, r2, #1
 800215c:	41ba      	sbcs	r2, r7
 800215e:	3205      	adds	r2, #5
 8002160:	40aa      	lsls	r2, r5
 8002162:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002164:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8002166:	4a1b      	ldr	r2, [pc, #108]	@ (80021d4 <HAL_GPIO_Init+0x174>)
        temp &= ~((uint32_t)iocurrent);
 8002168:	9c02      	ldr	r4, [sp, #8]
        temp = EXTI->IMR;
 800216a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800216c:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800216e:	9f01      	ldr	r7, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8002170:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8002172:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002174:	03ff      	lsls	r7, r7, #15
 8002176:	d401      	bmi.n	800217c <HAL_GPIO_Init+0x11c>
        temp &= ~((uint32_t)iocurrent);
 8002178:	0035      	movs	r5, r6
 800217a:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 800217c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800217e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8002180:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002182:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002184:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002186:	03bf      	lsls	r7, r7, #14
 8002188:	d401      	bmi.n	800218e <HAL_GPIO_Init+0x12e>
        temp &= ~((uint32_t)iocurrent);
 800218a:	0035      	movs	r5, r6
 800218c:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 800218e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002190:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002192:	9d02      	ldr	r5, [sp, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002194:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 8002196:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002198:	02ff      	lsls	r7, r7, #11
 800219a:	d401      	bmi.n	80021a0 <HAL_GPIO_Init+0x140>
        temp &= ~((uint32_t)iocurrent);
 800219c:	0035      	movs	r5, r6
 800219e:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 80021a0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 80021a2:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 80021a4:	9e02      	ldr	r6, [sp, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021a6:	9f01      	ldr	r7, [sp, #4]
          temp |= iocurrent;
 80021a8:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021aa:	02bf      	lsls	r7, r7, #10
 80021ac:	d401      	bmi.n	80021b2 <HAL_GPIO_Init+0x152>
        temp &= ~((uint32_t)iocurrent);
 80021ae:	4025      	ands	r5, r4
 80021b0:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80021b2:	60d6      	str	r6, [r2, #12]
    position++;
 80021b4:	3301      	adds	r3, #1
 80021b6:	e756      	b.n	8002066 <HAL_GPIO_Init+0x6>
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40010000 	.word	0x40010000
 80021c0:	50000400 	.word	0x50000400
 80021c4:	50000800 	.word	0x50000800
 80021c8:	50000c00 	.word	0x50000c00
 80021cc:	50001000 	.word	0x50001000
 80021d0:	afffe400 	.word	0xafffe400
 80021d4:	40010400 	.word	0x40010400

080021d8 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80021d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00U;
 80021da:	2200      	movs	r2, #0
{
 80021dc:	000f      	movs	r7, r1
 80021de:	b085      	sub	sp, #20

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80021e0:	003b      	movs	r3, r7
 80021e2:	40d3      	lsrs	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_DeInit+0x12>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 80021e6:	b005      	add	sp, #20
 80021e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 80021ea:	2301      	movs	r3, #1
 80021ec:	4093      	lsls	r3, r2
 80021ee:	001c      	movs	r4, r3
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	403c      	ands	r4, r7
    if (iocurrent)
 80021f4:	421f      	tst	r7, r3
 80021f6:	d05a      	beq.n	80022ae <HAL_GPIO_DeInit+0xd6>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80021f8:	4b2e      	ldr	r3, [pc, #184]	@ (80022b4 <HAL_GPIO_DeInit+0xdc>)
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80021fa:	2503      	movs	r5, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80021fc:	0891      	lsrs	r1, r2, #2
 80021fe:	0089      	lsls	r1, r1, #2
 8002200:	18c9      	adds	r1, r1, r3
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8002202:	230f      	movs	r3, #15
 8002204:	4015      	ands	r5, r2
 8002206:	00ad      	lsls	r5, r5, #2
 8002208:	40ab      	lsls	r3, r5
      tmp = SYSCFG->EXTICR[position >> 2U];
 800220a:	688e      	ldr	r6, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800220c:	9302      	str	r3, [sp, #8]
 800220e:	401e      	ands	r6, r3
 8002210:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002212:	26a0      	movs	r6, #160	@ 0xa0
 8002214:	2300      	movs	r3, #0
 8002216:	05f6      	lsls	r6, r6, #23
 8002218:	42b0      	cmp	r0, r6
 800221a:	d018      	beq.n	800224e <HAL_GPIO_DeInit+0x76>
 800221c:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_GPIO_DeInit+0xe0>)
 800221e:	469c      	mov	ip, r3
 8002220:	2301      	movs	r3, #1
 8002222:	4560      	cmp	r0, ip
 8002224:	d013      	beq.n	800224e <HAL_GPIO_DeInit+0x76>
 8002226:	4b25      	ldr	r3, [pc, #148]	@ (80022bc <HAL_GPIO_DeInit+0xe4>)
 8002228:	469c      	mov	ip, r3
 800222a:	2302      	movs	r3, #2
 800222c:	4560      	cmp	r0, ip
 800222e:	d00e      	beq.n	800224e <HAL_GPIO_DeInit+0x76>
 8002230:	4b23      	ldr	r3, [pc, #140]	@ (80022c0 <HAL_GPIO_DeInit+0xe8>)
 8002232:	469c      	mov	ip, r3
 8002234:	2303      	movs	r3, #3
 8002236:	4560      	cmp	r0, ip
 8002238:	d009      	beq.n	800224e <HAL_GPIO_DeInit+0x76>
 800223a:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <HAL_GPIO_DeInit+0xec>)
 800223c:	469c      	mov	ip, r3
 800223e:	2304      	movs	r3, #4
 8002240:	4560      	cmp	r0, ip
 8002242:	d004      	beq.n	800224e <HAL_GPIO_DeInit+0x76>
 8002244:	4b20      	ldr	r3, [pc, #128]	@ (80022c8 <HAL_GPIO_DeInit+0xf0>)
 8002246:	18c3      	adds	r3, r0, r3
 8002248:	1e5e      	subs	r6, r3, #1
 800224a:	41b3      	sbcs	r3, r6
 800224c:	3305      	adds	r3, #5
 800224e:	40ab      	lsls	r3, r5
 8002250:	9d03      	ldr	r5, [sp, #12]
 8002252:	42ab      	cmp	r3, r5
 8002254:	d110      	bne.n	8002278 <HAL_GPIO_DeInit+0xa0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002256:	4b1d      	ldr	r3, [pc, #116]	@ (80022cc <HAL_GPIO_DeInit+0xf4>)
 8002258:	681d      	ldr	r5, [r3, #0]
 800225a:	43a5      	bics	r5, r4
 800225c:	601d      	str	r5, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800225e:	685d      	ldr	r5, [r3, #4]
 8002260:	43a5      	bics	r5, r4
 8002262:	605d      	str	r5, [r3, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002264:	689d      	ldr	r5, [r3, #8]
 8002266:	43a5      	bics	r5, r4
 8002268:	609d      	str	r5, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800226a:	68dd      	ldr	r5, [r3, #12]
 800226c:	43a5      	bics	r5, r4
 800226e:	60dd      	str	r5, [r3, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002270:	688b      	ldr	r3, [r1, #8]
 8002272:	9c02      	ldr	r4, [sp, #8]
 8002274:	43a3      	bics	r3, r4
 8002276:	608b      	str	r3, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002278:	2403      	movs	r4, #3
 800227a:	0051      	lsls	r1, r2, #1
 800227c:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800227e:	2107      	movs	r1, #7
 8002280:	260f      	movs	r6, #15
 8002282:	4011      	ands	r1, r2
 8002284:	0089      	lsls	r1, r1, #2
 8002286:	408e      	lsls	r6, r1
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002288:	6803      	ldr	r3, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800228a:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800228c:	4323      	orrs	r3, r4
 800228e:	6003      	str	r3, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002290:	08d3      	lsrs	r3, r2, #3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	18c3      	adds	r3, r0, r3
 8002296:	6a1d      	ldr	r5, [r3, #32]
 8002298:	43b5      	bics	r5, r6
 800229a:	621d      	str	r5, [r3, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800229c:	68c3      	ldr	r3, [r0, #12]
 800229e:	43a3      	bics	r3, r4
 80022a0:	60c3      	str	r3, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80022a2:	6843      	ldr	r3, [r0, #4]
 80022a4:	438b      	bics	r3, r1
 80022a6:	6043      	str	r3, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80022a8:	6883      	ldr	r3, [r0, #8]
 80022aa:	43a3      	bics	r3, r4
 80022ac:	6083      	str	r3, [r0, #8]
    position++;
 80022ae:	3201      	adds	r2, #1
 80022b0:	e796      	b.n	80021e0 <HAL_GPIO_DeInit+0x8>
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	40010000 	.word	0x40010000
 80022b8:	50000400 	.word	0x50000400
 80022bc:	50000800 	.word	0x50000800
 80022c0:	50000c00 	.word	0x50000c00
 80022c4:	50001000 	.word	0x50001000
 80022c8:	afffe400 	.word	0xafffe400
 80022cc:	40010400 	.word	0x40010400

080022d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022d0:	6900      	ldr	r0, [r0, #16]
 80022d2:	4008      	ands	r0, r1
 80022d4:	1e43      	subs	r3, r0, #1
 80022d6:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80022d8:	b2c0      	uxtb	r0, r0
}
 80022da:	4770      	bx	lr

080022dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022dc:	2a00      	cmp	r2, #0
 80022de:	d001      	beq.n	80022e4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80022e2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80022e4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80022e6:	e7fc      	b.n	80022e2 <HAL_GPIO_WritePin+0x6>

080022e8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80022e8:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022ea:	0013      	movs	r3, r2
 80022ec:	400b      	ands	r3, r1
 80022ee:	041b      	lsls	r3, r3, #16
 80022f0:	4391      	bics	r1, r2
 80022f2:	430b      	orrs	r3, r1
 80022f4:	6183      	str	r3, [r0, #24]
}
 80022f6:	4770      	bx	lr

080022f8 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 80022f8:	2110      	movs	r1, #16
 80022fa:	4a02      	ldr	r2, [pc, #8]	@ (8002304 <HAL_PWR_DisablePVD+0xc>)
 80022fc:	6813      	ldr	r3, [r2, #0]
 80022fe:	438b      	bics	r3, r1
 8002300:	6013      	str	r3, [r2, #0]
}
 8002302:	4770      	bx	lr
 8002304:	40007000 	.word	0x40007000

08002308 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002308:	4b17      	ldr	r3, [pc, #92]	@ (8002368 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 800230a:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800230c:	681e      	ldr	r6, [r3, #0]
{
 800230e:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002310:	2080      	movs	r0, #128	@ 0x80
 8002312:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002314:	2701      	movs	r7, #1
 8002316:	4a15      	ldr	r2, [pc, #84]	@ (800236c <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002318:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800231a:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800231c:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800231e:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8002320:	4206      	tst	r6, r0
 8002322:	d005      	beq.n	8002330 <HAL_PWR_EnterSLEEPMode+0x28>
 8002324:	2a00      	cmp	r2, #0
 8002326:	d003      	beq.n	8002330 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8002328:	6818      	ldr	r0, [r3, #0]
 800232a:	4e11      	ldr	r6, [pc, #68]	@ (8002370 <HAL_PWR_EnterSLEEPMode+0x68>)
 800232c:	4030      	ands	r0, r6
 800232e:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002330:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8002332:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002334:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002336:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002338:	4d0e      	ldr	r5, [pc, #56]	@ (8002374 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 800233a:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800233c:	6928      	ldr	r0, [r5, #16]
 800233e:	3601      	adds	r6, #1
 8002340:	43b0      	bics	r0, r6
 8002342:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002344:	2901      	cmp	r1, #1
 8002346:	d10b      	bne.n	8002360 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002348:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 800234a:	2c00      	cmp	r4, #0
 800234c:	d006      	beq.n	800235c <HAL_PWR_EnterSLEEPMode+0x54>
 800234e:	2a00      	cmp	r2, #0
 8002350:	d004      	beq.n	800235c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8002352:	2280      	movs	r2, #128	@ 0x80
 8002354:	6819      	ldr	r1, [r3, #0]
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 800235c:	46c0      	nop			@ (mov r8, r8)

}
 800235e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8002360:	bf40      	sev
    __WFE();
 8002362:	bf20      	wfe
    __WFE();
 8002364:	bf20      	wfe
 8002366:	e7f0      	b.n	800234a <HAL_PWR_EnterSLEEPMode+0x42>
 8002368:	40007000 	.word	0x40007000
 800236c:	40010000 	.word	0x40010000
 8002370:	fffffdff 	.word	0xfffffdff
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_PWR_EnterSTOPMode+0x68>)
{
 800237a:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800237c:	681e      	ldr	r6, [r3, #0]
{
 800237e:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002380:	2080      	movs	r0, #128	@ 0x80
 8002382:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002384:	2701      	movs	r7, #1
 8002386:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002388:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800238a:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800238c:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800238e:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8002390:	4206      	tst	r6, r0
 8002392:	d005      	beq.n	80023a0 <HAL_PWR_EnterSTOPMode+0x28>
 8002394:	2a00      	cmp	r2, #0
 8002396:	d003      	beq.n	80023a0 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	4e13      	ldr	r6, [pc, #76]	@ (80023e8 <HAL_PWR_EnterSTOPMode+0x70>)
 800239c:	4030      	ands	r0, r6
 800239e:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80023a0:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 80023a2:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80023a4:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80023a6:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80023a8:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 80023aa:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80023ac:	480f      	ldr	r0, [pc, #60]	@ (80023ec <HAL_PWR_EnterSTOPMode+0x74>)
 80023ae:	6906      	ldr	r6, [r0, #16]
 80023b0:	4335      	orrs	r5, r6
 80023b2:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80023b4:	2901      	cmp	r1, #1
 80023b6:	d10e      	bne.n	80023d6 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80023b8:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80023ba:	2504      	movs	r5, #4
 80023bc:	6901      	ldr	r1, [r0, #16]
 80023be:	43a9      	bics	r1, r5
 80023c0:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80023c2:	2c00      	cmp	r4, #0
 80023c4:	d006      	beq.n	80023d4 <HAL_PWR_EnterSTOPMode+0x5c>
 80023c6:	2a00      	cmp	r2, #0
 80023c8:	d004      	beq.n	80023d4 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80023ca:	2280      	movs	r2, #128	@ 0x80
 80023cc:	6819      	ldr	r1, [r3, #0]
 80023ce:	0092      	lsls	r2, r2, #2
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
  }
}
 80023d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 80023d6:	bf40      	sev
    __WFE();
 80023d8:	bf20      	wfe
    __WFE();
 80023da:	bf20      	wfe
 80023dc:	e7ed      	b.n	80023ba <HAL_PWR_EnterSTOPMode+0x42>
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	40007000 	.word	0x40007000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	fffffdff 	.word	0xfffffdff
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 80023f0:	2380      	movs	r3, #128	@ 0x80
 80023f2:	4a03      	ldr	r2, [pc, #12]	@ (8002400 <HAL_PWREx_EnableFastWakeUp+0x10>)
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	6811      	ldr	r1, [r2, #0]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	6013      	str	r3, [r2, #0]
}
 80023fc:	4770      	bx	lr
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	40007000 	.word	0x40007000

08002404 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	4a03      	ldr	r2, [pc, #12]	@ (8002414 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	6811      	ldr	r1, [r2, #0]
 800240c:	430b      	orrs	r3, r1
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	4770      	bx	lr
 8002412:	46c0      	nop			@ (mov r8, r8)
 8002414:	40007000 	.word	0x40007000

08002418 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002418:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800241a:	4b1e      	ldr	r3, [pc, #120]	@ (8002494 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 800241c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800241e:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002420:	4022      	ands	r2, r4
 8002422:	2a08      	cmp	r2, #8
 8002424:	d034      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x78>
 8002426:	2a0c      	cmp	r2, #12
 8002428:	d00c      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x2c>
 800242a:	2a04      	cmp	r2, #4
 800242c:	d128      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	2310      	movs	r3, #16
 8002432:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002434:	4243      	negs	r3, r0
 8002436:	4158      	adcs	r0, r3
 8002438:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <HAL_RCC_GetSysClockFreq+0x80>)
 800243a:	4240      	negs	r0, r0
 800243c:	4018      	ands	r0, r3
 800243e:	4b17      	ldr	r3, [pc, #92]	@ (800249c <HAL_RCC_GetSysClockFreq+0x84>)
 8002440:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8002442:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002444:	02a2      	lsls	r2, r4, #10
 8002446:	4816      	ldr	r0, [pc, #88]	@ (80024a0 <HAL_RCC_GetSysClockFreq+0x88>)
 8002448:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800244a:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800244c:	2280      	movs	r2, #128	@ 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800244e:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002450:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002452:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002454:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002456:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002458:	4211      	tst	r1, r2
 800245a:	d009      	beq.n	8002470 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800245c:	4a11      	ldr	r2, [pc, #68]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x8c>)
 800245e:	2300      	movs	r3, #0
 8002460:	2100      	movs	r1, #0
 8002462:	f7fd fff9 	bl	8000458 <__aeabi_lmul>
 8002466:	0022      	movs	r2, r4
 8002468:	2300      	movs	r3, #0
 800246a:	f7fd ffd5 	bl	8000418 <__aeabi_uldivmod>
 800246e:	e7e8      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	2310      	movs	r3, #16
 8002474:	421a      	tst	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002478:	4a08      	ldr	r2, [pc, #32]	@ (800249c <HAL_RCC_GetSysClockFreq+0x84>)
 800247a:	e7f0      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800247c:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <HAL_RCC_GetSysClockFreq+0x90>)
 800247e:	e7ee      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002480:	2080      	movs	r0, #128	@ 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002482:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002484:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800248a:	3301      	adds	r3, #1
 800248c:	4098      	lsls	r0, r3
      break;
 800248e:	e7d8      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x2a>
  switch (tmpreg & RCC_CFGR_SWS)
 8002490:	4804      	ldr	r0, [pc, #16]	@ (80024a4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002492:	e7d6      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x2a>
 8002494:	40021000 	.word	0x40021000
 8002498:	00b71b00 	.word	0x00b71b00
 800249c:	003d0900 	.word	0x003d0900
 80024a0:	080064a0 	.word	0x080064a0
 80024a4:	007a1200 	.word	0x007a1200
 80024a8:	00f42400 	.word	0x00f42400

080024ac <HAL_RCC_OscConfig>:
{
 80024ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ae:	0005      	movs	r5, r0
 80024b0:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d059      	beq.n	800256a <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b6:	230c      	movs	r3, #12
 80024b8:	4cb8      	ldr	r4, [pc, #736]	@ (800279c <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024bc:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024be:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024c0:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	025b      	lsls	r3, r3, #9
 80024c6:	0019      	movs	r1, r3
 80024c8:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ca:	07d2      	lsls	r2, r2, #31
 80024cc:	d441      	bmi.n	8002552 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ce:	682b      	ldr	r3, [r5, #0]
 80024d0:	079b      	lsls	r3, r3, #30
 80024d2:	d500      	bpl.n	80024d6 <HAL_RCC_OscConfig+0x2a>
 80024d4:	e08a      	b.n	80025ec <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024d6:	682b      	ldr	r3, [r5, #0]
 80024d8:	06db      	lsls	r3, r3, #27
 80024da:	d528      	bpl.n	800252e <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024dc:	2e00      	cmp	r6, #0
 80024de:	d000      	beq.n	80024e2 <HAL_RCC_OscConfig+0x36>
 80024e0:	e0e3      	b.n	80026aa <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	059b      	lsls	r3, r3, #22
 80024e6:	d502      	bpl.n	80024ee <HAL_RCC_OscConfig+0x42>
 80024e8:	69eb      	ldr	r3, [r5, #28]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d03d      	beq.n	800256a <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024ee:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f0:	6862      	ldr	r2, [r4, #4]
 80024f2:	49ab      	ldr	r1, [pc, #684]	@ (80027a0 <HAL_RCC_OscConfig+0x2f4>)
 80024f4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80024f6:	400a      	ands	r2, r1
 80024f8:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024fa:	0b5b      	lsrs	r3, r3, #13
 80024fc:	3301      	adds	r3, #1
 80024fe:	023f      	lsls	r7, r7, #8
 8002500:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002502:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002504:	6861      	ldr	r1, [r4, #4]
 8002506:	6a2a      	ldr	r2, [r5, #32]
 8002508:	0209      	lsls	r1, r1, #8
 800250a:	0a09      	lsrs	r1, r1, #8
 800250c:	0612      	lsls	r2, r2, #24
 800250e:	430a      	orrs	r2, r1
 8002510:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002512:	68e1      	ldr	r1, [r4, #12]
 8002514:	48a3      	ldr	r0, [pc, #652]	@ (80027a4 <HAL_RCC_OscConfig+0x2f8>)
 8002516:	060b      	lsls	r3, r1, #24
 8002518:	0f1b      	lsrs	r3, r3, #28
 800251a:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800251c:	4aa2      	ldr	r2, [pc, #648]	@ (80027a8 <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800251e:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 8002520:	4ba2      	ldr	r3, [pc, #648]	@ (80027ac <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002522:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	f7fe ff13 	bl	8001350 <HAL_InitTick>
        if(status != HAL_OK)
 800252a:	2800      	cmp	r0, #0
 800252c:	d134      	bne.n	8002598 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	682b      	ldr	r3, [r5, #0]
 8002530:	071b      	lsls	r3, r3, #28
 8002532:	d500      	bpl.n	8002536 <HAL_RCC_OscConfig+0x8a>
 8002534:	e0f0      	b.n	8002718 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002536:	682b      	ldr	r3, [r5, #0]
 8002538:	075b      	lsls	r3, r3, #29
 800253a:	d500      	bpl.n	800253e <HAL_RCC_OscConfig+0x92>
 800253c:	e112      	b.n	8002764 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800253e:	682b      	ldr	r3, [r5, #0]
 8002540:	069b      	lsls	r3, r3, #26
 8002542:	d500      	bpl.n	8002546 <HAL_RCC_OscConfig+0x9a>
 8002544:	e197      	b.n	8002876 <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002546:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002548:	2b00      	cmp	r3, #0
 800254a:	d000      	beq.n	800254e <HAL_RCC_OscConfig+0xa2>
 800254c:	e1c6      	b.n	80028dc <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 800254e:	2000      	movs	r0, #0
 8002550:	e022      	b.n	8002598 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002552:	2e08      	cmp	r6, #8
 8002554:	d003      	beq.n	800255e <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002556:	2e0c      	cmp	r6, #12
 8002558:	d109      	bne.n	800256e <HAL_RCC_OscConfig+0xc2>
 800255a:	2f00      	cmp	r7, #0
 800255c:	d007      	beq.n	800256e <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255e:	6823      	ldr	r3, [r4, #0]
 8002560:	039b      	lsls	r3, r3, #14
 8002562:	d5b4      	bpl.n	80024ce <HAL_RCC_OscConfig+0x22>
 8002564:	686b      	ldr	r3, [r5, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1b1      	bne.n	80024ce <HAL_RCC_OscConfig+0x22>
    return HAL_ERROR;
 800256a:	2001      	movs	r0, #1
 800256c:	e014      	b.n	8002598 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	686a      	ldr	r2, [r5, #4]
 8002570:	428a      	cmp	r2, r1
 8002572:	d113      	bne.n	800259c <HAL_RCC_OscConfig+0xf0>
 8002574:	6822      	ldr	r2, [r4, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800257a:	f7fe feeb 	bl	8001354 <HAL_GetTick>
 800257e:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002580:	2280      	movs	r2, #128	@ 0x80
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	0292      	lsls	r2, r2, #10
 8002586:	4213      	tst	r3, r2
 8002588:	d1a1      	bne.n	80024ce <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258a:	f7fe fee3 	bl	8001354 <HAL_GetTick>
 800258e:	9b00      	ldr	r3, [sp, #0]
 8002590:	1ac0      	subs	r0, r0, r3
 8002592:	2864      	cmp	r0, #100	@ 0x64
 8002594:	d9f4      	bls.n	8002580 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8002596:	2003      	movs	r0, #3
}
 8002598:	b005      	add	sp, #20
 800259a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	21a0      	movs	r1, #160	@ 0xa0
 800259e:	02c9      	lsls	r1, r1, #11
 80025a0:	428a      	cmp	r2, r1
 80025a2:	d105      	bne.n	80025b0 <HAL_RCC_OscConfig+0x104>
 80025a4:	2280      	movs	r2, #128	@ 0x80
 80025a6:	6821      	ldr	r1, [r4, #0]
 80025a8:	02d2      	lsls	r2, r2, #11
 80025aa:	430a      	orrs	r2, r1
 80025ac:	6022      	str	r2, [r4, #0]
 80025ae:	e7e1      	b.n	8002574 <HAL_RCC_OscConfig+0xc8>
 80025b0:	6821      	ldr	r1, [r4, #0]
 80025b2:	487f      	ldr	r0, [pc, #508]	@ (80027b0 <HAL_RCC_OscConfig+0x304>)
 80025b4:	4001      	ands	r1, r0
 80025b6:	6021      	str	r1, [r4, #0]
 80025b8:	6821      	ldr	r1, [r4, #0]
 80025ba:	400b      	ands	r3, r1
 80025bc:	9303      	str	r3, [sp, #12]
 80025be:	9b03      	ldr	r3, [sp, #12]
 80025c0:	497c      	ldr	r1, [pc, #496]	@ (80027b4 <HAL_RCC_OscConfig+0x308>)
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	400b      	ands	r3, r1
 80025c6:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d1d6      	bne.n	800257a <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 80025cc:	f7fe fec2 	bl	8001354 <HAL_GetTick>
 80025d0:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025d2:	2280      	movs	r2, #128	@ 0x80
 80025d4:	6823      	ldr	r3, [r4, #0]
 80025d6:	0292      	lsls	r2, r2, #10
 80025d8:	4213      	tst	r3, r2
 80025da:	d100      	bne.n	80025de <HAL_RCC_OscConfig+0x132>
 80025dc:	e777      	b.n	80024ce <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025de:	f7fe feb9 	bl	8001354 <HAL_GetTick>
 80025e2:	9b00      	ldr	r3, [sp, #0]
 80025e4:	1ac0      	subs	r0, r0, r3
 80025e6:	2864      	cmp	r0, #100	@ 0x64
 80025e8:	d9f3      	bls.n	80025d2 <HAL_RCC_OscConfig+0x126>
 80025ea:	e7d4      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80025ec:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80025ee:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80025f0:	4213      	tst	r3, r2
 80025f2:	d003      	beq.n	80025fc <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80025f4:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80025f6:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80025f8:	4311      	orrs	r1, r2
 80025fa:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fc:	2e04      	cmp	r6, #4
 80025fe:	d003      	beq.n	8002608 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002600:	2e0c      	cmp	r6, #12
 8002602:	d124      	bne.n	800264e <HAL_RCC_OscConfig+0x1a2>
 8002604:	2f00      	cmp	r7, #0
 8002606:	d122      	bne.n	800264e <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002608:	6822      	ldr	r2, [r4, #0]
 800260a:	0752      	lsls	r2, r2, #29
 800260c:	d501      	bpl.n	8002612 <HAL_RCC_OscConfig+0x166>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ab      	beq.n	800256a <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	6861      	ldr	r1, [r4, #4]
 8002614:	692a      	ldr	r2, [r5, #16]
 8002616:	4868      	ldr	r0, [pc, #416]	@ (80027b8 <HAL_RCC_OscConfig+0x30c>)
 8002618:	0212      	lsls	r2, r2, #8
 800261a:	4001      	ands	r1, r0
 800261c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800261e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002620:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002622:	6822      	ldr	r2, [r4, #0]
 8002624:	438a      	bics	r2, r1
 8002626:	4313      	orrs	r3, r2
 8002628:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800262a:	f7ff fef5 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 800262e:	68e3      	ldr	r3, [r4, #12]
 8002630:	4a5c      	ldr	r2, [pc, #368]	@ (80027a4 <HAL_RCC_OscConfig+0x2f8>)
 8002632:	061b      	lsls	r3, r3, #24
 8002634:	0f1b      	lsrs	r3, r3, #28
 8002636:	5cd3      	ldrb	r3, [r2, r3]
 8002638:	495b      	ldr	r1, [pc, #364]	@ (80027a8 <HAL_RCC_OscConfig+0x2fc>)
 800263a:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 800263c:	4b5b      	ldr	r3, [pc, #364]	@ (80027ac <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800263e:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	f7fe fe85 	bl	8001350 <HAL_InitTick>
      if(status != HAL_OK)
 8002646:	2800      	cmp	r0, #0
 8002648:	d100      	bne.n	800264c <HAL_RCC_OscConfig+0x1a0>
 800264a:	e744      	b.n	80024d6 <HAL_RCC_OscConfig+0x2a>
 800264c:	e7a4      	b.n	8002598 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 800264e:	2b00      	cmp	r3, #0
 8002650:	d019      	beq.n	8002686 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002652:	2109      	movs	r1, #9
 8002654:	6822      	ldr	r2, [r4, #0]
 8002656:	438a      	bics	r2, r1
 8002658:	4313      	orrs	r3, r2
 800265a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800265c:	f7fe fe7a 	bl	8001354 <HAL_GetTick>
 8002660:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002662:	2204      	movs	r2, #4
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	4213      	tst	r3, r2
 8002668:	d007      	beq.n	800267a <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800266a:	6862      	ldr	r2, [r4, #4]
 800266c:	692b      	ldr	r3, [r5, #16]
 800266e:	4952      	ldr	r1, [pc, #328]	@ (80027b8 <HAL_RCC_OscConfig+0x30c>)
 8002670:	021b      	lsls	r3, r3, #8
 8002672:	400a      	ands	r2, r1
 8002674:	4313      	orrs	r3, r2
 8002676:	6063      	str	r3, [r4, #4]
 8002678:	e72d      	b.n	80024d6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267a:	f7fe fe6b 	bl	8001354 <HAL_GetTick>
 800267e:	1bc0      	subs	r0, r0, r7
 8002680:	2802      	cmp	r0, #2
 8002682:	d9ee      	bls.n	8002662 <HAL_RCC_OscConfig+0x1b6>
 8002684:	e787      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8002686:	2201      	movs	r2, #1
 8002688:	6823      	ldr	r3, [r4, #0]
 800268a:	4393      	bics	r3, r2
 800268c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800268e:	f7fe fe61 	bl	8001354 <HAL_GetTick>
 8002692:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002694:	2204      	movs	r2, #4
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	4213      	tst	r3, r2
 800269a:	d100      	bne.n	800269e <HAL_RCC_OscConfig+0x1f2>
 800269c:	e71b      	b.n	80024d6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800269e:	f7fe fe59 	bl	8001354 <HAL_GetTick>
 80026a2:	1bc0      	subs	r0, r0, r7
 80026a4:	2802      	cmp	r0, #2
 80026a6:	d9f5      	bls.n	8002694 <HAL_RCC_OscConfig+0x1e8>
 80026a8:	e775      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026aa:	69eb      	ldr	r3, [r5, #28]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 80026b0:	2380      	movs	r3, #128	@ 0x80
 80026b2:	6822      	ldr	r2, [r4, #0]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4313      	orrs	r3, r2
 80026b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80026ba:	f7fe fe4b 	bl	8001354 <HAL_GetTick>
 80026be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80026c0:	2280      	movs	r2, #128	@ 0x80
 80026c2:	6823      	ldr	r3, [r4, #0]
 80026c4:	0092      	lsls	r2, r2, #2
 80026c6:	4213      	tst	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ca:	6863      	ldr	r3, [r4, #4]
 80026cc:	4a34      	ldr	r2, [pc, #208]	@ (80027a0 <HAL_RCC_OscConfig+0x2f4>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 80026d2:	4313      	orrs	r3, r2
 80026d4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026d6:	6862      	ldr	r2, [r4, #4]
 80026d8:	6a2b      	ldr	r3, [r5, #32]
 80026da:	0212      	lsls	r2, r2, #8
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	0a12      	lsrs	r2, r2, #8
 80026e0:	4313      	orrs	r3, r2
 80026e2:	6063      	str	r3, [r4, #4]
 80026e4:	e723      	b.n	800252e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e6:	f7fe fe35 	bl	8001354 <HAL_GetTick>
 80026ea:	1bc0      	subs	r0, r0, r7
 80026ec:	2802      	cmp	r0, #2
 80026ee:	d9e7      	bls.n	80026c0 <HAL_RCC_OscConfig+0x214>
 80026f0:	e751      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <HAL_RCC_OscConfig+0x310>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80026fa:	f7fe fe2b 	bl	8001354 <HAL_GetTick>
 80026fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002700:	2280      	movs	r2, #128	@ 0x80
 8002702:	6823      	ldr	r3, [r4, #0]
 8002704:	0092      	lsls	r2, r2, #2
 8002706:	4213      	tst	r3, r2
 8002708:	d100      	bne.n	800270c <HAL_RCC_OscConfig+0x260>
 800270a:	e710      	b.n	800252e <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800270c:	f7fe fe22 	bl	8001354 <HAL_GetTick>
 8002710:	1bc0      	subs	r0, r0, r7
 8002712:	2802      	cmp	r0, #2
 8002714:	d9f4      	bls.n	8002700 <HAL_RCC_OscConfig+0x254>
 8002716:	e73e      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002718:	696a      	ldr	r2, [r5, #20]
 800271a:	2301      	movs	r3, #1
 800271c:	2a00      	cmp	r2, #0
 800271e:	d010      	beq.n	8002742 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8002720:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002722:	4313      	orrs	r3, r2
 8002724:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8002726:	f7fe fe15 	bl	8001354 <HAL_GetTick>
 800272a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800272c:	2202      	movs	r2, #2
 800272e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002730:	4213      	tst	r3, r2
 8002732:	d000      	beq.n	8002736 <HAL_RCC_OscConfig+0x28a>
 8002734:	e6ff      	b.n	8002536 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002736:	f7fe fe0d 	bl	8001354 <HAL_GetTick>
 800273a:	1bc0      	subs	r0, r0, r7
 800273c:	2802      	cmp	r0, #2
 800273e:	d9f5      	bls.n	800272c <HAL_RCC_OscConfig+0x280>
 8002740:	e729      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 8002742:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002744:	439a      	bics	r2, r3
 8002746:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8002748:	f7fe fe04 	bl	8001354 <HAL_GetTick>
 800274c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800274e:	2202      	movs	r2, #2
 8002750:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002752:	4213      	tst	r3, r2
 8002754:	d100      	bne.n	8002758 <HAL_RCC_OscConfig+0x2ac>
 8002756:	e6ee      	b.n	8002536 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7fe fdfc 	bl	8001354 <HAL_GetTick>
 800275c:	1bc0      	subs	r0, r0, r7
 800275e:	2802      	cmp	r0, #2
 8002760:	d9f5      	bls.n	800274e <HAL_RCC_OscConfig+0x2a2>
 8002762:	e718      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002764:	2380      	movs	r3, #128	@ 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002768:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800276a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 800276c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	421a      	tst	r2, r3
 8002770:	d104      	bne.n	800277c <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002772:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002774:	4313      	orrs	r3, r2
 8002776:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8002778:	2301      	movs	r3, #1
 800277a:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	2280      	movs	r2, #128	@ 0x80
 800277e:	4f10      	ldr	r7, [pc, #64]	@ (80027c0 <HAL_RCC_OscConfig+0x314>)
 8002780:	0052      	lsls	r2, r2, #1
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	4213      	tst	r3, r2
 8002786:	d01d      	beq.n	80027c4 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	2280      	movs	r2, #128	@ 0x80
 800278a:	68ab      	ldr	r3, [r5, #8]
 800278c:	0052      	lsls	r2, r2, #1
 800278e:	4293      	cmp	r3, r2
 8002790:	d12c      	bne.n	80027ec <HAL_RCC_OscConfig+0x340>
 8002792:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002794:	4313      	orrs	r3, r2
 8002796:	6523      	str	r3, [r4, #80]	@ 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002798:	e04d      	b.n	8002836 <HAL_RCC_OscConfig+0x38a>
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	40021000 	.word	0x40021000
 80027a0:	ffff1fff 	.word	0xffff1fff
 80027a4:	080064a9 	.word	0x080064a9
 80027a8:	20000018 	.word	0x20000018
 80027ac:	20000020 	.word	0x20000020
 80027b0:	fffeffff 	.word	0xfffeffff
 80027b4:	fffbffff 	.word	0xfffbffff
 80027b8:	ffffe0ff 	.word	0xffffe0ff
 80027bc:	fffffeff 	.word	0xfffffeff
 80027c0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c4:	2280      	movs	r2, #128	@ 0x80
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	0052      	lsls	r2, r2, #1
 80027ca:	4313      	orrs	r3, r2
 80027cc:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80027ce:	f7fe fdc1 	bl	8001354 <HAL_GetTick>
 80027d2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d4:	2280      	movs	r2, #128	@ 0x80
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	0052      	lsls	r2, r2, #1
 80027da:	4213      	tst	r3, r2
 80027dc:	d1d4      	bne.n	8002788 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027de:	f7fe fdb9 	bl	8001354 <HAL_GetTick>
 80027e2:	9b01      	ldr	r3, [sp, #4]
 80027e4:	1ac0      	subs	r0, r0, r3
 80027e6:	2864      	cmp	r0, #100	@ 0x64
 80027e8:	d9f4      	bls.n	80027d4 <HAL_RCC_OscConfig+0x328>
 80027ea:	e6d4      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d116      	bne.n	800281e <HAL_RCC_OscConfig+0x372>
 80027f0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80027f2:	4a6b      	ldr	r2, [pc, #428]	@ (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 80027f4:	4013      	ands	r3, r2
 80027f6:	6523      	str	r3, [r4, #80]	@ 0x50
 80027f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80027fa:	4a6a      	ldr	r2, [pc, #424]	@ (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	6523      	str	r3, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8002800:	f7fe fda8 	bl	8001354 <HAL_GetTick>
 8002804:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002806:	2280      	movs	r2, #128	@ 0x80
 8002808:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4213      	tst	r3, r2
 800280e:	d01a      	beq.n	8002846 <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7fe fda0 	bl	8001354 <HAL_GetTick>
 8002814:	4b64      	ldr	r3, [pc, #400]	@ (80029a8 <HAL_RCC_OscConfig+0x4fc>)
 8002816:	1bc0      	subs	r0, r0, r7
 8002818:	4298      	cmp	r0, r3
 800281a:	d9f4      	bls.n	8002806 <HAL_RCC_OscConfig+0x35a>
 800281c:	e6bb      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281e:	21a0      	movs	r1, #160	@ 0xa0
 8002820:	00c9      	lsls	r1, r1, #3
 8002822:	428b      	cmp	r3, r1
 8002824:	d118      	bne.n	8002858 <HAL_RCC_OscConfig+0x3ac>
 8002826:	2380      	movs	r3, #128	@ 0x80
 8002828:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	430b      	orrs	r3, r1
 800282e:	6523      	str	r3, [r4, #80]	@ 0x50
 8002830:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002832:	431a      	orrs	r2, r3
 8002834:	6522      	str	r2, [r4, #80]	@ 0x50
      tickstart = HAL_GetTick();
 8002836:	f7fe fd8d 	bl	8001354 <HAL_GetTick>
 800283a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283c:	2280      	movs	r2, #128	@ 0x80
 800283e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	4213      	tst	r3, r2
 8002844:	d010      	beq.n	8002868 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 8002846:	9b00      	ldr	r3, [sp, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d000      	beq.n	800284e <HAL_RCC_OscConfig+0x3a2>
 800284c:	e677      	b.n	800253e <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002850:	4a56      	ldr	r2, [pc, #344]	@ (80029ac <HAL_RCC_OscConfig+0x500>)
 8002852:	4013      	ands	r3, r2
 8002854:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002856:	e672      	b.n	800253e <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002858:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800285a:	4a51      	ldr	r2, [pc, #324]	@ (80029a0 <HAL_RCC_OscConfig+0x4f4>)
 800285c:	4013      	ands	r3, r2
 800285e:	6523      	str	r3, [r4, #80]	@ 0x50
 8002860:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002862:	4a50      	ldr	r2, [pc, #320]	@ (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	4013      	ands	r3, r2
 8002866:	e796      	b.n	8002796 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002868:	f7fe fd74 	bl	8001354 <HAL_GetTick>
 800286c:	4b4e      	ldr	r3, [pc, #312]	@ (80029a8 <HAL_RCC_OscConfig+0x4fc>)
 800286e:	1bc0      	subs	r0, r0, r7
 8002870:	4298      	cmp	r0, r3
 8002872:	d9e3      	bls.n	800283c <HAL_RCC_OscConfig+0x390>
 8002874:	e68f      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002876:	69aa      	ldr	r2, [r5, #24]
 8002878:	2101      	movs	r1, #1
 800287a:	4b4d      	ldr	r3, [pc, #308]	@ (80029b0 <HAL_RCC_OscConfig+0x504>)
 800287c:	2a00      	cmp	r2, #0
 800287e:	d018      	beq.n	80028b2 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 8002880:	68a2      	ldr	r2, [r4, #8]
 8002882:	430a      	orrs	r2, r1
 8002884:	60a2      	str	r2, [r4, #8]
 8002886:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8002888:	430a      	orrs	r2, r1
 800288a:	6362      	str	r2, [r4, #52]	@ 0x34
 800288c:	2280      	movs	r2, #128	@ 0x80
 800288e:	6a19      	ldr	r1, [r3, #32]
 8002890:	0192      	lsls	r2, r2, #6
 8002892:	430a      	orrs	r2, r1
 8002894:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8002896:	f7fe fd5d 	bl	8001354 <HAL_GetTick>
 800289a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800289c:	2202      	movs	r2, #2
 800289e:	68a3      	ldr	r3, [r4, #8]
 80028a0:	4213      	tst	r3, r2
 80028a2:	d000      	beq.n	80028a6 <HAL_RCC_OscConfig+0x3fa>
 80028a4:	e64f      	b.n	8002546 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a6:	f7fe fd55 	bl	8001354 <HAL_GetTick>
 80028aa:	1bc0      	subs	r0, r0, r7
 80028ac:	2802      	cmp	r0, #2
 80028ae:	d9f5      	bls.n	800289c <HAL_RCC_OscConfig+0x3f0>
 80028b0:	e671      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 80028b2:	68a2      	ldr	r2, [r4, #8]
 80028b4:	438a      	bics	r2, r1
 80028b6:	60a2      	str	r2, [r4, #8]
 80028b8:	6a1a      	ldr	r2, [r3, #32]
 80028ba:	493e      	ldr	r1, [pc, #248]	@ (80029b4 <HAL_RCC_OscConfig+0x508>)
 80028bc:	400a      	ands	r2, r1
 80028be:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80028c0:	f7fe fd48 	bl	8001354 <HAL_GetTick>
 80028c4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c6:	2202      	movs	r2, #2
 80028c8:	68a3      	ldr	r3, [r4, #8]
 80028ca:	4213      	tst	r3, r2
 80028cc:	d100      	bne.n	80028d0 <HAL_RCC_OscConfig+0x424>
 80028ce:	e63a      	b.n	8002546 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028d0:	f7fe fd40 	bl	8001354 <HAL_GetTick>
 80028d4:	1bc0      	subs	r0, r0, r7
 80028d6:	2802      	cmp	r0, #2
 80028d8:	d9f5      	bls.n	80028c6 <HAL_RCC_OscConfig+0x41a>
 80028da:	e65c      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028dc:	2e0c      	cmp	r6, #12
 80028de:	d043      	beq.n	8002968 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e0:	4a35      	ldr	r2, [pc, #212]	@ (80029b8 <HAL_RCC_OscConfig+0x50c>)
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d12e      	bne.n	8002944 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 80028e6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028e8:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 80028ea:	4013      	ands	r3, r2
 80028ec:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80028ee:	f7fe fd31 	bl	8001354 <HAL_GetTick>
 80028f2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028f4:	04bf      	lsls	r7, r7, #18
 80028f6:	6823      	ldr	r3, [r4, #0]
 80028f8:	423b      	tst	r3, r7
 80028fa:	d11d      	bne.n	8002938 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fc:	6b29      	ldr	r1, [r5, #48]	@ 0x30
 80028fe:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002900:	68e2      	ldr	r2, [r4, #12]
 8002902:	430b      	orrs	r3, r1
 8002904:	492d      	ldr	r1, [pc, #180]	@ (80029bc <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002906:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002908:	400a      	ands	r2, r1
 800290a:	4313      	orrs	r3, r2
 800290c:	6b6a      	ldr	r2, [r5, #52]	@ 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800290e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002910:	4313      	orrs	r3, r2
 8002912:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002914:	2380      	movs	r3, #128	@ 0x80
 8002916:	6822      	ldr	r2, [r4, #0]
 8002918:	045b      	lsls	r3, r3, #17
 800291a:	4313      	orrs	r3, r2
 800291c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800291e:	f7fe fd19 	bl	8001354 <HAL_GetTick>
 8002922:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	4233      	tst	r3, r6
 8002928:	d000      	beq.n	800292c <HAL_RCC_OscConfig+0x480>
 800292a:	e610      	b.n	800254e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fd12 	bl	8001354 <HAL_GetTick>
 8002930:	1b40      	subs	r0, r0, r5
 8002932:	2802      	cmp	r0, #2
 8002934:	d9f6      	bls.n	8002924 <HAL_RCC_OscConfig+0x478>
 8002936:	e62e      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002938:	f7fe fd0c 	bl	8001354 <HAL_GetTick>
 800293c:	1b80      	subs	r0, r0, r6
 800293e:	2802      	cmp	r0, #2
 8002940:	d9d9      	bls.n	80028f6 <HAL_RCC_OscConfig+0x44a>
 8002942:	e628      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 8002944:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002946:	2680      	movs	r6, #128	@ 0x80
        __HAL_RCC_PLL_DISABLE();
 8002948:	4013      	ands	r3, r2
 800294a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800294c:	f7fe fd02 	bl	8001354 <HAL_GetTick>
 8002950:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002952:	04b6      	lsls	r6, r6, #18
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	4233      	tst	r3, r6
 8002958:	d100      	bne.n	800295c <HAL_RCC_OscConfig+0x4b0>
 800295a:	e5f8      	b.n	800254e <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295c:	f7fe fcfa 	bl	8001354 <HAL_GetTick>
 8002960:	1b40      	subs	r0, r0, r5
 8002962:	2802      	cmp	r0, #2
 8002964:	d9f6      	bls.n	8002954 <HAL_RCC_OscConfig+0x4a8>
 8002966:	e616      	b.n	8002596 <HAL_RCC_OscConfig+0xea>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002968:	2b01      	cmp	r3, #1
 800296a:	d100      	bne.n	800296e <HAL_RCC_OscConfig+0x4c2>
 800296c:	e5fd      	b.n	800256a <HAL_RCC_OscConfig+0xbe>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	2380      	movs	r3, #128	@ 0x80
        pll_config = RCC->CFGR;
 8002970:	68e0      	ldr	r0, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	6aea      	ldr	r2, [r5, #44]	@ 0x2c
 8002974:	025b      	lsls	r3, r3, #9
 8002976:	4003      	ands	r3, r0
 8002978:	4293      	cmp	r3, r2
 800297a:	d000      	beq.n	800297e <HAL_RCC_OscConfig+0x4d2>
 800297c:	e5f5      	b.n	800256a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800297e:	23f0      	movs	r3, #240	@ 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002980:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002982:	039b      	lsls	r3, r3, #14
 8002984:	4003      	ands	r3, r0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002986:	4293      	cmp	r3, r2
 8002988:	d000      	beq.n	800298c <HAL_RCC_OscConfig+0x4e0>
 800298a:	e5ee      	b.n	800256a <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800298c:	23c0      	movs	r3, #192	@ 0xc0
 800298e:	041b      	lsls	r3, r3, #16
 8002990:	4018      	ands	r0, r3
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002992:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002994:	1ac0      	subs	r0, r0, r3
 8002996:	1e43      	subs	r3, r0, #1
 8002998:	4198      	sbcs	r0, r3
 800299a:	b2c0      	uxtb	r0, r0
 800299c:	e5fc      	b.n	8002598 <HAL_RCC_OscConfig+0xec>
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	fffffeff 	.word	0xfffffeff
 80029a4:	fffffbff 	.word	0xfffffbff
 80029a8:	00001388 	.word	0x00001388
 80029ac:	efffffff 	.word	0xefffffff
 80029b0:	40010000 	.word	0x40010000
 80029b4:	ffffdfff 	.word	0xffffdfff
 80029b8:	feffffff 	.word	0xfeffffff
 80029bc:	ff02ffff 	.word	0xff02ffff

080029c0 <HAL_RCC_ClockConfig>:
{
 80029c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029c2:	1e04      	subs	r4, r0, #0
 80029c4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80029c6:	d101      	bne.n	80029cc <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80029c8:	2001      	movs	r0, #1
}
 80029ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029cc:	2501      	movs	r5, #1
 80029ce:	4e5b      	ldr	r6, [pc, #364]	@ (8002b3c <HAL_RCC_ClockConfig+0x17c>)
 80029d0:	9a01      	ldr	r2, [sp, #4]
 80029d2:	6833      	ldr	r3, [r6, #0]
 80029d4:	402b      	ands	r3, r5
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d331      	bcc.n	8002a3e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029da:	6822      	ldr	r2, [r4, #0]
 80029dc:	0793      	lsls	r3, r2, #30
 80029de:	d443      	bmi.n	8002a68 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e0:	07d2      	lsls	r2, r2, #31
 80029e2:	d449      	bmi.n	8002a78 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	2501      	movs	r5, #1
 80029e6:	6833      	ldr	r3, [r6, #0]
 80029e8:	9a01      	ldr	r2, [sp, #4]
 80029ea:	402b      	ands	r3, r5
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d909      	bls.n	8002a04 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f0:	6833      	ldr	r3, [r6, #0]
 80029f2:	43ab      	bics	r3, r5
 80029f4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80029f6:	f7fe fcad 	bl	8001354 <HAL_GetTick>
 80029fa:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fc:	6833      	ldr	r3, [r6, #0]
 80029fe:	422b      	tst	r3, r5
 8002a00:	d000      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x44>
 8002a02:	e08c      	b.n	8002b1e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a04:	6822      	ldr	r2, [r4, #0]
 8002a06:	4d4e      	ldr	r5, [pc, #312]	@ (8002b40 <HAL_RCC_ClockConfig+0x180>)
 8002a08:	0753      	lsls	r3, r2, #29
 8002a0a:	d500      	bpl.n	8002a0e <HAL_RCC_ClockConfig+0x4e>
 8002a0c:	e08f      	b.n	8002b2e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0e:	0712      	lsls	r2, r2, #28
 8002a10:	d506      	bpl.n	8002a20 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a12:	68ea      	ldr	r2, [r5, #12]
 8002a14:	6923      	ldr	r3, [r4, #16]
 8002a16:	494b      	ldr	r1, [pc, #300]	@ (8002b44 <HAL_RCC_ClockConfig+0x184>)
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a20:	f7ff fcfa 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8002a24:	68eb      	ldr	r3, [r5, #12]
 8002a26:	4a48      	ldr	r2, [pc, #288]	@ (8002b48 <HAL_RCC_ClockConfig+0x188>)
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	0f1b      	lsrs	r3, r3, #28
 8002a2c:	5cd3      	ldrb	r3, [r2, r3]
 8002a2e:	4947      	ldr	r1, [pc, #284]	@ (8002b4c <HAL_RCC_ClockConfig+0x18c>)
 8002a30:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 8002a32:	4b47      	ldr	r3, [pc, #284]	@ (8002b50 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a34:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	f7fe fc8a 	bl	8001350 <HAL_InitTick>
  if(status != HAL_OK)
 8002a3c:	e7c5      	b.n	80029ca <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3e:	6833      	ldr	r3, [r6, #0]
 8002a40:	9a01      	ldr	r2, [sp, #4]
 8002a42:	43ab      	bics	r3, r5
 8002a44:	4313      	orrs	r3, r2
 8002a46:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002a48:	f7fe fc84 	bl	8001354 <HAL_GetTick>
 8002a4c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	6833      	ldr	r3, [r6, #0]
 8002a50:	9a01      	ldr	r2, [sp, #4]
 8002a52:	402b      	ands	r3, r5
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d0c0      	beq.n	80029da <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe fc7c 	bl	8001354 <HAL_GetTick>
 8002a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b54 <HAL_RCC_ClockConfig+0x194>)
 8002a5e:	1bc0      	subs	r0, r0, r7
 8002a60:	4298      	cmp	r0, r3
 8002a62:	d9f4      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002a64:	2003      	movs	r0, #3
 8002a66:	e7b0      	b.n	80029ca <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	20f0      	movs	r0, #240	@ 0xf0
 8002a6a:	4935      	ldr	r1, [pc, #212]	@ (8002b40 <HAL_RCC_ClockConfig+0x180>)
 8002a6c:	68cb      	ldr	r3, [r1, #12]
 8002a6e:	4383      	bics	r3, r0
 8002a70:	68a0      	ldr	r0, [r4, #8]
 8002a72:	4303      	orrs	r3, r0
 8002a74:	60cb      	str	r3, [r1, #12]
 8002a76:	e7b3      	b.n	80029e0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a78:	4d31      	ldr	r5, [pc, #196]	@ (8002b40 <HAL_RCC_ClockConfig+0x180>)
 8002a7a:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a7c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7e:	2a02      	cmp	r2, #2
 8002a80:	d118      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a82:	039b      	lsls	r3, r3, #14
 8002a84:	d5a0      	bpl.n	80029c8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	2103      	movs	r1, #3
 8002a88:	68eb      	ldr	r3, [r5, #12]
 8002a8a:	438b      	bics	r3, r1
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8002a90:	f7fe fc60 	bl	8001354 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a94:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002a96:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d118      	bne.n	8002ace <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a9c:	220c      	movs	r2, #12
 8002a9e:	68eb      	ldr	r3, [r5, #12]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b08      	cmp	r3, #8
 8002aa4:	d09e      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa6:	f7fe fc55 	bl	8001354 <HAL_GetTick>
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8002b54 <HAL_RCC_ClockConfig+0x194>)
 8002aac:	1bc0      	subs	r0, r0, r7
 8002aae:	4298      	cmp	r0, r3
 8002ab0:	d9f4      	bls.n	8002a9c <HAL_RCC_ClockConfig+0xdc>
 8002ab2:	e7d7      	b.n	8002a64 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab4:	2a03      	cmp	r2, #3
 8002ab6:	d102      	bne.n	8002abe <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ab8:	019b      	lsls	r3, r3, #6
 8002aba:	d4e4      	bmi.n	8002a86 <HAL_RCC_ClockConfig+0xc6>
 8002abc:	e784      	b.n	80029c8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002abe:	2a01      	cmp	r2, #1
 8002ac0:	d102      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ac2:	075b      	lsls	r3, r3, #29
 8002ac4:	d4df      	bmi.n	8002a86 <HAL_RCC_ClockConfig+0xc6>
 8002ac6:	e77f      	b.n	80029c8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ac8:	059b      	lsls	r3, r3, #22
 8002aca:	d4dc      	bmi.n	8002a86 <HAL_RCC_ClockConfig+0xc6>
 8002acc:	e77c      	b.n	80029c8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d10b      	bne.n	8002aea <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ad2:	220c      	movs	r2, #12
 8002ad4:	68eb      	ldr	r3, [r5, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d083      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002adc:	f7fe fc3a 	bl	8001354 <HAL_GetTick>
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b54 <HAL_RCC_ClockConfig+0x194>)
 8002ae2:	1bc0      	subs	r0, r0, r7
 8002ae4:	4298      	cmp	r0, r3
 8002ae6:	d9f4      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x112>
 8002ae8:	e7bc      	b.n	8002a64 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d011      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002aee:	220c      	movs	r2, #12
 8002af0:	68eb      	ldr	r3, [r5, #12]
 8002af2:	4213      	tst	r3, r2
 8002af4:	d100      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x138>
 8002af6:	e775      	b.n	80029e4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af8:	f7fe fc2c 	bl	8001354 <HAL_GetTick>
 8002afc:	4b15      	ldr	r3, [pc, #84]	@ (8002b54 <HAL_RCC_ClockConfig+0x194>)
 8002afe:	1bc0      	subs	r0, r0, r7
 8002b00:	4298      	cmp	r0, r3
 8002b02:	d9f4      	bls.n	8002aee <HAL_RCC_ClockConfig+0x12e>
 8002b04:	e7ae      	b.n	8002a64 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b06:	f7fe fc25 	bl	8001354 <HAL_GetTick>
 8002b0a:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <HAL_RCC_ClockConfig+0x194>)
 8002b0c:	1bc0      	subs	r0, r0, r7
 8002b0e:	4298      	cmp	r0, r3
 8002b10:	d8a8      	bhi.n	8002a64 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b12:	220c      	movs	r2, #12
 8002b14:	68eb      	ldr	r3, [r5, #12]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d1f4      	bne.n	8002b06 <HAL_RCC_ClockConfig+0x146>
 8002b1c:	e762      	b.n	80029e4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1e:	f7fe fc19 	bl	8001354 <HAL_GetTick>
 8002b22:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <HAL_RCC_ClockConfig+0x194>)
 8002b24:	1bc0      	subs	r0, r0, r7
 8002b26:	4298      	cmp	r0, r3
 8002b28:	d800      	bhi.n	8002b2c <HAL_RCC_ClockConfig+0x16c>
 8002b2a:	e767      	b.n	80029fc <HAL_RCC_ClockConfig+0x3c>
 8002b2c:	e79a      	b.n	8002a64 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b2e:	68eb      	ldr	r3, [r5, #12]
 8002b30:	4909      	ldr	r1, [pc, #36]	@ (8002b58 <HAL_RCC_ClockConfig+0x198>)
 8002b32:	400b      	ands	r3, r1
 8002b34:	68e1      	ldr	r1, [r4, #12]
 8002b36:	430b      	orrs	r3, r1
 8002b38:	60eb      	str	r3, [r5, #12]
 8002b3a:	e768      	b.n	8002a0e <HAL_RCC_ClockConfig+0x4e>
 8002b3c:	40022000 	.word	0x40022000
 8002b40:	40021000 	.word	0x40021000
 8002b44:	ffffc7ff 	.word	0xffffc7ff
 8002b48:	080064a9 	.word	0x080064a9
 8002b4c:	20000018 	.word	0x20000018
 8002b50:	20000020 	.word	0x20000020
 8002b54:	00001388 	.word	0x00001388
 8002b58:	fffff8ff 	.word	0xfffff8ff

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b5c:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002b5e:	4a05      	ldr	r2, [pc, #20]	@ (8002b74 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4905      	ldr	r1, [pc, #20]	@ (8002b78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b64:	055b      	lsls	r3, r3, #21
 8002b66:	0f5b      	lsrs	r3, r3, #29
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	6810      	ldr	r0, [r2, #0]
 8002b6c:	40d8      	lsrs	r0, r3
}
 8002b6e:	4770      	bx	lr
 8002b70:	40021000 	.word	0x40021000
 8002b74:	20000018 	.word	0x20000018
 8002b78:	080064b9 	.word	0x080064b9

08002b7c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b7c:	4b04      	ldr	r3, [pc, #16]	@ (8002b90 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002b7e:	4a05      	ldr	r2, [pc, #20]	@ (8002b94 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	4905      	ldr	r1, [pc, #20]	@ (8002b98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b84:	049b      	lsls	r3, r3, #18
 8002b86:	0f5b      	lsrs	r3, r3, #29
 8002b88:	5ccb      	ldrb	r3, [r1, r3]
 8002b8a:	6810      	ldr	r0, [r2, #0]
 8002b8c:	40d8      	lsrs	r0, r3
}
 8002b8e:	4770      	bx	lr
 8002b90:	40021000 	.word	0x40021000
 8002b94:	20000018 	.word	0x20000018
 8002b98:	080064b9 	.word	0x080064b9

08002b9c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b9c:	6803      	ldr	r3, [r0, #0]
{
 8002b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ba0:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ba2:	069b      	lsls	r3, r3, #26
 8002ba4:	d53c      	bpl.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x84>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ba6:	2380      	movs	r3, #128	@ 0x80
  FlagStatus       pwrclkchanged = RESET;
 8002ba8:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002baa:	4c5f      	ldr	r4, [pc, #380]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002bac:	055b      	lsls	r3, r3, #21
 8002bae:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
  FlagStatus       pwrclkchanged = RESET;
 8002bb0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bb2:	421a      	tst	r2, r3
 8002bb4:	d104      	bne.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	63a3      	str	r3, [r4, #56]	@ 0x38
      pwrclkchanged = SET;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	2780      	movs	r7, #128	@ 0x80
 8002bc2:	4e5a      	ldr	r6, [pc, #360]	@ (8002d2c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002bc4:	007f      	lsls	r7, r7, #1
 8002bc6:	6833      	ldr	r3, [r6, #0]
 8002bc8:	423b      	tst	r3, r7
 8002bca:	d064      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002bcc:	6868      	ldr	r0, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002bce:	6822      	ldr	r2, [r4, #0]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002bd0:	0001      	movs	r1, r0
 8002bd2:	23c0      	movs	r3, #192	@ 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002bd4:	4042      	eors	r2, r0
 8002bd6:	20c0      	movs	r0, #192	@ 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002bd8:	029b      	lsls	r3, r3, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002bda:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002bdc:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002bde:	4202      	tst	r2, r0
 8002be0:	d16a      	bne.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002be2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8002be4:	0010      	movs	r0, r2
 8002be6:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002be8:	421a      	tst	r2, r3
 8002bea:	d000      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bec:	e06d      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x12e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bee:	6869      	ldr	r1, [r5, #4]
 8002bf0:	23c0      	movs	r3, #192	@ 0xc0
 8002bf2:	000a      	movs	r2, r1
 8002bf4:	029b      	lsls	r3, r3, #10
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d107      	bne.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	484c      	ldr	r0, [pc, #304]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002c00:	4003      	ands	r3, r0
 8002c02:	20c0      	movs	r0, #192	@ 0xc0
 8002c04:	0380      	lsls	r0, r0, #14
 8002c06:	4001      	ands	r1, r0
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	6023      	str	r3, [r4, #0]
 8002c0c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002c0e:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c10:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c12:	6522      	str	r2, [r4, #80]	@ 0x50
    if(pwrclkchanged == SET)
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d103      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c18:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002c1a:	4a46      	ldr	r2, [pc, #280]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c20:	682b      	ldr	r3, [r5, #0]
 8002c22:	07da      	lsls	r2, r3, #31
 8002c24:	d506      	bpl.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c26:	2003      	movs	r0, #3
 8002c28:	493f      	ldr	r1, [pc, #252]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002c2a:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002c2c:	4382      	bics	r2, r0
 8002c2e:	68a8      	ldr	r0, [r5, #8]
 8002c30:	4302      	orrs	r2, r0
 8002c32:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c34:	079a      	lsls	r2, r3, #30
 8002c36:	d506      	bpl.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c38:	200c      	movs	r0, #12
 8002c3a:	493b      	ldr	r1, [pc, #236]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002c3c:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002c3e:	4382      	bics	r2, r0
 8002c40:	68e8      	ldr	r0, [r5, #12]
 8002c42:	4302      	orrs	r2, r0
 8002c44:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c46:	075a      	lsls	r2, r3, #29
 8002c48:	d506      	bpl.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c4a:	4937      	ldr	r1, [pc, #220]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002c4c:	483a      	ldr	r0, [pc, #232]	@ (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002c4e:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002c50:	4002      	ands	r2, r0
 8002c52:	6928      	ldr	r0, [r5, #16]
 8002c54:	4302      	orrs	r2, r0
 8002c56:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c58:	071a      	lsls	r2, r3, #28
 8002c5a:	d506      	bpl.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c5c:	4932      	ldr	r1, [pc, #200]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002c5e:	4837      	ldr	r0, [pc, #220]	@ (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002c60:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002c62:	4002      	ands	r2, r0
 8002c64:	6968      	ldr	r0, [r5, #20]
 8002c66:	4302      	orrs	r2, r0
 8002c68:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c6a:	05da      	lsls	r2, r3, #23
 8002c6c:	d506      	bpl.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c6e:	492e      	ldr	r1, [pc, #184]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002c70:	4833      	ldr	r0, [pc, #204]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002c72:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002c74:	4002      	ands	r2, r0
 8002c76:	69a8      	ldr	r0, [r5, #24]
 8002c78:	4302      	orrs	r2, r0
 8002c7a:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c7c:	065a      	lsls	r2, r3, #25
 8002c7e:	d506      	bpl.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c80:	4929      	ldr	r1, [pc, #164]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002c82:	4830      	ldr	r0, [pc, #192]	@ (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002c84:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8002c86:	4002      	ands	r2, r0
 8002c88:	6a28      	ldr	r0, [r5, #32]
 8002c8a:	4302      	orrs	r2, r0
 8002c8c:	64ca      	str	r2, [r1, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c8e:	061b      	lsls	r3, r3, #24
 8002c90:	d442      	bmi.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002c92:	2000      	movs	r0, #0
 8002c94:	e00f      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	6833      	ldr	r3, [r6, #0]
 8002c98:	433b      	orrs	r3, r7
 8002c9a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002c9c:	f7fe fb5a 	bl	8001354 <HAL_GetTick>
 8002ca0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	6833      	ldr	r3, [r6, #0]
 8002ca4:	423b      	tst	r3, r7
 8002ca6:	d191      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca8:	f7fe fb54 	bl	8001354 <HAL_GetTick>
 8002cac:	9b01      	ldr	r3, [sp, #4]
 8002cae:	1ac0      	subs	r0, r0, r3
 8002cb0:	2864      	cmp	r0, #100	@ 0x64
 8002cb2:	d9f6      	bls.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x106>
          return HAL_TIMEOUT;
 8002cb4:	2003      	movs	r0, #3
}
 8002cb6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002cb8:	4299      	cmp	r1, r3
 8002cba:	d000      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002cbc:	e791      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x46>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002cbe:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8002cc0:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002cc2:	0392      	lsls	r2, r2, #14
 8002cc4:	d400      	bmi.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002cc6:	e78c      	b.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x46>
 8002cc8:	e7f5      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002cca:	4288      	cmp	r0, r1
 8002ccc:	d100      	bne.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8002cce:	e78e      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x52>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	069b      	lsls	r3, r3, #26
 8002cd4:	d400      	bmi.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002cd6:	e78a      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cd8:	2180      	movs	r1, #128	@ 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002cda:	6d23      	ldr	r3, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cdc:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002cde:	0309      	lsls	r1, r1, #12
 8002ce0:	4301      	orrs	r1, r0
 8002ce2:	6521      	str	r1, [r4, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce4:	6d21      	ldr	r1, [r4, #80]	@ 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002ce6:	4a16      	ldr	r2, [pc, #88]	@ (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ce8:	4817      	ldr	r0, [pc, #92]	@ (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002cea:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cec:	4001      	ands	r1, r0
 8002cee:	6521      	str	r1, [r4, #80]	@ 0x50
      RCC->CSR = temp_reg;
 8002cf0:	6522      	str	r2, [r4, #80]	@ 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002cf2:	05db      	lsls	r3, r3, #23
 8002cf4:	d400      	bmi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002cf6:	e77a      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x52>
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fb2c 	bl	8001354 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cfc:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002cfe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d00:	00bf      	lsls	r7, r7, #2
 8002d02:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002d04:	423b      	tst	r3, r7
 8002d06:	d000      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002d08:	e771      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x52>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fb23 	bl	8001354 <HAL_GetTick>
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d10:	1b80      	subs	r0, r0, r6
 8002d12:	4298      	cmp	r0, r3
 8002d14:	d9f5      	bls.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002d16:	e7cd      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002d18:	4a03      	ldr	r2, [pc, #12]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002d1a:	490d      	ldr	r1, [pc, #52]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002d1c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8002d1e:	400b      	ands	r3, r1
 8002d20:	69e9      	ldr	r1, [r5, #28]
 8002d22:	430b      	orrs	r3, r1
 8002d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d26:	e7b4      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40007000 	.word	0x40007000
 8002d30:	ffcfffff 	.word	0xffcfffff
 8002d34:	efffffff 	.word	0xefffffff
 8002d38:	fffff3ff 	.word	0xfffff3ff
 8002d3c:	ffffcfff 	.word	0xffffcfff
 8002d40:	fffcffff 	.word	0xfffcffff
 8002d44:	fbffffff 	.word	0xfbffffff
 8002d48:	fff7ffff 	.word	0xfff7ffff
 8002d4c:	00001388 	.word	0x00001388
 8002d50:	fff3ffff 	.word	0xfff3ffff

08002d54 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d56:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d58:	1c45      	adds	r5, r0, #1
 8002d5a:	7feb      	ldrb	r3, [r5, #31]
{
 8002d5c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8002d5e:	0038      	movs	r0, r7
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d024      	beq.n	8002dae <HAL_RTC_DeactivateAlarm+0x5a>
 8002d64:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d66:	22ca      	movs	r2, #202	@ 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d68:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8002d6a:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d6c:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d72:	3a77      	subs	r2, #119	@ 0x77
 8002d74:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8002d76:	32ad      	adds	r2, #173	@ 0xad
 8002d78:	4291      	cmp	r1, r2
 8002d7a:	d128      	bne.n	8002dce <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	4920      	ldr	r1, [pc, #128]	@ (8002e00 <HAL_RTC_DeactivateAlarm+0xac>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002d80:	27fa      	movs	r7, #250	@ 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002d82:	400a      	ands	r2, r1
 8002d84:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	491e      	ldr	r1, [pc, #120]	@ (8002e04 <HAL_RTC_DeactivateAlarm+0xb0>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002d8a:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002d90:	f7fe fae0 	bl	8001354 <HAL_GetTick>
 8002d94:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002d96:	2201      	movs	r2, #1
 8002d98:	6823      	ldr	r3, [r4, #0]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	4213      	tst	r3, r2
 8002d9e:	d007      	beq.n	8002db0 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002da0:	22ff      	movs	r2, #255	@ 0xff
 8002da2:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002da4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002da8:	2301      	movs	r3, #1
 8002daa:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8002dac:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8002dae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002db0:	f7fe fad0 	bl	8001354 <HAL_GetTick>
 8002db4:	9b01      	ldr	r3, [sp, #4]
 8002db6:	1ac0      	subs	r0, r0, r3
 8002db8:	42b8      	cmp	r0, r7
 8002dba:	d9ec      	bls.n	8002d96 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dbc:	22ff      	movs	r2, #255	@ 0xff
 8002dbe:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8002dc0:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc2:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	77eb      	strb	r3, [r5, #31]
 8002dcc:	e7ef      	b.n	8002dae <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	490d      	ldr	r1, [pc, #52]	@ (8002e08 <HAL_RTC_DeactivateAlarm+0xb4>)
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	490c      	ldr	r1, [pc, #48]	@ (8002e0c <HAL_RTC_DeactivateAlarm+0xb8>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002dde:	f7fe fab9 	bl	8001354 <HAL_GetTick>
 8002de2:	9001      	str	r0, [sp, #4]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002de4:	6823      	ldr	r3, [r4, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	423b      	tst	r3, r7
 8002dea:	d1d9      	bne.n	8002da0 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dec:	f7fe fab2 	bl	8001354 <HAL_GetTick>
 8002df0:	9b01      	ldr	r3, [sp, #4]
 8002df2:	1ac0      	subs	r0, r0, r3
 8002df4:	23fa      	movs	r3, #250	@ 0xfa
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4298      	cmp	r0, r3
 8002dfa:	d9f3      	bls.n	8002de4 <HAL_RTC_DeactivateAlarm+0x90>
 8002dfc:	e7de      	b.n	8002dbc <HAL_RTC_DeactivateAlarm+0x68>
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	fffffeff 	.word	0xfffffeff
 8002e04:	ffffefff 	.word	0xffffefff
 8002e08:	fffffdff 	.word	0xfffffdff
 8002e0c:	ffffdfff 	.word	0xffffdfff

08002e10 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002e10:	6803      	ldr	r3, [r0, #0]
{
 8002e12:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002e14:	689a      	ldr	r2, [r3, #8]
{
 8002e16:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002e18:	04d2      	lsls	r2, r2, #19
 8002e1a:	d50a      	bpl.n	8002e32 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	05db      	lsls	r3, r3, #23
 8002e20:	d507      	bpl.n	8002e32 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002e22:	f7fe f950 	bl	80010c6 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002e26:	6821      	ldr	r1, [r4, #0]
 8002e28:	4b0e      	ldr	r3, [pc, #56]	@ (8002e64 <HAL_RTC_AlarmIRQHandler+0x54>)
 8002e2a:	68ca      	ldr	r2, [r1, #12]
 8002e2c:	b2d2      	uxtb	r2, r2
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002e32:	6823      	ldr	r3, [r4, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	0492      	lsls	r2, r2, #18
 8002e38:	d50b      	bpl.n	8002e52 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	059b      	lsls	r3, r3, #22
 8002e3e:	d508      	bpl.n	8002e52 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002e40:	0020      	movs	r0, r4
 8002e42:	f000 fae5 	bl	8003410 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002e46:	6821      	ldr	r1, [r4, #0]
 8002e48:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <HAL_RTC_AlarmIRQHandler+0x58>)
 8002e4a:	68ca      	ldr	r2, [r1, #12]
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002e52:	2280      	movs	r2, #128	@ 0x80
 8002e54:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_RTC_AlarmIRQHandler+0x5c>)
 8002e56:	0292      	lsls	r2, r2, #10
 8002e58:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	3402      	adds	r4, #2
 8002e5e:	77e3      	strb	r3, [r4, #31]
}
 8002e60:	bd10      	pop	{r4, pc}
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	fffffe7f 	.word	0xfffffe7f
 8002e68:	fffffd7f 	.word	0xfffffd7f
 8002e6c:	40010400 	.word	0x40010400

08002e70 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e70:	21a0      	movs	r1, #160	@ 0xa0
 8002e72:	6802      	ldr	r2, [r0, #0]
{
 8002e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e76:	68d3      	ldr	r3, [r2, #12]
{
 8002e78:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002e7a:	438b      	bics	r3, r1
 8002e7c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002e7e:	f7fe fa69 	bl	8001354 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e82:	27fa      	movs	r7, #250	@ 0xfa
  tickstart = HAL_GetTick();
 8002e84:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e86:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e88:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4233      	tst	r3, r6
 8002e90:	d001      	beq.n	8002e96 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002e92:	2000      	movs	r0, #0
}
 8002e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e96:	f7fe fa5d 	bl	8001354 <HAL_GetTick>
 8002e9a:	1b40      	subs	r0, r0, r5
 8002e9c:	42b8      	cmp	r0, r7
 8002e9e:	d9f4      	bls.n	8002e8a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8002ea0:	2003      	movs	r0, #3
 8002ea2:	e7f7      	b.n	8002e94 <HAL_RTC_WaitForSynchro+0x24>

08002ea4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002ea6:	2640      	movs	r6, #64	@ 0x40
 8002ea8:	6803      	ldr	r3, [r0, #0]
{
 8002eaa:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	4232      	tst	r2, r6
 8002eb0:	d001      	beq.n	8002eb6 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8002eb2:	2000      	movs	r0, #0
}
 8002eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4252      	negs	r2, r2
 8002eba:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002ebc:	f7fe fa4a 	bl	8001354 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002ec0:	27fa      	movs	r7, #250	@ 0xfa
    tickstart = HAL_GetTick();
 8002ec2:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002ec4:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	4233      	tst	r3, r6
 8002ecc:	d1f1      	bne.n	8002eb2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002ece:	f7fe fa41 	bl	8001354 <HAL_GetTick>
 8002ed2:	1b40      	subs	r0, r0, r5
 8002ed4:	42b8      	cmp	r0, r7
 8002ed6:	d9f6      	bls.n	8002ec6 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8002ed8:	2003      	movs	r0, #3
 8002eda:	e7eb      	b.n	8002eb4 <RTC_EnterInitMode+0x10>

08002edc <HAL_RTC_Init>:
{
 8002edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ede:	1e04      	subs	r4, r0, #0
  if (hrtc == NULL)
 8002ee0:	d019      	beq.n	8002f16 <HAL_RTC_Init+0x3a>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ee2:	1c86      	adds	r6, r0, #2
 8002ee4:	7ff3      	ldrb	r3, [r6, #31]
 8002ee6:	b2da      	uxtb	r2, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8002ef0:	f7fd ff00 	bl	8000cf4 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef4:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ef6:	22ca      	movs	r2, #202	@ 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ef8:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002efa:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002efc:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002efe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f00:	3a77      	subs	r2, #119	@ 0x77
 8002f02:	625a      	str	r2, [r3, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f04:	f7ff ffce 	bl	8002ea4 <RTC_EnterInitMode>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	1e05      	subs	r5, r0, #0
 8002f0c:	d006      	beq.n	8002f1c <HAL_RTC_Init+0x40>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f0e:	22ff      	movs	r2, #255	@ 0xff
 8002f10:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002f12:	2304      	movs	r3, #4
 8002f14:	77f3      	strb	r3, [r6, #31]
    return HAL_ERROR;
 8002f16:	2501      	movs	r5, #1
}
 8002f18:	0028      	movs	r0, r5
 8002f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	491c      	ldr	r1, [pc, #112]	@ (8002f90 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f20:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f22:	400a      	ands	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f26:	6862      	ldr	r2, [r4, #4]
 8002f28:	6899      	ldr	r1, [r3, #8]
 8002f2a:	4302      	orrs	r2, r0
 8002f2c:	69a0      	ldr	r0, [r4, #24]
 8002f2e:	4302      	orrs	r2, r0
 8002f30:	430a      	orrs	r2, r1
 8002f32:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f34:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f36:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f38:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f3a:	68a2      	ldr	r2, [r4, #8]
 8002f3c:	6919      	ldr	r1, [r3, #16]
 8002f3e:	0412      	lsls	r2, r2, #16
 8002f40:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f42:	2180      	movs	r1, #128	@ 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f44:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	438a      	bics	r2, r1
 8002f4a:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002f4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002f4e:	397d      	subs	r1, #125	@ 0x7d
 8002f50:	438a      	bics	r2, r1
 8002f52:	64da      	str	r2, [r3, #76]	@ 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002f54:	69e2      	ldr	r2, [r4, #28]
 8002f56:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002f58:	4302      	orrs	r2, r0
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	64da      	str	r2, [r3, #76]	@ 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	2320      	movs	r3, #32
 8002f62:	0017      	movs	r7, r2
 8002f64:	401f      	ands	r7, r3
 8002f66:	421a      	tst	r2, r3
 8002f68:	d10c      	bne.n	8002f84 <HAL_RTC_Init+0xa8>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f6a:	0020      	movs	r0, r4
 8002f6c:	f7ff ff80 	bl	8002e70 <HAL_RTC_WaitForSynchro>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d007      	beq.n	8002f84 <HAL_RTC_Init+0xa8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f74:	22ff      	movs	r2, #255	@ 0xff
 8002f76:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8002f78:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f7c:	2304      	movs	r3, #4
 8002f7e:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8002f80:	77e7      	strb	r7, [r4, #31]
        return HAL_ERROR;
 8002f82:	e7c8      	b.n	8002f16 <HAL_RTC_Init+0x3a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f84:	22ff      	movs	r2, #255	@ 0xff
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8002f8e:	e7c3      	b.n	8002f18 <HAL_RTC_Init+0x3c>
 8002f90:	ff8fffbf 	.word	0xff8fffbf

08002f94 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002f94:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8002f96:	2809      	cmp	r0, #9
 8002f98:	d803      	bhi.n	8002fa2 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	4318      	orrs	r0, r3
 8002f9e:	b2c0      	uxtb	r0, r0
}
 8002fa0:	4770      	bx	lr
    Param -= 10U;
 8002fa2:	380a      	subs	r0, #10
    bcdhigh++;
 8002fa4:	3301      	adds	r3, #1
    Param -= 10U;
 8002fa6:	b2c0      	uxtb	r0, r0
 8002fa8:	e7f5      	b.n	8002f96 <RTC_ByteToBcd2+0x2>
	...

08002fac <HAL_RTC_SetTime>:
{
 8002fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002fae:	1c43      	adds	r3, r0, #1
{
 8002fb0:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8002fb2:	9302      	str	r3, [sp, #8]
{
 8002fb4:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8002fb6:	7fd9      	ldrb	r1, [r3, #31]
 8002fb8:	2302      	movs	r3, #2
{
 8002fba:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8002fbc:	001f      	movs	r7, r3
 8002fbe:	2901      	cmp	r1, #1
 8002fc0:	d036      	beq.n	8003030 <HAL_RTC_SetTime+0x84>
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	1840      	adds	r0, r0, r1
 8002fc6:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fc8:	18e9      	adds	r1, r5, r3
 8002fca:	77cb      	strb	r3, [r1, #31]
 8002fcc:	9101      	str	r1, [sp, #4]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fce:	682f      	ldr	r7, [r5, #0]
 8002fd0:	7820      	ldrb	r0, [r4, #0]
 8002fd2:	7866      	ldrb	r6, [r4, #1]
 8002fd4:	333e      	adds	r3, #62	@ 0x3e
  if (Format == RTC_FORMAT_BIN)
 8002fd6:	2a00      	cmp	r2, #0
 8002fd8:	d12d      	bne.n	8003036 <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	0011      	movs	r1, r2
 8002fde:	4019      	ands	r1, r3
 8002fe0:	421a      	tst	r2, r3
 8002fe2:	d100      	bne.n	8002fe6 <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8002fe4:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002fe6:	f7ff ffd5 	bl	8002f94 <RTC_ByteToBcd2>
 8002fea:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002fec:	0030      	movs	r0, r6
 8002fee:	f7ff ffd1 	bl	8002f94 <RTC_ByteToBcd2>
 8002ff2:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002ff4:	78a0      	ldrb	r0, [r4, #2]
 8002ff6:	f7ff ffcd 	bl	8002f94 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002ffa:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ffc:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002ffe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003000:	4303      	orrs	r3, r0
 8003002:	0412      	lsls	r2, r2, #16
 8003004:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003006:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003008:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800300a:	23ca      	movs	r3, #202	@ 0xca
 800300c:	627b      	str	r3, [r7, #36]	@ 0x24
 800300e:	3b77      	subs	r3, #119	@ 0x77
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003012:	0028      	movs	r0, r5
 8003014:	f7ff ff46 	bl	8002ea4 <RTC_EnterInitMode>
 8003018:	682b      	ldr	r3, [r5, #0]
 800301a:	1e07      	subs	r7, r0, #0
 800301c:	d019      	beq.n	8003052 <HAL_RTC_SetTime+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800301e:	22ff      	movs	r2, #255	@ 0xff
 8003020:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003022:	2304      	movs	r3, #4
 8003024:	9a01      	ldr	r2, [sp, #4]
    return HAL_ERROR;
 8003026:	2701      	movs	r7, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003028:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 800302a:	2300      	movs	r3, #0
 800302c:	9a02      	ldr	r2, [sp, #8]
 800302e:	77d3      	strb	r3, [r2, #31]
}
 8003030:	0038      	movs	r0, r7
 8003032:	b005      	add	sp, #20
 8003034:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	0011      	movs	r1, r2
 800303a:	4019      	ands	r1, r3
 800303c:	421a      	tst	r2, r3
 800303e:	d100      	bne.n	8003042 <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8003040:	70e1      	strb	r1, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8003042:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003044:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003046:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003048:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800304a:	431e      	orrs	r6, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800304c:	78e3      	ldrb	r3, [r4, #3]
 800304e:	041b      	lsls	r3, r3, #16
 8003050:	e7da      	b.n	8003008 <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003052:	4a12      	ldr	r2, [pc, #72]	@ (800309c <HAL_RTC_SetTime+0xf0>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003054:	4912      	ldr	r1, [pc, #72]	@ (80030a0 <HAL_RTC_SetTime+0xf4>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003056:	4016      	ands	r6, r2
 8003058:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800305a:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800305c:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800305e:	400a      	ands	r2, r1
 8003060:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003062:	68e2      	ldr	r2, [r4, #12]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	4302      	orrs	r2, r0
 8003068:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800306a:	2180      	movs	r1, #128	@ 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800306c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	438a      	bics	r2, r1
 8003072:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	069b      	lsls	r3, r3, #26
 8003078:	d406      	bmi.n	8003088 <HAL_RTC_SetTime+0xdc>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800307a:	0028      	movs	r0, r5
 800307c:	f7ff fef8 	bl	8002e70 <HAL_RTC_WaitForSynchro>
 8003080:	2800      	cmp	r0, #0
 8003082:	d001      	beq.n	8003088 <HAL_RTC_SetTime+0xdc>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	e7ca      	b.n	800301e <HAL_RTC_SetTime+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003088:	22ff      	movs	r2, #255	@ 0xff
 800308a:	682b      	ldr	r3, [r5, #0]
 800308c:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800308e:	2301      	movs	r3, #1
 8003090:	9a01      	ldr	r2, [sp, #4]
 8003092:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8003094:	2300      	movs	r3, #0
 8003096:	9a02      	ldr	r2, [sp, #8]
 8003098:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 800309a:	e7c9      	b.n	8003030 <HAL_RTC_SetTime+0x84>
 800309c:	007f7f7f 	.word	0x007f7f7f
 80030a0:	fffbffff 	.word	0xfffbffff

080030a4 <HAL_RTC_SetDate>:
{
 80030a4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80030a6:	1c43      	adds	r3, r0, #1
{
 80030a8:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80030aa:	9302      	str	r3, [sp, #8]
{
 80030ac:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 80030ae:	7fd9      	ldrb	r1, [r3, #31]
 80030b0:	2302      	movs	r3, #2
{
 80030b2:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80030b4:	001e      	movs	r6, r3
 80030b6:	2901      	cmp	r1, #1
 80030b8:	d024      	beq.n	8003104 <HAL_RTC_SetDate+0x60>
 80030ba:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030bc:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 80030be:	1840      	adds	r0, r0, r1
 80030c0:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80030c2:	77fb      	strb	r3, [r7, #31]
                  ((uint32_t)sDate->Date) | \
 80030c4:	78a9      	ldrb	r1, [r5, #2]
                  (((uint32_t)sDate->WeekDay) << 13U));
 80030c6:	782e      	ldrb	r6, [r5, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030c8:	78e8      	ldrb	r0, [r5, #3]
                  (((uint32_t)sDate->Month) << 8U) | \
 80030ca:	786b      	ldrb	r3, [r5, #1]
                  (((uint32_t)sDate->WeekDay) << 13U));
 80030cc:	0376      	lsls	r6, r6, #13
                  ((uint32_t)sDate->Date) | \
 80030ce:	9101      	str	r1, [sp, #4]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80030d0:	2a00      	cmp	r2, #0
 80030d2:	d01a      	beq.n	800310a <HAL_RTC_SetDate+0x66>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030d4:	0400      	lsls	r0, r0, #16
 80030d6:	4330      	orrs	r0, r6
 80030d8:	4308      	orrs	r0, r1
                  (((uint32_t)sDate->Month) << 8U) | \
 80030da:	021d      	lsls	r5, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80030dc:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030de:	22ca      	movs	r2, #202	@ 0xca
 80030e0:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030e2:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80030e6:	3a77      	subs	r2, #119	@ 0x77
 80030e8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030ea:	f7ff fedb 	bl	8002ea4 <RTC_EnterInitMode>
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	1e06      	subs	r6, r0, #0
 80030f2:	d021      	beq.n	8003138 <HAL_RTC_SetDate+0x94>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f4:	22ff      	movs	r2, #255	@ 0xff
 80030f6:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80030f8:	2304      	movs	r3, #4
 80030fa:	77fb      	strb	r3, [r7, #31]
        __HAL_UNLOCK(hrtc);
 80030fc:	2300      	movs	r3, #0
    return HAL_ERROR;
 80030fe:	2601      	movs	r6, #1
        __HAL_UNLOCK(hrtc);
 8003100:	9a02      	ldr	r2, [sp, #8]
 8003102:	77d3      	strb	r3, [r2, #31]
}
 8003104:	0030      	movs	r0, r6
 8003106:	b005      	add	sp, #20
 8003108:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800310a:	2210      	movs	r2, #16
 800310c:	4213      	tst	r3, r2
 800310e:	d002      	beq.n	8003116 <HAL_RTC_SetDate+0x72>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003110:	4393      	bics	r3, r2
 8003112:	330a      	adds	r3, #10
 8003114:	706b      	strb	r3, [r5, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003116:	f7ff ff3d 	bl	8002f94 <RTC_ByteToBcd2>
 800311a:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800311c:	7868      	ldrb	r0, [r5, #1]
 800311e:	f7ff ff39 	bl	8002f94 <RTC_ByteToBcd2>
 8003122:	0005      	movs	r5, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003124:	9801      	ldr	r0, [sp, #4]
 8003126:	f7ff ff35 	bl	8002f94 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800312a:	9b03      	ldr	r3, [sp, #12]
 800312c:	4330      	orrs	r0, r6
 800312e:	041b      	lsls	r3, r3, #16
 8003130:	4303      	orrs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003132:	022d      	lsls	r5, r5, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003134:	431d      	orrs	r5, r3
 8003136:	e7d2      	b.n	80030de <HAL_RTC_SetDate+0x3a>
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003138:	2180      	movs	r1, #128	@ 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800313a:	4a0c      	ldr	r2, [pc, #48]	@ (800316c <HAL_RTC_SetDate+0xc8>)
 800313c:	4015      	ands	r5, r2
 800313e:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	438a      	bics	r2, r1
 8003144:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	069b      	lsls	r3, r3, #26
 800314a:	d406      	bmi.n	800315a <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800314c:	0020      	movs	r0, r4
 800314e:	f7ff fe8f 	bl	8002e70 <HAL_RTC_WaitForSynchro>
 8003152:	2800      	cmp	r0, #0
 8003154:	d001      	beq.n	800315a <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003156:	6823      	ldr	r3, [r4, #0]
 8003158:	e7cc      	b.n	80030f4 <HAL_RTC_SetDate+0x50>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800315a:	22ff      	movs	r2, #255	@ 0xff
 800315c:	6823      	ldr	r3, [r4, #0]
 800315e:	625a      	str	r2, [r3, #36]	@ 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8003160:	2301      	movs	r3, #1
 8003162:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hrtc);
 8003164:	2300      	movs	r3, #0
 8003166:	9a02      	ldr	r2, [sp, #8]
 8003168:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 800316a:	e7cb      	b.n	8003104 <HAL_RTC_SetDate+0x60>
 800316c:	00ffff3f 	.word	0x00ffff3f

08003170 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8003170:	2302      	movs	r3, #2
{
 8003172:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003174:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8003176:	1c41      	adds	r1, r0, #1
 8003178:	7fcd      	ldrb	r5, [r1, #31]
{
 800317a:	0007      	movs	r7, r0
 800317c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800317e:	0018      	movs	r0, r3
 8003180:	2d01      	cmp	r5, #1
 8003182:	d100      	bne.n	8003186 <HAL_RTC_SetAlarm_IT+0x16>
 8003184:	e096      	b.n	80032b4 <HAL_RTC_SetAlarm_IT+0x144>
 8003186:	3801      	subs	r0, #1
 8003188:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800318a:	18f9      	adds	r1, r7, r3
 800318c:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 800318e:	69e1      	ldr	r1, [r4, #28]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003190:	683e      	ldr	r6, [r7, #0]
 8003192:	9100      	str	r1, [sp, #0]
 8003194:	78a1      	ldrb	r1, [r4, #2]
 8003196:	7865      	ldrb	r5, [r4, #1]
 8003198:	7820      	ldrb	r0, [r4, #0]
 800319a:	333e      	adds	r3, #62	@ 0x3e
 800319c:	9101      	str	r1, [sp, #4]
  if (Format == RTC_FORMAT_BIN)
 800319e:	2a00      	cmp	r2, #0
 80031a0:	d162      	bne.n	8003268 <HAL_RTC_SetAlarm_IT+0xf8>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031a2:	68b2      	ldr	r2, [r6, #8]
 80031a4:	0011      	movs	r1, r2
 80031a6:	4019      	ands	r1, r3
 80031a8:	421a      	tst	r2, r3
 80031aa:	d100      	bne.n	80031ae <HAL_RTC_SetAlarm_IT+0x3e>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80031ac:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80031ae:	f7ff fef1 	bl	8002f94 <RTC_ByteToBcd2>
 80031b2:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80031b4:	0028      	movs	r0, r5
 80031b6:	f7ff feed 	bl	8002f94 <RTC_ByteToBcd2>
 80031ba:	9003      	str	r0, [sp, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80031bc:	9801      	ldr	r0, [sp, #4]
 80031be:	f7ff fee9 	bl	8002f94 <RTC_ByteToBcd2>
 80031c2:	0005      	movs	r5, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80031c4:	1c63      	adds	r3, r4, #1
 80031c6:	7fd8      	ldrb	r0, [r3, #31]
 80031c8:	f7ff fee4 	bl	8002f94 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80031cc:	6962      	ldr	r2, [r4, #20]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80031ce:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80031d0:	9900      	ldr	r1, [sp, #0]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80031d2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80031d4:	4311      	orrs	r1, r2
 80031d6:	9a02      	ldr	r2, [sp, #8]
 80031d8:	430b      	orrs	r3, r1
 80031da:	432b      	orrs	r3, r5
 80031dc:	0412      	lsls	r2, r2, #16
 80031de:	4313      	orrs	r3, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80031e0:	9a03      	ldr	r2, [sp, #12]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80031e2:	0605      	lsls	r5, r0, #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80031e4:	0212      	lsls	r2, r2, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80031e6:	4313      	orrs	r3, r2
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80031e8:	6862      	ldr	r2, [r4, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80031ea:	431d      	orrs	r5, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80031ec:	69a3      	ldr	r3, [r4, #24]
 80031ee:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031f0:	23ca      	movs	r3, #202	@ 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80031f2:	9200      	str	r2, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031f4:	6273      	str	r3, [r6, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80031f6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031f8:	3b77      	subs	r3, #119	@ 0x77
 80031fa:	6273      	str	r3, [r6, #36]	@ 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80031fc:	33ad      	adds	r3, #173	@ 0xad
 80031fe:	429a      	cmp	r2, r3
 8003200:	d15a      	bne.n	80032b8 <HAL_RTC_SetAlarm_IT+0x148>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003202:	68b3      	ldr	r3, [r6, #8]
 8003204:	4a3f      	ldr	r2, [pc, #252]	@ (8003304 <HAL_RTC_SetAlarm_IT+0x194>)
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003206:	24fa      	movs	r4, #250	@ 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003208:	4013      	ands	r3, r2
 800320a:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800320c:	68f2      	ldr	r2, [r6, #12]
 800320e:	4b3e      	ldr	r3, [pc, #248]	@ (8003308 <HAL_RTC_SetAlarm_IT+0x198>)
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	4313      	orrs	r3, r2
 8003214:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8003216:	f7fe f89d 	bl	8001354 <HAL_GetTick>
 800321a:	0006      	movs	r6, r0
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800321c:	00a4      	lsls	r4, r4, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800321e:	2101      	movs	r1, #1
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	420a      	tst	r2, r1
 8003226:	d036      	beq.n	8003296 <HAL_RTC_SetAlarm_IT+0x126>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003228:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800322a:	61dd      	str	r5, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800322e:	2280      	movs	r2, #128	@ 0x80
 8003230:	6899      	ldr	r1, [r3, #8]
 8003232:	0052      	lsls	r2, r2, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8003238:	2280      	movs	r2, #128	@ 0x80
 800323a:	6899      	ldr	r1, [r3, #8]
 800323c:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003242:	2280      	movs	r2, #128	@ 0x80
 8003244:	4b31      	ldr	r3, [pc, #196]	@ (800330c <HAL_RTC_SetAlarm_IT+0x19c>)
 8003246:	0292      	lsls	r2, r2, #10
 8003248:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 800324a:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800324c:	4311      	orrs	r1, r2
 800324e:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	430a      	orrs	r2, r1
 8003254:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003256:	22ff      	movs	r2, #255	@ 0xff
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	625a      	str	r2, [r3, #36]	@ 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800325c:	1cbb      	adds	r3, r7, #2
 800325e:	3afe      	subs	r2, #254	@ 0xfe
 8003260:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8003262:	18bb      	adds	r3, r7, r2
 8003264:	77d8      	strb	r0, [r3, #31]
  return HAL_OK;
 8003266:	e025      	b.n	80032b4 <HAL_RTC_SetAlarm_IT+0x144>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003268:	68b2      	ldr	r2, [r6, #8]
 800326a:	0011      	movs	r1, r2
 800326c:	4019      	ands	r1, r3
 800326e:	421a      	tst	r2, r3
 8003270:	d100      	bne.n	8003274 <HAL_RTC_SetAlarm_IT+0x104>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003272:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003274:	6963      	ldr	r3, [r4, #20]
 8003276:	9a00      	ldr	r2, [sp, #0]
 8003278:	0400      	lsls	r0, r0, #16
 800327a:	431a      	orrs	r2, r3
 800327c:	0013      	movs	r3, r2
 800327e:	9a01      	ldr	r2, [sp, #4]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003280:	022d      	lsls	r5, r5, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003282:	4313      	orrs	r3, r2
 8003284:	4303      	orrs	r3, r0
 8003286:	431d      	orrs	r5, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003288:	78e3      	ldrb	r3, [r4, #3]
 800328a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800328c:	431d      	orrs	r5, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800328e:	1c63      	adds	r3, r4, #1
 8003290:	7fdb      	ldrb	r3, [r3, #31]
 8003292:	061b      	lsls	r3, r3, #24
 8003294:	e7a8      	b.n	80031e8 <HAL_RTC_SetAlarm_IT+0x78>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003296:	f7fe f85d 	bl	8001354 <HAL_GetTick>
 800329a:	1b80      	subs	r0, r0, r6
 800329c:	42a0      	cmp	r0, r4
 800329e:	d9be      	bls.n	800321e <HAL_RTC_SetAlarm_IT+0xae>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a0:	22ff      	movs	r2, #255	@ 0xff
 80032a2:	683b      	ldr	r3, [r7, #0]
        return HAL_TIMEOUT;
 80032a4:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032a8:	1cbb      	adds	r3, r7, #2
 80032aa:	3afc      	subs	r2, #252	@ 0xfc
 80032ac:	77da      	strb	r2, [r3, #31]
        __HAL_UNLOCK(hrtc);
 80032ae:	2200      	movs	r2, #0
 80032b0:	3701      	adds	r7, #1
 80032b2:	77fa      	strb	r2, [r7, #31]
}
 80032b4:	b005      	add	sp, #20
 80032b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80032b8:	68b3      	ldr	r3, [r6, #8]
 80032ba:	4a15      	ldr	r2, [pc, #84]	@ (8003310 <HAL_RTC_SetAlarm_IT+0x1a0>)
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032bc:	24fa      	movs	r4, #250	@ 0xfa
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80032be:	4013      	ands	r3, r2
 80032c0:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80032c2:	68f2      	ldr	r2, [r6, #12]
 80032c4:	4b13      	ldr	r3, [pc, #76]	@ (8003314 <HAL_RTC_SetAlarm_IT+0x1a4>)
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80032cc:	f7fe f842 	bl	8001354 <HAL_GetTick>
 80032d0:	0006      	movs	r6, r0
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032d2:	00a4      	lsls	r4, r4, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80032d4:	2102      	movs	r1, #2
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68da      	ldr	r2, [r3, #12]
 80032da:	420a      	tst	r2, r1
 80032dc:	d00b      	beq.n	80032f6 <HAL_RTC_SetAlarm_IT+0x186>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80032de:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80032e0:	621d      	str	r5, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80032e2:	649a      	str	r2, [r3, #72]	@ 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80032e4:	2280      	movs	r2, #128	@ 0x80
 80032e6:	6899      	ldr	r1, [r3, #8]
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	430a      	orrs	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80032ee:	2280      	movs	r2, #128	@ 0x80
 80032f0:	6899      	ldr	r1, [r3, #8]
 80032f2:	0192      	lsls	r2, r2, #6
 80032f4:	e7a3      	b.n	800323e <HAL_RTC_SetAlarm_IT+0xce>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032f6:	f7fe f82d 	bl	8001354 <HAL_GetTick>
 80032fa:	1b80      	subs	r0, r0, r6
 80032fc:	42a0      	cmp	r0, r4
 80032fe:	d9e9      	bls.n	80032d4 <HAL_RTC_SetAlarm_IT+0x164>
 8003300:	e7ce      	b.n	80032a0 <HAL_RTC_SetAlarm_IT+0x130>
 8003302:	46c0      	nop			@ (mov r8, r8)
 8003304:	fffffeff 	.word	0xfffffeff
 8003308:	fffffe7f 	.word	0xfffffe7f
 800330c:	40010400 	.word	0x40010400
 8003310:	fffffdff 	.word	0xfffffdff
 8003314:	fffffd7f 	.word	0xfffffd7f

08003318 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003318:	0903      	lsrs	r3, r0, #4
{
 800331a:	0002      	movs	r2, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800331c:	200a      	movs	r0, #10
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800331e:	210f      	movs	r1, #15
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8003320:	4358      	muls	r0, r3
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003322:	400a      	ands	r2, r1
 8003324:	1880      	adds	r0, r0, r2
 8003326:	b2c0      	uxtb	r0, r0
}
 8003328:	4770      	bx	lr
	...

0800332c <HAL_RTC_GetTime>:
{
 800332c:	b570      	push	{r4, r5, r6, lr}
 800332e:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003330:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003332:	203f      	movs	r0, #63	@ 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003334:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8003336:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003338:	690b      	ldr	r3, [r1, #16]
 800333a:	045b      	lsls	r3, r3, #17
 800333c:	0c5b      	lsrs	r3, r3, #17
 800333e:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003340:	680b      	ldr	r3, [r1, #0]
 8003342:	490e      	ldr	r1, [pc, #56]	@ (800337c <HAL_RTC_GetTime+0x50>)
 8003344:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003346:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003348:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800334a:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800334c:	2340      	movs	r3, #64	@ 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800334e:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003350:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8003352:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003354:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003356:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003358:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800335a:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 800335c:	2a00      	cmp	r2, #0
 800335e:	d10a      	bne.n	8003376 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003360:	f7ff ffda 	bl	8003318 <RTC_Bcd2ToByte>
 8003364:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003366:	0030      	movs	r0, r6
 8003368:	f7ff ffd6 	bl	8003318 <RTC_Bcd2ToByte>
 800336c:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800336e:	0028      	movs	r0, r5
 8003370:	f7ff ffd2 	bl	8003318 <RTC_Bcd2ToByte>
 8003374:	70a0      	strb	r0, [r4, #2]
}
 8003376:	2000      	movs	r0, #0
 8003378:	bd70      	pop	{r4, r5, r6, pc}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	007f7f7f 	.word	0x007f7f7f

08003380 <HAL_RTC_GetDate>:
{
 8003380:	b570      	push	{r4, r5, r6, lr}
 8003382:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003384:	6803      	ldr	r3, [r0, #0]
 8003386:	490e      	ldr	r1, [pc, #56]	@ (80033c0 <HAL_RTC_GetDate+0x40>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800338c:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800338e:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003390:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003392:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003394:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003396:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003398:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800339a:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800339c:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800339e:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 80033a0:	2a00      	cmp	r2, #0
 80033a2:	d10a      	bne.n	80033ba <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80033a4:	f7ff ffb8 	bl	8003318 <RTC_Bcd2ToByte>
 80033a8:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80033aa:	0028      	movs	r0, r5
 80033ac:	f7ff ffb4 	bl	8003318 <RTC_Bcd2ToByte>
 80033b0:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80033b2:	0030      	movs	r0, r6
 80033b4:	f7ff ffb0 	bl	8003318 <RTC_Bcd2ToByte>
 80033b8:	70a0      	strb	r0, [r4, #2]
}
 80033ba:	2000      	movs	r0, #0
 80033bc:	bd70      	pop	{r4, r5, r6, pc}
 80033be:	46c0      	nop			@ (mov r8, r8)
 80033c0:	00ffff3f 	.word	0x00ffff3f

080033c4 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80033c4:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80033c6:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80033c8:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);
 80033ca:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80033cc:	600a      	str	r2, [r1, #0]
}
 80033ce:	4770      	bx	lr

080033d0 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80033d0:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 80033d2:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 80033d4:	3350      	adds	r3, #80	@ 0x50
  tmp += (BackupRegister * 4U);
 80033d6:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80033d8:	6808      	ldr	r0, [r1, #0]
}
 80033da:	4770      	bx	lr

080033dc <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033dc:	2202      	movs	r2, #2
{
 80033de:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 80033e0:	1c41      	adds	r1, r0, #1
 80033e2:	7fcc      	ldrb	r4, [r1, #31]
{
 80033e4:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 80033e6:	0010      	movs	r0, r2
 80033e8:	2c01      	cmp	r4, #1
 80033ea:	d010      	beq.n	800340e <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033ec:	1898      	adds	r0, r3, r2
 80033ee:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	32c8      	adds	r2, #200	@ 0xc8
 80033f4:	625a      	str	r2, [r3, #36]	@ 0x24
 80033f6:	3a77      	subs	r2, #119	@ 0x77
 80033f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80033fa:	689c      	ldr	r4, [r3, #8]
 80033fc:	3a33      	subs	r2, #51	@ 0x33
 80033fe:	4322      	orrs	r2, r4
 8003400:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003402:	22ff      	movs	r2, #255	@ 0xff
 8003404:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003406:	2301      	movs	r3, #1
 8003408:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800340a:	2000      	movs	r0, #0
 800340c:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 800340e:	bd10      	pop	{r4, pc}

08003410 <HAL_RTCEx_AlarmBEventCallback>:
/**
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
 8003410:	4770      	bx	lr
	...

08003414 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003416:	001f      	movs	r7, r3
 8003418:	b085      	sub	sp, #20
 800341a:	000e      	movs	r6, r1
 800341c:	9201      	str	r2, [sp, #4]
 800341e:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003420:	f7fd ff98 	bl	8001354 <HAL_GetTick>
 8003424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003426:	19dd      	adds	r5, r3, r7
 8003428:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800342a:	f7fd ff93 	bl	8001354 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800342e:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <SPI_WaitFlagStateUntilTimeout+0xbc>)
  tmp_tickstart = HAL_GetTick();
 8003430:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	015b      	lsls	r3, r3, #5
 8003436:	0d1b      	lsrs	r3, r3, #20
 8003438:	436b      	muls	r3, r5
 800343a:	9303      	str	r3, [sp, #12]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	6893      	ldr	r3, [r2, #8]
 8003440:	4033      	ands	r3, r6
 8003442:	1b9b      	subs	r3, r3, r6
 8003444:	4259      	negs	r1, r3
 8003446:	414b      	adcs	r3, r1
 8003448:	9901      	ldr	r1, [sp, #4]
 800344a:	428b      	cmp	r3, r1
 800344c:	d101      	bne.n	8003452 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800344e:	2000      	movs	r0, #0
 8003450:	e032      	b.n	80034b8 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 8003452:	1c7b      	adds	r3, r7, #1
 8003454:	d0f3      	beq.n	800343e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003456:	f7fd ff7d 	bl	8001354 <HAL_GetTick>
 800345a:	9b00      	ldr	r3, [sp, #0]
 800345c:	1ac0      	subs	r0, r0, r3
 800345e:	42a8      	cmp	r0, r5
 8003460:	d32c      	bcc.n	80034bc <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003462:	21e0      	movs	r1, #224	@ 0xe0
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	438a      	bics	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800346c:	2282      	movs	r2, #130	@ 0x82
 800346e:	6861      	ldr	r1, [r4, #4]
 8003470:	0052      	lsls	r2, r2, #1
 8003472:	4291      	cmp	r1, r2
 8003474:	d10c      	bne.n	8003490 <SPI_WaitFlagStateUntilTimeout+0x7c>
 8003476:	2180      	movs	r1, #128	@ 0x80
 8003478:	68a2      	ldr	r2, [r4, #8]
 800347a:	0209      	lsls	r1, r1, #8
 800347c:	428a      	cmp	r2, r1
 800347e:	d003      	beq.n	8003488 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003480:	2180      	movs	r1, #128	@ 0x80
 8003482:	00c9      	lsls	r1, r1, #3
 8003484:	428a      	cmp	r2, r1
 8003486:	d103      	bne.n	8003490 <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8003488:	2140      	movs	r1, #64	@ 0x40
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	438a      	bics	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003490:	2180      	movs	r1, #128	@ 0x80
 8003492:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003494:	0189      	lsls	r1, r1, #6
 8003496:	428a      	cmp	r2, r1
 8003498:	d106      	bne.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 800349a:	6819      	ldr	r1, [r3, #0]
 800349c:	480d      	ldr	r0, [pc, #52]	@ (80034d4 <SPI_WaitFlagStateUntilTimeout+0xc0>)
 800349e:	4001      	ands	r1, r0
 80034a0:	6019      	str	r1, [r3, #0]
 80034a2:	6819      	ldr	r1, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80034a8:	0023      	movs	r3, r4
 80034aa:	2201      	movs	r2, #1
 80034ac:	3351      	adds	r3, #81	@ 0x51
 80034ae:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 80034b0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 80034b2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 80034b4:	3450      	adds	r4, #80	@ 0x50
 80034b6:	7023      	strb	r3, [r4, #0]
}
 80034b8:	b005      	add	sp, #20
 80034ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 80034bc:	9b03      	ldr	r3, [sp, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d000      	beq.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0xb0>
 80034c2:	002b      	movs	r3, r5
      count--;
 80034c4:	9a03      	ldr	r2, [sp, #12]
 80034c6:	001d      	movs	r5, r3
 80034c8:	3a01      	subs	r2, #1
 80034ca:	9203      	str	r2, [sp, #12]
 80034cc:	e7b6      	b.n	800343c <SPI_WaitFlagStateUntilTimeout+0x28>
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	20000018 	.word	0x20000018
 80034d4:	ffffdfff 	.word	0xffffdfff

080034d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034da:	4b17      	ldr	r3, [pc, #92]	@ (8003538 <SPI_EndRxTxTransaction+0x60>)
{
 80034dc:	0004      	movs	r4, r0
 80034de:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	4916      	ldr	r1, [pc, #88]	@ (800353c <SPI_EndRxTxTransaction+0x64>)
{
 80034e4:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80034e6:	f7fc fe21 	bl	800012c <__udivsi3>
 80034ea:	23fa      	movs	r3, #250	@ 0xfa
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4343      	muls	r3, r0
 80034f0:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f2:	2382      	movs	r3, #130	@ 0x82
 80034f4:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80034f6:	2280      	movs	r2, #128	@ 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	4299      	cmp	r1, r3
 80034fc:	d10f      	bne.n	800351e <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034fe:	002b      	movs	r3, r5
 8003500:	2200      	movs	r2, #0
 8003502:	2180      	movs	r1, #128	@ 0x80
 8003504:	0020      	movs	r0, r4
 8003506:	9600      	str	r6, [sp, #0]
 8003508:	f7ff ff84 	bl	8003414 <SPI_WaitFlagStateUntilTimeout>
 800350c:	2800      	cmp	r0, #0
 800350e:	d010      	beq.n	8003532 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003510:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8003512:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003514:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003516:	4313      	orrs	r3, r2
 8003518:	6563      	str	r3, [r4, #84]	@ 0x54
  }

  return HAL_OK;
}
 800351a:	b004      	add	sp, #16
 800351c:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 800351e:	9b03      	ldr	r3, [sp, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d006      	beq.n	8003532 <SPI_EndRxTxTransaction+0x5a>
      count--;
 8003524:	9b03      	ldr	r3, [sp, #12]
 8003526:	3b01      	subs	r3, #1
 8003528:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	4213      	tst	r3, r2
 8003530:	d1f5      	bne.n	800351e <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 8003532:	2000      	movs	r0, #0
 8003534:	e7f1      	b.n	800351a <SPI_EndRxTxTransaction+0x42>
 8003536:	46c0      	nop			@ (mov r8, r8)
 8003538:	20000018 	.word	0x20000018
 800353c:	016e3600 	.word	0x016e3600

08003540 <HAL_SPI_MspInit>:
}
 8003540:	4770      	bx	lr
	...

08003544 <HAL_SPI_Init>:
{
 8003544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003546:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003548:	2001      	movs	r0, #1
  if (hspi == NULL)
 800354a:	2c00      	cmp	r4, #0
 800354c:	d05a      	beq.n	8003604 <HAL_SPI_Init+0xc0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800354e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003550:	2b00      	cmp	r3, #0
 8003552:	d158      	bne.n	8003606 <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003554:	2282      	movs	r2, #130	@ 0x82
 8003556:	6861      	ldr	r1, [r4, #4]
 8003558:	0052      	lsls	r2, r2, #1
 800355a:	4291      	cmp	r1, r2
 800355c:	d000      	beq.n	8003560 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800355e:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003560:	0025      	movs	r5, r4
 8003562:	3551      	adds	r5, #81	@ 0x51
 8003564:	782b      	ldrb	r3, [r5, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d105      	bne.n	8003578 <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 800356c:	0023      	movs	r3, r4
 800356e:	3350      	adds	r3, #80	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003570:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003572:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8003574:	f7ff ffe4 	bl	8003540 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003578:	2702      	movs	r7, #2
  __HAL_SPI_DISABLE(hspi);
 800357a:	2240      	movs	r2, #64	@ 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800357c:	2682      	movs	r6, #130	@ 0x82
  hspi->State = HAL_SPI_STATE_BUSY;
 800357e:	702f      	strb	r7, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003580:	2784      	movs	r7, #132	@ 0x84
  __HAL_SPI_DISABLE(hspi);
 8003582:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003584:	0076      	lsls	r6, r6, #1
  __HAL_SPI_DISABLE(hspi);
 8003586:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003588:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 800358a:	4393      	bics	r3, r2
 800358c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800358e:	6863      	ldr	r3, [r4, #4]
 8003590:	69a2      	ldr	r2, [r4, #24]
 8003592:	4033      	ands	r3, r6
 8003594:	68a6      	ldr	r6, [r4, #8]
 8003596:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003598:	403e      	ands	r6, r7
 800359a:	2780      	movs	r7, #128	@ 0x80
 800359c:	4333      	orrs	r3, r6
 800359e:	68e6      	ldr	r6, [r4, #12]
 80035a0:	013f      	lsls	r7, r7, #4
 80035a2:	403e      	ands	r6, r7
 80035a4:	2702      	movs	r7, #2
 80035a6:	4333      	orrs	r3, r6
 80035a8:	6926      	ldr	r6, [r4, #16]
 80035aa:	403e      	ands	r6, r7
 80035ac:	4333      	orrs	r3, r6
 80035ae:	6966      	ldr	r6, [r4, #20]
 80035b0:	3f01      	subs	r7, #1
 80035b2:	403e      	ands	r6, r7
 80035b4:	4333      	orrs	r3, r6
 80035b6:	2680      	movs	r6, #128	@ 0x80
 80035b8:	00b6      	lsls	r6, r6, #2
 80035ba:	4016      	ands	r6, r2
 80035bc:	4333      	orrs	r3, r6
 80035be:	69e6      	ldr	r6, [r4, #28]
 80035c0:	3737      	adds	r7, #55	@ 0x37
 80035c2:	403e      	ands	r6, r7
 80035c4:	4333      	orrs	r3, r6
 80035c6:	6a26      	ldr	r6, [r4, #32]
 80035c8:	3748      	adds	r7, #72	@ 0x48
 80035ca:	403e      	ands	r6, r7
 80035cc:	4333      	orrs	r3, r6
 80035ce:	2680      	movs	r6, #128	@ 0x80
 80035d0:	0007      	movs	r7, r0
 80035d2:	01b6      	lsls	r6, r6, #6
 80035d4:	4037      	ands	r7, r6
 80035d6:	433b      	orrs	r3, r7
 80035d8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035da:	2304      	movs	r3, #4
 80035dc:	2710      	movs	r7, #16
 80035de:	0c12      	lsrs	r2, r2, #16
 80035e0:	401a      	ands	r2, r3
 80035e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80035e4:	403b      	ands	r3, r7
 80035e6:	431a      	orrs	r2, r3
 80035e8:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035ea:	42b0      	cmp	r0, r6
 80035ec:	d102      	bne.n	80035f4 <HAL_SPI_Init+0xb0>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80035ee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035f4:	69cb      	ldr	r3, [r1, #28]
 80035f6:	4a06      	ldr	r2, [pc, #24]	@ (8003610 <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035f8:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035fa:	4013      	ands	r3, r2
 80035fc:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80035fe:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003600:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003602:	702b      	strb	r3, [r5, #0]
}
 8003604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800360a:	6163      	str	r3, [r4, #20]
 800360c:	e7a8      	b.n	8003560 <HAL_SPI_Init+0x1c>
 800360e:	46c0      	nop			@ (mov r8, r8)
 8003610:	fffff7ff 	.word	0xfffff7ff

08003614 <HAL_SPI_TransmitReceive>:
{
 8003614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003616:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8003618:	0003      	movs	r3, r0
{
 800361a:	b087      	sub	sp, #28
 800361c:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 800361e:	3350      	adds	r3, #80	@ 0x50
 8003620:	781a      	ldrb	r2, [r3, #0]
{
 8003622:	0004      	movs	r4, r0
 8003624:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8003626:	2702      	movs	r7, #2
 8003628:	2a01      	cmp	r2, #1
 800362a:	d021      	beq.n	8003670 <HAL_SPI_TransmitReceive+0x5c>
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003630:	f7fd fe90 	bl	8001354 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003634:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8003636:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 8003638:	3351      	adds	r3, #81	@ 0x51
 800363a:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800363c:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800363e:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003640:	2b01      	cmp	r3, #1
 8003642:	d008      	beq.n	8003656 <HAL_SPI_TransmitReceive+0x42>
 8003644:	2382      	movs	r3, #130	@ 0x82
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	4299      	cmp	r1, r3
 800364a:	d10a      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x4e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800364c:	68a3      	ldr	r3, [r4, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x4e>
 8003652:	2a04      	cmp	r2, #4
 8003654:	d105      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x4e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003656:	2d00      	cmp	r5, #0
 8003658:	d002      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x4c>
 800365a:	9b03      	ldr	r3, [sp, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <HAL_SPI_TransmitReceive+0x62>
    errorcode = HAL_ERROR;
 8003660:	2701      	movs	r7, #1
  hspi->State = HAL_SPI_STATE_READY;
 8003662:	0023      	movs	r3, r4
 8003664:	2201      	movs	r2, #1
 8003666:	3351      	adds	r3, #81	@ 0x51
 8003668:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 800366a:	2300      	movs	r3, #0
 800366c:	3450      	adds	r4, #80	@ 0x50
 800366e:	7023      	strb	r3, [r4, #0]
}
 8003670:	0038      	movs	r0, r7
 8003672:	b007      	add	sp, #28
 8003674:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003676:	2e00      	cmp	r6, #0
 8003678:	d0f2      	beq.n	8003660 <HAL_SPI_TransmitReceive+0x4c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800367a:	0023      	movs	r3, r4
 800367c:	3351      	adds	r3, #81	@ 0x51
 800367e:	781a      	ldrb	r2, [r3, #0]
 8003680:	2a04      	cmp	r2, #4
 8003682:	d001      	beq.n	8003688 <HAL_SPI_TransmitReceive+0x74>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003684:	2205      	movs	r2, #5
 8003686:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003688:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800368a:	2080      	movs	r0, #128	@ 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800368c:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800368e:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003690:	63a2      	str	r2, [r4, #56]	@ 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003692:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  hspi->RxXferCount = Size;
 8003694:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003696:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003698:	6463      	str	r3, [r4, #68]	@ 0x44
  hspi->RxXferSize  = Size;
 800369a:	87a6      	strh	r6, [r4, #60]	@ 0x3c
    SPI_RESET_CRC(hspi);
 800369c:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800369e:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80036a0:	86e6      	strh	r6, [r4, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80036a2:	86a6      	strh	r6, [r4, #52]	@ 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036a4:	0180      	lsls	r0, r0, #6
 80036a6:	4282      	cmp	r2, r0
 80036a8:	d106      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0xa4>
    SPI_RESET_CRC(hspi);
 80036aa:	6818      	ldr	r0, [r3, #0]
 80036ac:	4f7a      	ldr	r7, [pc, #488]	@ (8003898 <HAL_SPI_TransmitReceive+0x284>)
 80036ae:	4038      	ands	r0, r7
 80036b0:	6018      	str	r0, [r3, #0]
 80036b2:	6818      	ldr	r0, [r3, #0]
 80036b4:	4302      	orrs	r2, r0
 80036b6:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036b8:	2240      	movs	r2, #64	@ 0x40
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	4210      	tst	r0, r2
 80036be:	d102      	bne.n	80036c6 <HAL_SPI_TransmitReceive+0xb2>
    __HAL_SPI_ENABLE(hspi);
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	4302      	orrs	r2, r0
 80036c4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036c6:	2280      	movs	r2, #128	@ 0x80
 80036c8:	68e0      	ldr	r0, [r4, #12]
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	4290      	cmp	r0, r2
 80036ce:	d167      	bne.n	80037a0 <HAL_SPI_TransmitReceive+0x18c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d0:	2900      	cmp	r1, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_SPI_TransmitReceive+0xc4>
 80036d4:	2e01      	cmp	r6, #1
 80036d6:	d107      	bne.n	80036e8 <HAL_SPI_TransmitReceive+0xd4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036d8:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036da:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036dc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80036de:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036e0:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80036e8:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ea:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036ec:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ee:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d118      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x112>
 80036f4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d115      	bne.n	8003726 <HAL_SPI_TransmitReceive+0x112>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036fa:	2380      	movs	r3, #128	@ 0x80
 80036fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80036fe:	019b      	lsls	r3, r3, #6
 8003700:	429a      	cmp	r2, r3
 8003702:	d000      	beq.n	8003706 <HAL_SPI_TransmitReceive+0xf2>
 8003704:	e0a5      	b.n	8003852 <HAL_SPI_TransmitReceive+0x23e>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003706:	2201      	movs	r2, #1
 8003708:	9b02      	ldr	r3, [sp, #8]
 800370a:	0011      	movs	r1, r2
 800370c:	9300      	str	r3, [sp, #0]
 800370e:	0020      	movs	r0, r4
 8003710:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003712:	f7ff fe7f 	bl	8003414 <SPI_WaitFlagStateUntilTimeout>
 8003716:	2800      	cmp	r0, #0
 8003718:	d100      	bne.n	800371c <HAL_SPI_TransmitReceive+0x108>
 800371a:	e098      	b.n	800384e <HAL_SPI_TransmitReceive+0x23a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800371c:	2302      	movs	r3, #2
 800371e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003720:	4313      	orrs	r3, r2
 8003722:	6563      	str	r3, [r4, #84]	@ 0x54
      goto error;
 8003724:	e03a      	b.n	800379c <HAL_SPI_TransmitReceive+0x188>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	423a      	tst	r2, r7
 800372c:	d01b      	beq.n	8003766 <HAL_SPI_TransmitReceive+0x152>
 800372e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003730:	2a00      	cmp	r2, #0
 8003732:	d018      	beq.n	8003766 <HAL_SPI_TransmitReceive+0x152>
 8003734:	2d01      	cmp	r5, #1
 8003736:	d115      	bne.n	8003764 <HAL_SPI_TransmitReceive+0x150>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003738:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800373a:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800373c:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800373e:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003740:	6322      	str	r2, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003742:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8003744:	3a01      	subs	r2, #1
 8003746:	b292      	uxth	r2, r2
 8003748:	86e2      	strh	r2, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800374a:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 800374c:	2a00      	cmp	r2, #0
 800374e:	d109      	bne.n	8003764 <HAL_SPI_TransmitReceive+0x150>
 8003750:	2280      	movs	r2, #128	@ 0x80
 8003752:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003754:	0192      	lsls	r2, r2, #6
 8003756:	4291      	cmp	r1, r2
 8003758:	d104      	bne.n	8003764 <HAL_SPI_TransmitReceive+0x150>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800375a:	2280      	movs	r2, #128	@ 0x80
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	0152      	lsls	r2, r2, #5
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
        txallowed = 0U;
 8003764:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003766:	6899      	ldr	r1, [r3, #8]
 8003768:	000a      	movs	r2, r1
 800376a:	4032      	ands	r2, r6
 800376c:	4231      	tst	r1, r6
 800376e:	d00c      	beq.n	800378a <HAL_SPI_TransmitReceive+0x176>
 8003770:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8003772:	2900      	cmp	r1, #0
 8003774:	d009      	beq.n	800378a <HAL_SPI_TransmitReceive+0x176>
        txallowed = 1U;
 8003776:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003778:	68d9      	ldr	r1, [r3, #12]
 800377a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800377c:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800377e:	3302      	adds	r3, #2
 8003780:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003782:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003784:	3b01      	subs	r3, #1
 8003786:	b29b      	uxth	r3, r3
 8003788:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800378a:	f7fd fde3 	bl	8001354 <HAL_GetTick>
 800378e:	9b02      	ldr	r3, [sp, #8]
 8003790:	1ac0      	subs	r0, r0, r3
 8003792:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003794:	4298      	cmp	r0, r3
 8003796:	d3aa      	bcc.n	80036ee <HAL_SPI_TransmitReceive+0xda>
 8003798:	3301      	adds	r3, #1
 800379a:	d0a8      	beq.n	80036ee <HAL_SPI_TransmitReceive+0xda>
        errorcode = HAL_TIMEOUT;
 800379c:	2703      	movs	r7, #3
 800379e:	e760      	b.n	8003662 <HAL_SPI_TransmitReceive+0x4e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037a0:	2900      	cmp	r1, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_SPI_TransmitReceive+0x194>
 80037a4:	2e01      	cmp	r6, #1
 80037a6:	d108      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x1a6>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a8:	782a      	ldrb	r2, [r5, #0]
 80037aa:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037ac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80037ae:	3301      	adds	r3, #1
 80037b0:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 80037b2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 80037ba:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037bc:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037be:	002e      	movs	r6, r5
 80037c0:	e03e      	b.n	8003840 <HAL_SPI_TransmitReceive+0x22c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	423a      	tst	r2, r7
 80037c8:	d01d      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x1f2>
 80037ca:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	d01a      	beq.n	8003806 <HAL_SPI_TransmitReceive+0x1f2>
 80037d0:	2d01      	cmp	r5, #1
 80037d2:	d117      	bne.n	8003804 <HAL_SPI_TransmitReceive+0x1f0>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037d4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80037d6:	7812      	ldrb	r2, [r2, #0]
 80037d8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80037da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80037dc:	3301      	adds	r3, #1
 80037de:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 80037e0:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	86e3      	strh	r3, [r4, #54]	@ 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80037e8:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <HAL_SPI_TransmitReceive+0x1f0>
 80037ee:	2380      	movs	r3, #128	@ 0x80
 80037f0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80037f2:	6822      	ldr	r2, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80037f4:	019b      	lsls	r3, r3, #6
 80037f6:	4299      	cmp	r1, r3
 80037f8:	d104      	bne.n	8003804 <HAL_SPI_TransmitReceive+0x1f0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80037fa:	2380      	movs	r3, #128	@ 0x80
 80037fc:	6811      	ldr	r1, [r2, #0]
 80037fe:	015b      	lsls	r3, r3, #5
 8003800:	430b      	orrs	r3, r1
 8003802:	6013      	str	r3, [r2, #0]
        txallowed = 0U;
 8003804:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	6899      	ldr	r1, [r3, #8]
 800380a:	000a      	movs	r2, r1
 800380c:	4032      	ands	r2, r6
 800380e:	4231      	tst	r1, r6
 8003810:	d00d      	beq.n	800382e <HAL_SPI_TransmitReceive+0x21a>
 8003812:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8003814:	2900      	cmp	r1, #0
 8003816:	d00a      	beq.n	800382e <HAL_SPI_TransmitReceive+0x21a>
        txallowed = 1U;
 8003818:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800381a:	68d9      	ldr	r1, [r3, #12]
 800381c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800381e:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 8003820:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003822:	3301      	adds	r3, #1
 8003824:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003826:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003828:	3b01      	subs	r3, #1
 800382a:	b29b      	uxth	r3, r3
 800382c:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800382e:	f7fd fd91 	bl	8001354 <HAL_GetTick>
 8003832:	9b02      	ldr	r3, [sp, #8]
 8003834:	1ac0      	subs	r0, r0, r3
 8003836:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003838:	4298      	cmp	r0, r3
 800383a:	d301      	bcc.n	8003840 <HAL_SPI_TransmitReceive+0x22c>
 800383c:	3301      	adds	r3, #1
 800383e:	d1ad      	bne.n	800379c <HAL_SPI_TransmitReceive+0x188>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003840:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1bd      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x1ae>
 8003846:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ba      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x1ae>
 800384c:	e755      	b.n	80036fa <HAL_SPI_TransmitReceive+0xe6>
    READ_REG(hspi->Instance->DR);
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003852:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003854:	2700      	movs	r7, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8003856:	6893      	ldr	r3, [r2, #8]
 8003858:	06db      	lsls	r3, r3, #27
 800385a:	d506      	bpl.n	800386a <HAL_SPI_TransmitReceive+0x256>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800385c:	2302      	movs	r3, #2
 800385e:	6d61      	ldr	r1, [r4, #84]	@ 0x54
    errorcode = HAL_ERROR;
 8003860:	3701      	adds	r7, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003862:	430b      	orrs	r3, r1
 8003864:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003866:	4b0d      	ldr	r3, [pc, #52]	@ (800389c <HAL_SPI_TransmitReceive+0x288>)
 8003868:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800386a:	0020      	movs	r0, r4
 800386c:	9a02      	ldr	r2, [sp, #8]
 800386e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8003870:	f7ff fe32 	bl	80034d8 <SPI_EndRxTxTransaction>
 8003874:	2800      	cmp	r0, #0
 8003876:	d002      	beq.n	800387e <HAL_SPI_TransmitReceive+0x26a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003878:	2320      	movs	r3, #32
 800387a:	6563      	str	r3, [r4, #84]	@ 0x54
    goto error;
 800387c:	e6f0      	b.n	8003660 <HAL_SPI_TransmitReceive+0x4c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800387e:	68a3      	ldr	r3, [r4, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d000      	beq.n	8003886 <HAL_SPI_TransmitReceive+0x272>
 8003884:	e6ed      	b.n	8003662 <HAL_SPI_TransmitReceive+0x4e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003886:	9305      	str	r3, [sp, #20]
 8003888:	6823      	ldr	r3, [r4, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	9205      	str	r2, [sp, #20]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	9305      	str	r3, [sp, #20]
 8003892:	9b05      	ldr	r3, [sp, #20]
 8003894:	e6e5      	b.n	8003662 <HAL_SPI_TransmitReceive+0x4e>
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	ffffdfff 	.word	0xffffdfff
 800389c:	0000ffef 	.word	0x0000ffef

080038a0 <HAL_SPI_GetState>:
  return hspi->State;
 80038a0:	3051      	adds	r0, #81	@ 0x51
 80038a2:	7800      	ldrb	r0, [r0, #0]
 80038a4:	b2c0      	uxtb	r0, r0
}
 80038a6:	4770      	bx	lr

080038a8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038a8:	6803      	ldr	r3, [r0, #0]
 80038aa:	490b      	ldr	r1, [pc, #44]	@ (80038d8 <UART_EndRxTransfer+0x30>)
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	400a      	ands	r2, r1
 80038b0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	3123      	adds	r1, #35	@ 0x23
 80038b6:	31ff      	adds	r1, #255	@ 0xff
 80038b8:	438a      	bics	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038bc:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80038be:	428a      	cmp	r2, r1
 80038c0:	d103      	bne.n	80038ca <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	310f      	adds	r1, #15
 80038c6:	438a      	bics	r2, r1
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ca:	2320      	movs	r3, #32
 80038cc:	67c3      	str	r3, [r0, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	2300      	movs	r3, #0
 80038d0:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038d2:	6643      	str	r3, [r0, #100]	@ 0x64
}
 80038d4:	4770      	bx	lr
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	fffffedf 	.word	0xfffffedf

080038dc <HAL_UART_Transmit_DMA>:
{
 80038dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038de:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80038e0:	6f82      	ldr	r2, [r0, #120]	@ 0x78
{
 80038e2:	0004      	movs	r4, r0
    __HAL_LOCK(huart);
 80038e4:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80038e6:	2a20      	cmp	r2, #32
 80038e8:	d104      	bne.n	80038f4 <HAL_UART_Transmit_DMA+0x18>
    if ((pData == NULL) || (Size == 0U))
 80038ea:	2900      	cmp	r1, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_UART_Transmit_DMA+0x16>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 80038f2:	2001      	movs	r0, #1
}
 80038f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f6:	2280      	movs	r2, #128	@ 0x80
 80038f8:	68a0      	ldr	r0, [r4, #8]
 80038fa:	0152      	lsls	r2, r2, #5
 80038fc:	4290      	cmp	r0, r2
 80038fe:	d104      	bne.n	800390a <HAL_UART_Transmit_DMA+0x2e>
 8003900:	6922      	ldr	r2, [r4, #16]
 8003902:	2a00      	cmp	r2, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Transmit_DMA+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003906:	07ca      	lsls	r2, r1, #31
 8003908:	d4f3      	bmi.n	80038f2 <HAL_UART_Transmit_DMA+0x16>
    __HAL_LOCK(huart);
 800390a:	0025      	movs	r5, r4
 800390c:	3574      	adds	r5, #116	@ 0x74
 800390e:	782a      	ldrb	r2, [r5, #0]
 8003910:	2002      	movs	r0, #2
 8003912:	2a01      	cmp	r2, #1
 8003914:	d0ee      	beq.n	80038f4 <HAL_UART_Transmit_DMA+0x18>
 8003916:	2201      	movs	r2, #1
 8003918:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 800391a:	0022      	movs	r2, r4
 800391c:	3250      	adds	r2, #80	@ 0x50
    huart->pTxBuffPtr  = pData;
 800391e:	64e1      	str	r1, [r4, #76]	@ 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8003922:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8003924:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003926:	2221      	movs	r2, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	1d27      	adds	r7, r4, #4
 800392a:	67fe      	str	r6, [r7, #124]	@ 0x7c
    if (huart->hdmatx != NULL)
 800392c:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800392e:	67a2      	str	r2, [r4, #120]	@ 0x78
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003930:	6822      	ldr	r2, [r4, #0]
 8003932:	9201      	str	r2, [sp, #4]
    if (huart->hdmatx != NULL)
 8003934:	42b0      	cmp	r0, r6
 8003936:	d012      	beq.n	800395e <HAL_UART_Transmit_DMA+0x82>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003938:	4a0e      	ldr	r2, [pc, #56]	@ (8003974 <HAL_UART_Transmit_DMA+0x98>)
      huart->hdmatx->XferAbortCallback = NULL;
 800393a:	6386      	str	r6, [r0, #56]	@ 0x38
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800393c:	62c2      	str	r2, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800393e:	4a0e      	ldr	r2, [pc, #56]	@ (8003978 <HAL_UART_Transmit_DMA+0x9c>)
 8003940:	6302      	str	r2, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003942:	4a0e      	ldr	r2, [pc, #56]	@ (800397c <HAL_UART_Transmit_DMA+0xa0>)
 8003944:	6342      	str	r2, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003946:	9a01      	ldr	r2, [sp, #4]
 8003948:	3228      	adds	r2, #40	@ 0x28
 800394a:	f7fe fa9d 	bl	8001e88 <HAL_DMA_Start_IT>
 800394e:	42b0      	cmp	r0, r6
 8003950:	d005      	beq.n	800395e <HAL_UART_Transmit_DMA+0x82>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003952:	2310      	movs	r3, #16
 8003954:	67fb      	str	r3, [r7, #124]	@ 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8003956:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8003958:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 800395a:	67a3      	str	r3, [r4, #120]	@ 0x78
        return HAL_ERROR;
 800395c:	e7c9      	b.n	80038f2 <HAL_UART_Transmit_DMA+0x16>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800395e:	2240      	movs	r2, #64	@ 0x40
    __HAL_UNLOCK(huart);
 8003960:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003962:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8003964:	3474      	adds	r4, #116	@ 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003966:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8003968:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800396a:	6899      	ldr	r1, [r3, #8]
 800396c:	1892      	adds	r2, r2, r2
 800396e:	430a      	orrs	r2, r1
 8003970:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8003972:	e7bf      	b.n	80038f4 <HAL_UART_Transmit_DMA+0x18>
 8003974:	08003981 	.word	0x08003981
 8003978:	080039b7 	.word	0x080039b7
 800397c:	080039c3 	.word	0x080039c3

08003980 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003980:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003982:	681b      	ldr	r3, [r3, #0]
{
 8003984:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	2320      	movs	r3, #32
 800398a:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800398c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800398e:	4019      	ands	r1, r3
 8003990:	421a      	tst	r2, r3
 8003992:	d10c      	bne.n	80039ae <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8003994:	0003      	movs	r3, r0
 8003996:	3352      	adds	r3, #82	@ 0x52
 8003998:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800399a:	2180      	movs	r1, #128	@ 0x80
 800399c:	6803      	ldr	r3, [r0, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	438a      	bics	r2, r1
 80039a2:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039a4:	2240      	movs	r2, #64	@ 0x40
 80039a6:	6819      	ldr	r1, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80039ac:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80039ae:	f7fd fe2b 	bl	8001608 <HAL_UART_TxCpltCallback>
}
 80039b2:	e7fb      	b.n	80039ac <UART_DMATransmitCplt+0x2c>

080039b4 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 80039b4:	4770      	bx	lr

080039b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80039b6:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80039b8:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80039ba:	f7ff fffb 	bl	80039b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039be:	bd10      	pop	{r4, pc}

080039c0 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 80039c0:	4770      	bx	lr

080039c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80039c2:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039c4:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80039c6:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80039c8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80039ca:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	0612      	lsls	r2, r2, #24
 80039d0:	d50b      	bpl.n	80039ea <UART_DMAError+0x28>
 80039d2:	2821      	cmp	r0, #33	@ 0x21
 80039d4:	d109      	bne.n	80039ea <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80039d6:	0022      	movs	r2, r4
 80039d8:	2000      	movs	r0, #0
 80039da:	3252      	adds	r2, #82	@ 0x52
 80039dc:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	30c0      	adds	r0, #192	@ 0xc0
 80039e2:	4382      	bics	r2, r0
 80039e4:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80039e6:	2220      	movs	r2, #32
 80039e8:	67a2      	str	r2, [r4, #120]	@ 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	065b      	lsls	r3, r3, #25
 80039ee:	d508      	bpl.n	8003a02 <UART_DMAError+0x40>
 80039f0:	2922      	cmp	r1, #34	@ 0x22
 80039f2:	d106      	bne.n	8003a02 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80039f4:	0023      	movs	r3, r4
 80039f6:	2200      	movs	r2, #0
 80039f8:	335a      	adds	r3, #90	@ 0x5a
    UART_EndRxTransfer(huart);
 80039fa:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80039fc:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 80039fe:	f7ff ff53 	bl	80038a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a02:	2310      	movs	r3, #16
 8003a04:	1d22      	adds	r2, r4, #4
 8003a06:	6fd1      	ldr	r1, [r2, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a08:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	67d3      	str	r3, [r2, #124]	@ 0x7c
  HAL_UART_ErrorCallback(huart);
 8003a0e:	f7ff ffd7 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a12:	bd10      	pop	{r4, pc}

08003a14 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a14:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	0002      	movs	r2, r0
{
 8003a1a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8003a1c:	325a      	adds	r2, #90	@ 0x5a
 8003a1e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003a20:	3a08      	subs	r2, #8
 8003a22:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a24:	f7ff ffcc 	bl	80039c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a28:	bd10      	pop	{r4, pc}

08003a2a <HAL_UARTEx_RxEventCallback>:
}
 8003a2a:	4770      	bx	lr

08003a2c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a2c:	6803      	ldr	r3, [r0, #0]
{
 8003a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a30:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a32:	4a85      	ldr	r2, [pc, #532]	@ (8003c48 <HAL_UART_IRQHandler+0x21c>)
{
 8003a34:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a36:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a38:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8003a3a:	4211      	tst	r1, r2
 8003a3c:	d10b      	bne.n	8003a56 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a3e:	2220      	movs	r2, #32
 8003a40:	4211      	tst	r1, r2
 8003a42:	d100      	bne.n	8003a46 <HAL_UART_IRQHandler+0x1a>
 8003a44:	e076      	b.n	8003b34 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a46:	4210      	tst	r0, r2
 8003a48:	d100      	bne.n	8003a4c <HAL_UART_IRQHandler+0x20>
 8003a4a:	e073      	b.n	8003b34 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8003a4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
      huart->TxISR(huart);
 8003a4e:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d165      	bne.n	8003b20 <HAL_UART_IRQHandler+0xf4>
 8003a54:	e065      	b.n	8003b22 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a56:	2201      	movs	r2, #1
 8003a58:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a5a:	4d7c      	ldr	r5, [pc, #496]	@ (8003c4c <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a5c:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a5e:	4005      	ands	r5, r0
 8003a60:	433d      	orrs	r5, r7
 8003a62:	d067      	beq.n	8003b34 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a64:	1d25      	adds	r5, r4, #4
 8003a66:	4211      	tst	r1, r2
 8003a68:	d005      	beq.n	8003a76 <HAL_UART_IRQHandler+0x4a>
 8003a6a:	05c6      	lsls	r6, r0, #23
 8003a6c:	d503      	bpl.n	8003a76 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003a6e:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a70:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8003a72:	4332      	orrs	r2, r6
 8003a74:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a76:	2202      	movs	r2, #2
 8003a78:	4211      	tst	r1, r2
 8003a7a:	d006      	beq.n	8003a8a <HAL_UART_IRQHandler+0x5e>
 8003a7c:	2f00      	cmp	r7, #0
 8003a7e:	d004      	beq.n	8003a8a <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003a80:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a82:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8003a84:	1892      	adds	r2, r2, r2
 8003a86:	4332      	orrs	r2, r6
 8003a88:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	4211      	tst	r1, r2
 8003a8e:	d006      	beq.n	8003a9e <HAL_UART_IRQHandler+0x72>
 8003a90:	2f00      	cmp	r7, #0
 8003a92:	d004      	beq.n	8003a9e <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003a94:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a96:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8003a98:	3a02      	subs	r2, #2
 8003a9a:	4332      	orrs	r2, r6
 8003a9c:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	4211      	tst	r1, r2
 8003aa2:	d007      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003aa4:	2620      	movs	r6, #32
 8003aa6:	4006      	ands	r6, r0
 8003aa8:	433e      	orrs	r6, r7
 8003aaa:	d003      	beq.n	8003ab4 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aac:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aae:	6fee      	ldr	r6, [r5, #124]	@ 0x7c
 8003ab0:	4332      	orrs	r2, r6
 8003ab2:	67ea      	str	r2, [r5, #124]	@ 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003ab4:	2280      	movs	r2, #128	@ 0x80
 8003ab6:	0112      	lsls	r2, r2, #4
 8003ab8:	4211      	tst	r1, r2
 8003aba:	d006      	beq.n	8003aca <HAL_UART_IRQHandler+0x9e>
 8003abc:	0146      	lsls	r6, r0, #5
 8003abe:	d504      	bpl.n	8003aca <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ac0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003ac2:	2320      	movs	r3, #32
 8003ac4:	6fea      	ldr	r2, [r5, #124]	@ 0x7c
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	67eb      	str	r3, [r5, #124]	@ 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aca:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d028      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	4219      	tst	r1, r3
 8003ad4:	d006      	beq.n	8003ae4 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ad6:	4218      	tst	r0, r3
 8003ad8:	d004      	beq.n	8003ae4 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8003ada:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8003ae0:	0020      	movs	r0, r4
 8003ae2:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003ae4:	2240      	movs	r2, #64	@ 0x40
 8003ae6:	6827      	ldr	r7, [r4, #0]
      errorcode = huart->ErrorCode;
 8003ae8:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aea:	68be      	ldr	r6, [r7, #8]
        UART_EndRxTransfer(huart);
 8003aec:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003aee:	4016      	ands	r6, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003af0:	3a18      	subs	r2, #24
 8003af2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003af4:	431e      	orrs	r6, r3
 8003af6:	d019      	beq.n	8003b2c <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8003af8:	f7ff fed6 	bl	80038a8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afc:	2240      	movs	r2, #64	@ 0x40
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4213      	tst	r3, r2
 8003b02:	d00f      	beq.n	8003b24 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b04:	68bb      	ldr	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 8003b06:	6f20      	ldr	r0, [r4, #112]	@ 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b08:	4393      	bics	r3, r2
 8003b0a:	60bb      	str	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d009      	beq.n	8003b24 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b10:	4b4f      	ldr	r3, [pc, #316]	@ (8003c50 <HAL_UART_IRQHandler+0x224>)
 8003b12:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b14:	f7fe fa16 	bl	8001f44 <HAL_DMA_Abort_IT>
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b1c:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8003b1e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003b20:	4798      	blx	r3
}
 8003b22:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003b24:	0020      	movs	r0, r4
 8003b26:	f7ff ff4b 	bl	80039c0 <HAL_UART_ErrorCallback>
 8003b2a:	e7fa      	b.n	8003b22 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8003b2c:	f7ff ff48 	bl	80039c0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b30:	67ee      	str	r6, [r5, #124]	@ 0x7c
 8003b32:	e7f6      	b.n	8003b22 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b34:	6e25      	ldr	r5, [r4, #96]	@ 0x60
 8003b36:	2d01      	cmp	r5, #1
 8003b38:	d161      	bne.n	8003bfe <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	4211      	tst	r1, r2
 8003b3e:	d05e      	beq.n	8003bfe <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003b40:	4210      	tst	r0, r2
 8003b42:	d05c      	beq.n	8003bfe <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b44:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b46:	6899      	ldr	r1, [r3, #8]
 8003b48:	2640      	movs	r6, #64	@ 0x40
 8003b4a:	000f      	movs	r7, r1
 8003b4c:	4037      	ands	r7, r6
 8003b4e:	4231      	tst	r1, r6
 8003b50:	d038      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b52:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003b54:	680f      	ldr	r7, [r1, #0]
 8003b56:	9100      	str	r1, [sp, #0]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8003b5c:	2900      	cmp	r1, #0
 8003b5e:	d0e0      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b60:	2058      	movs	r0, #88	@ 0x58
 8003b62:	4684      	mov	ip, r0
 8003b64:	44a4      	add	ip, r4
 8003b66:	4660      	mov	r0, ip
 8003b68:	8800      	ldrh	r0, [r0, #0]
 8003b6a:	4288      	cmp	r0, r1
 8003b6c:	d9d9      	bls.n	8003b22 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8003b6e:	205a      	movs	r0, #90	@ 0x5a
 8003b70:	4684      	mov	ip, r0
 8003b72:	44a4      	add	ip, r4
 8003b74:	4660      	mov	r0, ip
 8003b76:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b78:	683f      	ldr	r7, [r7, #0]
 8003b7a:	2120      	movs	r1, #32
 8003b7c:	0038      	movs	r0, r7
 8003b7e:	4008      	ands	r0, r1
 8003b80:	9001      	str	r0, [sp, #4]
 8003b82:	420f      	tst	r7, r1
 8003b84:	d112      	bne.n	8003bac <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b86:	681f      	ldr	r7, [r3, #0]
 8003b88:	4832      	ldr	r0, [pc, #200]	@ (8003c54 <HAL_UART_IRQHandler+0x228>)
 8003b8a:	4007      	ands	r7, r0
 8003b8c:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8e:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b90:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b92:	43af      	bics	r7, r5
 8003b94:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b96:	689d      	ldr	r5, [r3, #8]
 8003b98:	43b5      	bics	r5, r6
 8003b9a:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8003b9c:	67e1      	str	r1, [r4, #124]	@ 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	9901      	ldr	r1, [sp, #4]
 8003ba0:	6621      	str	r1, [r4, #96]	@ 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ba2:	6819      	ldr	r1, [r3, #0]
 8003ba4:	4391      	bics	r1, r2
 8003ba6:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ba8:	f7fe f9ac 	bl	8001f04 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bac:	0023      	movs	r3, r4
 8003bae:	0022      	movs	r2, r4
 8003bb0:	335a      	adds	r3, #90	@ 0x5a
 8003bb2:	3258      	adds	r2, #88	@ 0x58
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	8811      	ldrh	r1, [r2, #0]
 8003bb8:	1ac9      	subs	r1, r1, r3
 8003bba:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bbc:	0020      	movs	r0, r4
 8003bbe:	f7ff ff34 	bl	8003a2a <HAL_UARTEx_RxEventCallback>
 8003bc2:	e7ae      	b.n	8003b22 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bc4:	0026      	movs	r6, r4
 8003bc6:	0021      	movs	r1, r4
 8003bc8:	365a      	adds	r6, #90	@ 0x5a
 8003bca:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8003bcc:	8836      	ldrh	r6, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bce:	3158      	adds	r1, #88	@ 0x58
 8003bd0:	8809      	ldrh	r1, [r1, #0]
 8003bd2:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8003bd4:	2e00      	cmp	r6, #0
 8003bd6:	d0a4      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bd8:	1a09      	subs	r1, r1, r0
 8003bda:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	d0a0      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	4e1d      	ldr	r6, [pc, #116]	@ (8003c58 <HAL_UART_IRQHandler+0x22c>)
 8003be4:	4030      	ands	r0, r6
 8003be6:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be8:	6898      	ldr	r0, [r3, #8]
 8003bea:	43a8      	bics	r0, r5
 8003bec:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8003bee:	2020      	movs	r0, #32
 8003bf0:	67e0      	str	r0, [r4, #124]	@ 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf2:	6627      	str	r7, [r4, #96]	@ 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf4:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 8003bf6:	6667      	str	r7, [r4, #100]	@ 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf8:	4390      	bics	r0, r2
 8003bfa:	6018      	str	r0, [r3, #0]
 8003bfc:	e7de      	b.n	8003bbc <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003bfe:	2280      	movs	r2, #128	@ 0x80
 8003c00:	0352      	lsls	r2, r2, #13
 8003c02:	4211      	tst	r1, r2
 8003c04:	d006      	beq.n	8003c14 <HAL_UART_IRQHandler+0x1e8>
 8003c06:	0276      	lsls	r6, r6, #9
 8003c08:	d504      	bpl.n	8003c14 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8003c0a:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003c0c:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003c0e:	f000 fb49 	bl	80042a4 <HAL_UARTEx_WakeupCallback>
    return;
 8003c12:	e786      	b.n	8003b22 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c14:	2280      	movs	r2, #128	@ 0x80
 8003c16:	4211      	tst	r1, r2
 8003c18:	d003      	beq.n	8003c22 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c1a:	4210      	tst	r0, r2
 8003c1c:	d001      	beq.n	8003c22 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8003c1e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8003c20:	e715      	b.n	8003a4e <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003c22:	2540      	movs	r5, #64	@ 0x40
 8003c24:	4229      	tst	r1, r5
 8003c26:	d100      	bne.n	8003c2a <HAL_UART_IRQHandler+0x1fe>
 8003c28:	e77b      	b.n	8003b22 <HAL_UART_IRQHandler+0xf6>
 8003c2a:	4228      	tst	r0, r5
 8003c2c:	d100      	bne.n	8003c30 <HAL_UART_IRQHandler+0x204>
 8003c2e:	e778      	b.n	8003b22 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c30:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c32:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c34:	43aa      	bics	r2, r5
 8003c36:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003c38:	2320      	movs	r3, #32
 8003c3a:	67a3      	str	r3, [r4, #120]	@ 0x78
  huart->TxISR = NULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	66a3      	str	r3, [r4, #104]	@ 0x68
  HAL_UART_TxCpltCallback(huart);
 8003c40:	f7fd fce2 	bl	8001608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c44:	e76d      	b.n	8003b22 <HAL_UART_IRQHandler+0xf6>
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	0000080f 	.word	0x0000080f
 8003c4c:	04000120 	.word	0x04000120
 8003c50:	08003a15 	.word	0x08003a15
 8003c54:	fffffeff 	.word	0xfffffeff
 8003c58:	fffffedf 	.word	0xfffffedf

08003c5c <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 8003c5c:	0003      	movs	r3, r0
{
 8003c5e:	b510      	push	{r4, lr}
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c60:	6fc1      	ldr	r1, [r0, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 8003c62:	335c      	adds	r3, #92	@ 0x5c
 8003c64:	881a      	ldrh	r2, [r3, #0]
{
 8003c66:	0004      	movs	r4, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c68:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c6a:	2922      	cmp	r1, #34	@ 0x22
 8003c6c:	d131      	bne.n	8003cd2 <UART_RxISR_8BIT+0x76>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c70:	6d41      	ldr	r1, [r0, #84]	@ 0x54
 8003c72:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8003c74:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003c76:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 8003c78:	6d43      	ldr	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8003c7a:	325a      	adds	r2, #90	@ 0x5a
    huart->pRxBuffPtr++;
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	6543      	str	r3, [r0, #84]	@ 0x54
    huart->RxXferCount--;
 8003c80:	8813      	ldrh	r3, [r2, #0]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8003c88:	8813      	ldrh	r3, [r2, #0]
 8003c8a:	b299      	uxth	r1, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d11b      	bne.n	8003cc8 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c90:	6803      	ldr	r3, [r0, #0]
 8003c92:	4812      	ldr	r0, [pc, #72]	@ (8003cdc <UART_RxISR_8BIT+0x80>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4002      	ands	r2, r0
 8003c98:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	3023      	adds	r0, #35	@ 0x23
 8003c9e:	30ff      	adds	r0, #255	@ 0xff
 8003ca0:	4382      	bics	r2, r0
 8003ca2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	67e2      	str	r2, [r4, #124]	@ 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      huart->RxISR = NULL;
 8003caa:	6661      	str	r1, [r4, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cac:	4282      	cmp	r2, r0
 8003cae:	d10c      	bne.n	8003cca <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb0:	2110      	movs	r1, #16
 8003cb2:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cb4:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb6:	438a      	bics	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cba:	0023      	movs	r3, r4
 8003cbc:	3358      	adds	r3, #88	@ 0x58
 8003cbe:	8819      	ldrh	r1, [r3, #0]
 8003cc0:	f7ff feb3 	bl	8003a2a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6623      	str	r3, [r4, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cc8:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8003cca:	0020      	movs	r0, r4
 8003ccc:	f7fd fca4 	bl	8001618 <HAL_UART_RxCpltCallback>
 8003cd0:	e7f8      	b.n	8003cc4 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	6999      	ldr	r1, [r3, #24]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	619a      	str	r2, [r3, #24]
}
 8003cda:	e7f5      	b.n	8003cc8 <UART_RxISR_8BIT+0x6c>
 8003cdc:	fffffedf 	.word	0xfffffedf

08003ce0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ce0:	b510      	push	{r4, lr}
 8003ce2:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ce4:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ce6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
  uint16_t uhMask = huart->Mask;
 8003ce8:	335c      	adds	r3, #92	@ 0x5c
 8003cea:	8818      	ldrh	r0, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cec:	6823      	ldr	r3, [r4, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cee:	2a22      	cmp	r2, #34	@ 0x22
 8003cf0:	d12f      	bne.n	8003d52 <UART_RxISR_16BIT+0x72>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003cf2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003cf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8003cf6:	4001      	ands	r1, r0
 8003cf8:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8003cfa:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8003cfc:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8003cfe:	315a      	adds	r1, #90	@ 0x5a
    huart->pRxBuffPtr += 2U;
 8003d00:	6562      	str	r2, [r4, #84]	@ 0x54
    huart->RxXferCount--;
 8003d02:	880a      	ldrh	r2, [r1, #0]
 8003d04:	3a01      	subs	r2, #1
 8003d06:	b292      	uxth	r2, r2
 8003d08:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8003d0a:	880a      	ldrh	r2, [r1, #0]
 8003d0c:	b291      	uxth	r1, r2
 8003d0e:	2a00      	cmp	r2, #0
 8003d10:	d11a      	bne.n	8003d48 <UART_RxISR_16BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4811      	ldr	r0, [pc, #68]	@ (8003d5c <UART_RxISR_16BIT+0x7c>)
 8003d16:	4002      	ands	r2, r0
 8003d18:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	3023      	adds	r0, #35	@ 0x23
 8003d1e:	30ff      	adds	r0, #255	@ 0xff
 8003d20:	4382      	bics	r2, r0
 8003d22:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d24:	2220      	movs	r2, #32
 8003d26:	67e2      	str	r2, [r4, #124]	@ 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d28:	6e22      	ldr	r2, [r4, #96]	@ 0x60
      huart->RxISR = NULL;
 8003d2a:	6661      	str	r1, [r4, #100]	@ 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	4282      	cmp	r2, r0
 8003d2e:	d10c      	bne.n	8003d4a <UART_RxISR_16BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d30:	2110      	movs	r1, #16
 8003d32:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d34:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d36:	438a      	bics	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d3a:	0023      	movs	r3, r4
 8003d3c:	3358      	adds	r3, #88	@ 0x58
 8003d3e:	8819      	ldrh	r1, [r3, #0]
 8003d40:	f7ff fe73 	bl	8003a2a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d44:	2300      	movs	r3, #0
 8003d46:	6623      	str	r3, [r4, #96]	@ 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d48:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8003d4a:	0020      	movs	r0, r4
 8003d4c:	f7fd fc64 	bl	8001618 <HAL_UART_RxCpltCallback>
 8003d50:	e7f8      	b.n	8003d44 <UART_RxISR_16BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d52:	2208      	movs	r2, #8
 8003d54:	6999      	ldr	r1, [r3, #24]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	619a      	str	r2, [r3, #24]
}
 8003d5a:	e7f5      	b.n	8003d48 <UART_RxISR_16BIT+0x68>
 8003d5c:	fffffedf 	.word	0xfffffedf

08003d60 <UART_SetConfig>:
{
 8003d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d62:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d64:	6925      	ldr	r5, [r4, #16]
 8003d66:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d68:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d6a:	4329      	orrs	r1, r5
 8003d6c:	6965      	ldr	r5, [r4, #20]
 8003d6e:	69c3      	ldr	r3, [r0, #28]
 8003d70:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d72:	6810      	ldr	r0, [r2, #0]
 8003d74:	4d73      	ldr	r5, [pc, #460]	@ (8003f44 <UART_SetConfig+0x1e4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d76:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d78:	4028      	ands	r0, r5
 8003d7a:	4301      	orrs	r1, r0
 8003d7c:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d7e:	6851      	ldr	r1, [r2, #4]
 8003d80:	4871      	ldr	r0, [pc, #452]	@ (8003f48 <UART_SetConfig+0x1e8>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d82:	4d72      	ldr	r5, [pc, #456]	@ (8003f4c <UART_SetConfig+0x1ec>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d84:	4001      	ands	r1, r0
 8003d86:	68e0      	ldr	r0, [r4, #12]
 8003d88:	4301      	orrs	r1, r0
 8003d8a:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d8c:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d8e:	42aa      	cmp	r2, r5
 8003d90:	d001      	beq.n	8003d96 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8003d92:	6a21      	ldr	r1, [r4, #32]
 8003d94:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d96:	6891      	ldr	r1, [r2, #8]
 8003d98:	4e6d      	ldr	r6, [pc, #436]	@ (8003f50 <UART_SetConfig+0x1f0>)
 8003d9a:	4031      	ands	r1, r6
 8003d9c:	4301      	orrs	r1, r0
 8003d9e:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003da0:	496c      	ldr	r1, [pc, #432]	@ (8003f54 <UART_SetConfig+0x1f4>)
 8003da2:	428a      	cmp	r2, r1
 8003da4:	d113      	bne.n	8003dce <UART_SetConfig+0x6e>
 8003da6:	2103      	movs	r1, #3
 8003da8:	2080      	movs	r0, #128	@ 0x80
 8003daa:	4a6b      	ldr	r2, [pc, #428]	@ (8003f58 <UART_SetConfig+0x1f8>)
 8003dac:	0200      	lsls	r0, r0, #8
 8003dae:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003db0:	400a      	ands	r2, r1
 8003db2:	2a02      	cmp	r2, #2
 8003db4:	d100      	bne.n	8003db8 <UART_SetConfig+0x58>
 8003db6:	e07d      	b.n	8003eb4 <UART_SetConfig+0x154>
 8003db8:	428a      	cmp	r2, r1
 8003dba:	d01e      	beq.n	8003dfa <UART_SetConfig+0x9a>
 8003dbc:	2a01      	cmp	r2, #1
 8003dbe:	d000      	beq.n	8003dc2 <UART_SetConfig+0x62>
 8003dc0:	e0a4      	b.n	8003f0c <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dc2:	4283      	cmp	r3, r0
 8003dc4:	d100      	bne.n	8003dc8 <UART_SetConfig+0x68>
 8003dc6:	e072      	b.n	8003eae <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc8:	f7fe fb26 	bl	8002418 <HAL_RCC_GetSysClockFreq>
        break;
 8003dcc:	e067      	b.n	8003e9e <UART_SetConfig+0x13e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dce:	4963      	ldr	r1, [pc, #396]	@ (8003f5c <UART_SetConfig+0x1fc>)
 8003dd0:	428a      	cmp	r2, r1
 8003dd2:	d115      	bne.n	8003e00 <UART_SetConfig+0xa0>
 8003dd4:	210c      	movs	r1, #12
 8003dd6:	4a60      	ldr	r2, [pc, #384]	@ (8003f58 <UART_SetConfig+0x1f8>)
 8003dd8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003dda:	400a      	ands	r2, r1
 8003ddc:	2a08      	cmp	r2, #8
 8003dde:	d100      	bne.n	8003de2 <UART_SetConfig+0x82>
 8003de0:	e099      	b.n	8003f16 <UART_SetConfig+0x1b6>
 8003de2:	d806      	bhi.n	8003df2 <UART_SetConfig+0x92>
 8003de4:	2a00      	cmp	r2, #0
 8003de6:	d100      	bne.n	8003dea <UART_SetConfig+0x8a>
 8003de8:	e084      	b.n	8003ef4 <UART_SetConfig+0x194>
 8003dea:	2a04      	cmp	r2, #4
 8003dec:	d05a      	beq.n	8003ea4 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dee:	2001      	movs	r0, #1
 8003df0:	e025      	b.n	8003e3e <UART_SetConfig+0xde>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df2:	2a0c      	cmp	r2, #12
 8003df4:	d1fb      	bne.n	8003dee <UART_SetConfig+0x8e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df6:	2080      	movs	r0, #128	@ 0x80
 8003df8:	0200      	lsls	r0, r0, #8
 8003dfa:	4283      	cmp	r3, r0
 8003dfc:	d064      	beq.n	8003ec8 <UART_SetConfig+0x168>
 8003dfe:	e096      	b.n	8003f2e <UART_SetConfig+0x1ce>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e00:	4957      	ldr	r1, [pc, #348]	@ (8003f60 <UART_SetConfig+0x200>)
 8003e02:	428a      	cmp	r2, r1
 8003e04:	d100      	bne.n	8003e08 <UART_SetConfig+0xa8>
 8003e06:	e075      	b.n	8003ef4 <UART_SetConfig+0x194>
 8003e08:	4956      	ldr	r1, [pc, #344]	@ (8003f64 <UART_SetConfig+0x204>)
 8003e0a:	428a      	cmp	r2, r1
 8003e0c:	d100      	bne.n	8003e10 <UART_SetConfig+0xb0>
 8003e0e:	e071      	b.n	8003ef4 <UART_SetConfig+0x194>
 8003e10:	42aa      	cmp	r2, r5
 8003e12:	d1ec      	bne.n	8003dee <UART_SetConfig+0x8e>
 8003e14:	21c0      	movs	r1, #192	@ 0xc0
 8003e16:	2080      	movs	r0, #128	@ 0x80
 8003e18:	4a4f      	ldr	r2, [pc, #316]	@ (8003f58 <UART_SetConfig+0x1f8>)
 8003e1a:	0109      	lsls	r1, r1, #4
 8003e1c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8003e1e:	0100      	lsls	r0, r0, #4
 8003e20:	400b      	ands	r3, r1
 8003e22:	4283      	cmp	r3, r0
 8003e24:	d014      	beq.n	8003e50 <UART_SetConfig+0xf0>
 8003e26:	d80e      	bhi.n	8003e46 <UART_SetConfig+0xe6>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d033      	beq.n	8003e94 <UART_SetConfig+0x134>
 8003e2c:	2280      	movs	r2, #128	@ 0x80
 8003e2e:	00d2      	lsls	r2, r2, #3
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d1dc      	bne.n	8003dee <UART_SetConfig+0x8e>
        pclk = HAL_RCC_GetSysClockFreq();
 8003e34:	f7fe faf0 	bl	8002418 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	d110      	bne.n	8003e5e <UART_SetConfig+0xfe>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e3c:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	6663      	str	r3, [r4, #100]	@ 0x64
  huart->TxISR = NULL;
 8003e42:	66a3      	str	r3, [r4, #104]	@ 0x68
}
 8003e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e46:	428b      	cmp	r3, r1
 8003e48:	d1d1      	bne.n	8003dee <UART_SetConfig+0x8e>
 8003e4a:	2080      	movs	r0, #128	@ 0x80
 8003e4c:	0200      	lsls	r0, r0, #8
 8003e4e:	e006      	b.n	8003e5e <UART_SetConfig+0xfe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e50:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 8003e52:	4b45      	ldr	r3, [pc, #276]	@ (8003f68 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e54:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8003e56:	17c0      	asrs	r0, r0, #31
 8003e58:	4018      	ands	r0, r3
 8003e5a:	4b44      	ldr	r3, [pc, #272]	@ (8003f6c <UART_SetConfig+0x20c>)
 8003e5c:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e5e:	2303      	movs	r3, #3
 8003e60:	6862      	ldr	r2, [r4, #4]
 8003e62:	4353      	muls	r3, r2
 8003e64:	4298      	cmp	r0, r3
 8003e66:	d3c2      	bcc.n	8003dee <UART_SetConfig+0x8e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e68:	0313      	lsls	r3, r2, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e6a:	4298      	cmp	r0, r3
 8003e6c:	d8bf      	bhi.n	8003dee <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e6e:	2100      	movs	r1, #0
 8003e70:	0e07      	lsrs	r7, r0, #24
 8003e72:	0206      	lsls	r6, r0, #8
 8003e74:	0850      	lsrs	r0, r2, #1
 8003e76:	1836      	adds	r6, r6, r0
 8003e78:	414f      	adcs	r7, r1
 8003e7a:	000b      	movs	r3, r1
 8003e7c:	0030      	movs	r0, r6
 8003e7e:	0039      	movs	r1, r7
 8003e80:	f7fc faca 	bl	8000418 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e84:	4b3a      	ldr	r3, [pc, #232]	@ (8003f70 <UART_SetConfig+0x210>)
 8003e86:	18c2      	adds	r2, r0, r3
 8003e88:	4b3a      	ldr	r3, [pc, #232]	@ (8003f74 <UART_SetConfig+0x214>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d8af      	bhi.n	8003dee <UART_SetConfig+0x8e>
        huart->Instance->BRR = usartdiv;
 8003e8e:	6823      	ldr	r3, [r4, #0]
 8003e90:	60d8      	str	r0, [r3, #12]
 8003e92:	e7d3      	b.n	8003e3c <UART_SetConfig+0xdc>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7fe fe62 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
        break;
 8003e98:	e7ce      	b.n	8003e38 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9a:	f7fe fe5f 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d0cc      	beq.n	8003e3c <UART_SetConfig+0xdc>
 8003ea2:	e044      	b.n	8003f2e <UART_SetConfig+0x1ce>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ea4:	2280      	movs	r2, #128	@ 0x80
 8003ea6:	0212      	lsls	r2, r2, #8
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d000      	beq.n	8003eae <UART_SetConfig+0x14e>
 8003eac:	e78c      	b.n	8003dc8 <UART_SetConfig+0x68>
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7fe fab3 	bl	8002418 <HAL_RCC_GetSysClockFreq>
 8003eb2:	e025      	b.n	8003f00 <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003eb4:	4283      	cmp	r3, r0
 8003eb6:	d132      	bne.n	8003f1e <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003eb8:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <UART_SetConfig+0x1f8>)
          pclk = (uint32_t) HSI_VALUE;
 8003eba:	4a2b      	ldr	r2, [pc, #172]	@ (8003f68 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	06db      	lsls	r3, r3, #27
          pclk = (uint32_t) HSI_VALUE;
 8003ec0:	17db      	asrs	r3, r3, #31
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	4a29      	ldr	r2, [pc, #164]	@ (8003f6c <UART_SetConfig+0x20c>)
 8003ec6:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ec8:	6861      	ldr	r1, [r4, #4]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	0848      	lsrs	r0, r1, #1
 8003ece:	1818      	adds	r0, r3, r0
 8003ed0:	f7fc f92c 	bl	800012c <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed4:	4928      	ldr	r1, [pc, #160]	@ (8003f78 <UART_SetConfig+0x218>)
 8003ed6:	b282      	uxth	r2, r0
 8003ed8:	3a10      	subs	r2, #16
 8003eda:	0403      	lsls	r3, r0, #16
 8003edc:	428a      	cmp	r2, r1
 8003ede:	d900      	bls.n	8003ee2 <UART_SetConfig+0x182>
 8003ee0:	e785      	b.n	8003dee <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ee2:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ee4:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ee6:	4390      	bics	r0, r2
 8003ee8:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8003eea:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003eec:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8003eee:	4318      	orrs	r0, r3
 8003ef0:	60d0      	str	r0, [r2, #12]
 8003ef2:	e7a3      	b.n	8003e3c <UART_SetConfig+0xdc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ef4:	2280      	movs	r2, #128	@ 0x80
 8003ef6:	0212      	lsls	r2, r2, #8
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d1ce      	bne.n	8003e9a <UART_SetConfig+0x13a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe fe2e 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8003f00:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8003f02:	d09b      	beq.n	8003e3c <UART_SetConfig+0xdc>
 8003f04:	e7e0      	b.n	8003ec8 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f06:	f7fe fe39 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
 8003f0a:	e7f9      	b.n	8003f00 <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f0c:	4283      	cmp	r3, r0
 8003f0e:	d0fa      	beq.n	8003f06 <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f10:	f7fe fe34 	bl	8002b7c <HAL_RCC_GetPCLK2Freq>
        break;
 8003f14:	e7c3      	b.n	8003e9e <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	2280      	movs	r2, #128	@ 0x80
 8003f18:	0212      	lsls	r2, r2, #8
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d0cc      	beq.n	8003eb8 <UART_SetConfig+0x158>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f58 <UART_SetConfig+0x1f8>)
 8003f20:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 8003f22:	4b11      	ldr	r3, [pc, #68]	@ (8003f68 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f24:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8003f26:	17c0      	asrs	r0, r0, #31
 8003f28:	4018      	ands	r0, r3
 8003f2a:	4b10      	ldr	r3, [pc, #64]	@ (8003f6c <UART_SetConfig+0x20c>)
 8003f2c:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f2e:	6861      	ldr	r1, [r4, #4]
 8003f30:	084b      	lsrs	r3, r1, #1
 8003f32:	1818      	adds	r0, r3, r0
 8003f34:	f7fc f8fa 	bl	800012c <__udivsi3>
 8003f38:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f3a:	0002      	movs	r2, r0
 8003f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003f78 <UART_SetConfig+0x218>)
 8003f3e:	3a10      	subs	r2, #16
 8003f40:	e7a3      	b.n	8003e8a <UART_SetConfig+0x12a>
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	efff69f3 	.word	0xefff69f3
 8003f48:	ffffcfff 	.word	0xffffcfff
 8003f4c:	40004800 	.word	0x40004800
 8003f50:	fffff4ff 	.word	0xfffff4ff
 8003f54:	40013800 	.word	0x40013800
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	40004400 	.word	0x40004400
 8003f60:	40004c00 	.word	0x40004c00
 8003f64:	40005000 	.word	0x40005000
 8003f68:	ff48e500 	.word	0xff48e500
 8003f6c:	00f42400 	.word	0x00f42400
 8003f70:	fffffd00 	.word	0xfffffd00
 8003f74:	000ffcff 	.word	0x000ffcff
 8003f78:	0000ffef 	.word	0x0000ffef

08003f7c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f7c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
{
 8003f7e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f80:	07da      	lsls	r2, r3, #31
 8003f82:	d506      	bpl.n	8003f92 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f84:	6801      	ldr	r1, [r0, #0]
 8003f86:	4c28      	ldr	r4, [pc, #160]	@ (8004028 <UART_AdvFeatureConfig+0xac>)
 8003f88:	684a      	ldr	r2, [r1, #4]
 8003f8a:	4022      	ands	r2, r4
 8003f8c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8003f8e:	4322      	orrs	r2, r4
 8003f90:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f92:	079a      	lsls	r2, r3, #30
 8003f94:	d506      	bpl.n	8003fa4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f96:	6801      	ldr	r1, [r0, #0]
 8003f98:	4c24      	ldr	r4, [pc, #144]	@ (800402c <UART_AdvFeatureConfig+0xb0>)
 8003f9a:	684a      	ldr	r2, [r1, #4]
 8003f9c:	4022      	ands	r2, r4
 8003f9e:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8003fa0:	4322      	orrs	r2, r4
 8003fa2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fa4:	075a      	lsls	r2, r3, #29
 8003fa6:	d506      	bpl.n	8003fb6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa8:	6801      	ldr	r1, [r0, #0]
 8003faa:	4c21      	ldr	r4, [pc, #132]	@ (8004030 <UART_AdvFeatureConfig+0xb4>)
 8003fac:	684a      	ldr	r2, [r1, #4]
 8003fae:	4022      	ands	r2, r4
 8003fb0:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8003fb2:	4322      	orrs	r2, r4
 8003fb4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fb6:	071a      	lsls	r2, r3, #28
 8003fb8:	d506      	bpl.n	8003fc8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fba:	6801      	ldr	r1, [r0, #0]
 8003fbc:	4c1d      	ldr	r4, [pc, #116]	@ (8004034 <UART_AdvFeatureConfig+0xb8>)
 8003fbe:	684a      	ldr	r2, [r1, #4]
 8003fc0:	4022      	ands	r2, r4
 8003fc2:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003fc4:	4322      	orrs	r2, r4
 8003fc6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fc8:	06da      	lsls	r2, r3, #27
 8003fca:	d506      	bpl.n	8003fda <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fcc:	6801      	ldr	r1, [r0, #0]
 8003fce:	4c1a      	ldr	r4, [pc, #104]	@ (8004038 <UART_AdvFeatureConfig+0xbc>)
 8003fd0:	688a      	ldr	r2, [r1, #8]
 8003fd2:	4022      	ands	r2, r4
 8003fd4:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8003fd6:	4322      	orrs	r2, r4
 8003fd8:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fda:	069a      	lsls	r2, r3, #26
 8003fdc:	d506      	bpl.n	8003fec <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fde:	6801      	ldr	r1, [r0, #0]
 8003fe0:	4c16      	ldr	r4, [pc, #88]	@ (800403c <UART_AdvFeatureConfig+0xc0>)
 8003fe2:	688a      	ldr	r2, [r1, #8]
 8003fe4:	4022      	ands	r2, r4
 8003fe6:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8003fe8:	4322      	orrs	r2, r4
 8003fea:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fec:	065a      	lsls	r2, r3, #25
 8003fee:	d510      	bpl.n	8004012 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ff0:	6801      	ldr	r1, [r0, #0]
 8003ff2:	4d13      	ldr	r5, [pc, #76]	@ (8004040 <UART_AdvFeatureConfig+0xc4>)
 8003ff4:	684a      	ldr	r2, [r1, #4]
 8003ff6:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8003ff8:	402a      	ands	r2, r5
 8003ffa:	4322      	orrs	r2, r4
 8003ffc:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ffe:	2280      	movs	r2, #128	@ 0x80
 8004000:	0352      	lsls	r2, r2, #13
 8004002:	4294      	cmp	r4, r2
 8004004:	d105      	bne.n	8004012 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004006:	684a      	ldr	r2, [r1, #4]
 8004008:	4c0e      	ldr	r4, [pc, #56]	@ (8004044 <UART_AdvFeatureConfig+0xc8>)
 800400a:	4022      	ands	r2, r4
 800400c:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800400e:	4322      	orrs	r2, r4
 8004010:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004012:	061b      	lsls	r3, r3, #24
 8004014:	d506      	bpl.n	8004024 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004016:	6802      	ldr	r2, [r0, #0]
 8004018:	490b      	ldr	r1, [pc, #44]	@ (8004048 <UART_AdvFeatureConfig+0xcc>)
 800401a:	6853      	ldr	r3, [r2, #4]
 800401c:	400b      	ands	r3, r1
 800401e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004020:	430b      	orrs	r3, r1
 8004022:	6053      	str	r3, [r2, #4]
}
 8004024:	bd30      	pop	{r4, r5, pc}
 8004026:	46c0      	nop			@ (mov r8, r8)
 8004028:	fffdffff 	.word	0xfffdffff
 800402c:	fffeffff 	.word	0xfffeffff
 8004030:	fffbffff 	.word	0xfffbffff
 8004034:	ffff7fff 	.word	0xffff7fff
 8004038:	ffffefff 	.word	0xffffefff
 800403c:	ffffdfff 	.word	0xffffdfff
 8004040:	ffefffff 	.word	0xffefffff
 8004044:	ff9fffff 	.word	0xff9fffff
 8004048:	fff7ffff 	.word	0xfff7ffff

0800404c <UART_WaitOnFlagUntilTimeout>:
{
 800404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404e:	0004      	movs	r4, r0
 8004050:	000d      	movs	r5, r1
 8004052:	0017      	movs	r7, r2
 8004054:	001e      	movs	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	69d3      	ldr	r3, [r2, #28]
 800405a:	402b      	ands	r3, r5
 800405c:	1b5b      	subs	r3, r3, r5
 800405e:	4259      	negs	r1, r3
 8004060:	414b      	adcs	r3, r1
 8004062:	42bb      	cmp	r3, r7
 8004064:	d001      	beq.n	800406a <UART_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8004066:	2000      	movs	r0, #0
 8004068:	e01b      	b.n	80040a2 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800406a:	9b06      	ldr	r3, [sp, #24]
 800406c:	3301      	adds	r3, #1
 800406e:	d0f3      	beq.n	8004058 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004070:	f7fd f970 	bl	8001354 <HAL_GetTick>
 8004074:	9a06      	ldr	r2, [sp, #24]
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	1b80      	subs	r0, r0, r6
 800407a:	4290      	cmp	r0, r2
 800407c:	d801      	bhi.n	8004082 <UART_WaitOnFlagUntilTimeout+0x36>
 800407e:	2a00      	cmp	r2, #0
 8004080:	d110      	bne.n	80040a4 <UART_WaitOnFlagUntilTimeout+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4913      	ldr	r1, [pc, #76]	@ (80040d4 <UART_WaitOnFlagUntilTimeout+0x88>)
 8004086:	400a      	ands	r2, r1
 8004088:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	31a3      	adds	r1, #163	@ 0xa3
 800408e:	31ff      	adds	r1, #255	@ 0xff
 8004090:	438a      	bics	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004094:	2320      	movs	r3, #32
 8004096:	67a3      	str	r3, [r4, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004098:	67e3      	str	r3, [r4, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 800409a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800409c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800409e:	3474      	adds	r4, #116	@ 0x74
 80040a0:	7023      	strb	r3, [r4, #0]
}
 80040a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	0752      	lsls	r2, r2, #29
 80040a8:	d5d5      	bpl.n	8004056 <UART_WaitOnFlagUntilTimeout+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040aa:	2280      	movs	r2, #128	@ 0x80
 80040ac:	69d9      	ldr	r1, [r3, #28]
 80040ae:	0112      	lsls	r2, r2, #4
 80040b0:	4211      	tst	r1, r2
 80040b2:	d0d0      	beq.n	8004056 <UART_WaitOnFlagUntilTimeout+0xa>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b4:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4906      	ldr	r1, [pc, #24]	@ (80040d4 <UART_WaitOnFlagUntilTimeout+0x88>)
 80040ba:	400a      	ands	r2, r1
 80040bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	31a3      	adds	r1, #163	@ 0xa3
 80040c2:	31ff      	adds	r1, #255	@ 0xff
 80040c4:	438a      	bics	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80040c8:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ca:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80040cc:	67a3      	str	r3, [r4, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040ce:	67e3      	str	r3, [r4, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040d0:	67d3      	str	r3, [r2, #124]	@ 0x7c
          return HAL_TIMEOUT;
 80040d2:	e7e2      	b.n	800409a <UART_WaitOnFlagUntilTimeout+0x4e>
 80040d4:	fffffe5f 	.word	0xfffffe5f

080040d8 <UART_CheckIdleState>:
{
 80040d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040da:	2600      	movs	r6, #0
{
 80040dc:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040de:	1d03      	adds	r3, r0, #4
 80040e0:	67de      	str	r6, [r3, #124]	@ 0x7c
  tickstart = HAL_GetTick();
 80040e2:	f7fd f937 	bl	8001354 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040e6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80040e8:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	071b      	lsls	r3, r3, #28
 80040ee:	d416      	bmi.n	800411e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	075b      	lsls	r3, r3, #29
 80040f6:	d50a      	bpl.n	800410e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040f8:	2180      	movs	r1, #128	@ 0x80
 80040fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004138 <UART_CheckIdleState+0x60>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	0020      	movs	r0, r4
 8004102:	002b      	movs	r3, r5
 8004104:	03c9      	lsls	r1, r1, #15
 8004106:	f7ff ffa1 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 800410a:	2800      	cmp	r0, #0
 800410c:	d112      	bne.n	8004134 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800410e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004112:	67a3      	str	r3, [r4, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004114:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004116:	6620      	str	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(huart);
 8004118:	3474      	adds	r4, #116	@ 0x74
 800411a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800411c:	e00b      	b.n	8004136 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800411e:	2180      	movs	r1, #128	@ 0x80
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <UART_CheckIdleState+0x60>)
 8004122:	0032      	movs	r2, r6
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	0389      	lsls	r1, r1, #14
 8004128:	0003      	movs	r3, r0
 800412a:	0020      	movs	r0, r4
 800412c:	f7ff ff8e 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8004130:	2800      	cmp	r0, #0
 8004132:	d0dd      	beq.n	80040f0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8004134:	2003      	movs	r0, #3
}
 8004136:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8004138:	01ffffff 	.word	0x01ffffff

0800413c <HAL_UART_Init>:
{
 800413c:	b510      	push	{r4, lr}
 800413e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8004142:	2001      	movs	r0, #1
}
 8004144:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004146:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8004148:	2b00      	cmp	r3, #0
 800414a:	d104      	bne.n	8004156 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800414c:	0002      	movs	r2, r0
 800414e:	3274      	adds	r2, #116	@ 0x74
 8004150:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8004152:	f7fd f95d 	bl	8001410 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8004156:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8004158:	2101      	movs	r1, #1
 800415a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800415c:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UART_DISABLE(huart);
 800415e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004160:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8004162:	438b      	bics	r3, r1
 8004164:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004166:	f7ff fdfb 	bl	8003d60 <UART_SetConfig>
 800416a:	2801      	cmp	r0, #1
 800416c:	d0e9      	beq.n	8004142 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800416e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d002      	beq.n	800417a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8004174:	0020      	movs	r0, r4
 8004176:	f7ff ff01 	bl	8003f7c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417a:	6823      	ldr	r3, [r4, #0]
 800417c:	4907      	ldr	r1, [pc, #28]	@ (800419c <HAL_UART_Init+0x60>)
 800417e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004180:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004182:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004184:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	438a      	bics	r2, r1
 800418c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800418e:	2201      	movs	r2, #1
 8004190:	6819      	ldr	r1, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8004196:	f7ff ff9f 	bl	80040d8 <UART_CheckIdleState>
 800419a:	e7d3      	b.n	8004144 <HAL_UART_Init+0x8>
 800419c:	ffffb7ff 	.word	0xffffb7ff

080041a0 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80041a0:	0003      	movs	r3, r0
 80041a2:	3358      	adds	r3, #88	@ 0x58
{
 80041a4:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80041a6:	6541      	str	r1, [r0, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80041a8:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80041aa:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 80041ac:	2380      	movs	r3, #128	@ 0x80
 80041ae:	6881      	ldr	r1, [r0, #8]
 80041b0:	015b      	lsls	r3, r3, #5
 80041b2:	4299      	cmp	r1, r3
 80041b4:	d128      	bne.n	8004208 <UART_Start_Receive_IT+0x68>
 80041b6:	6903      	ldr	r3, [r0, #16]
 80041b8:	1e5a      	subs	r2, r3, #1
 80041ba:	4193      	sbcs	r3, r2
 80041bc:	22ff      	movs	r2, #255	@ 0xff
 80041be:	425b      	negs	r3, r3
 80041c0:	4393      	bics	r3, r2
 80041c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004230 <UART_Start_Receive_IT+0x90>)
 80041c4:	189b      	adds	r3, r3, r2
 80041c6:	0002      	movs	r2, r0
 80041c8:	325c      	adds	r2, #92	@ 0x5c
 80041ca:	8013      	strh	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041cc:	2200      	movs	r2, #0
 80041ce:	1d03      	adds	r3, r0, #4
 80041d0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041d2:	2322      	movs	r3, #34	@ 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d4:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041d6:	67c3      	str	r3, [r0, #124]	@ 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d8:	6894      	ldr	r4, [r2, #8]
 80041da:	3b21      	subs	r3, #33	@ 0x21
 80041dc:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	2480      	movs	r4, #128	@ 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e0:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e2:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 80041e4:	4b13      	ldr	r3, [pc, #76]	@ (8004234 <UART_Start_Receive_IT+0x94>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e6:	42a1      	cmp	r1, r4
 80041e8:	d103      	bne.n	80041f2 <UART_Start_Receive_IT+0x52>
 80041ea:	6901      	ldr	r1, [r0, #16]
 80041ec:	2900      	cmp	r1, #0
 80041ee:	d100      	bne.n	80041f2 <UART_Start_Receive_IT+0x52>
    huart->RxISR = UART_RxISR_16BIT;
 80041f0:	4b11      	ldr	r3, [pc, #68]	@ (8004238 <UART_Start_Receive_IT+0x98>)
 80041f2:	6643      	str	r3, [r0, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 80041f4:	0003      	movs	r3, r0
 80041f6:	2000      	movs	r0, #0
 80041f8:	3374      	adds	r3, #116	@ 0x74
 80041fa:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80041fc:	2390      	movs	r3, #144	@ 0x90
 80041fe:	6811      	ldr	r1, [r2, #0]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	430b      	orrs	r3, r1
 8004204:	6013      	str	r3, [r2, #0]
}
 8004206:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8004208:	2900      	cmp	r1, #0
 800420a:	d105      	bne.n	8004218 <UART_Start_Receive_IT+0x78>
 800420c:	6902      	ldr	r2, [r0, #16]
 800420e:	237f      	movs	r3, #127	@ 0x7f
 8004210:	2a00      	cmp	r2, #0
 8004212:	d1d8      	bne.n	80041c6 <UART_Start_Receive_IT+0x26>
 8004214:	3380      	adds	r3, #128	@ 0x80
 8004216:	e7d6      	b.n	80041c6 <UART_Start_Receive_IT+0x26>
 8004218:	2280      	movs	r2, #128	@ 0x80
 800421a:	2300      	movs	r3, #0
 800421c:	0552      	lsls	r2, r2, #21
 800421e:	4291      	cmp	r1, r2
 8004220:	d1d1      	bne.n	80041c6 <UART_Start_Receive_IT+0x26>
 8004222:	6902      	ldr	r2, [r0, #16]
 8004224:	333f      	adds	r3, #63	@ 0x3f
 8004226:	2a00      	cmp	r2, #0
 8004228:	d1cd      	bne.n	80041c6 <UART_Start_Receive_IT+0x26>
 800422a:	3340      	adds	r3, #64	@ 0x40
 800422c:	e7cb      	b.n	80041c6 <UART_Start_Receive_IT+0x26>
 800422e:	46c0      	nop			@ (mov r8, r8)
 8004230:	000001ff 	.word	0x000001ff
 8004234:	08003c5d 	.word	0x08003c5d
 8004238:	08003ce1 	.word	0x08003ce1

0800423c <HAL_UART_Receive_IT>:
{
 800423c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800423e:	6fc4      	ldr	r4, [r0, #124]	@ 0x7c
{
 8004240:	0003      	movs	r3, r0
    __HAL_LOCK(huart);
 8004242:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8004244:	2c20      	cmp	r4, #32
 8004246:	d129      	bne.n	800429c <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 8004248:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800424a:	2900      	cmp	r1, #0
 800424c:	d026      	beq.n	800429c <HAL_UART_Receive_IT+0x60>
 800424e:	2a00      	cmp	r2, #0
 8004250:	d024      	beq.n	800429c <HAL_UART_Receive_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004252:	2080      	movs	r0, #128	@ 0x80
 8004254:	689c      	ldr	r4, [r3, #8]
 8004256:	0140      	lsls	r0, r0, #5
 8004258:	4284      	cmp	r4, r0
 800425a:	d106      	bne.n	800426a <HAL_UART_Receive_IT+0x2e>
 800425c:	6918      	ldr	r0, [r3, #16]
 800425e:	2800      	cmp	r0, #0
 8004260:	d103      	bne.n	800426a <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8004262:	2401      	movs	r4, #1
      return HAL_ERROR;
 8004264:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8004266:	4221      	tst	r1, r4
 8004268:	d118      	bne.n	800429c <HAL_UART_Receive_IT+0x60>
    __HAL_LOCK(huart);
 800426a:	001c      	movs	r4, r3
 800426c:	3474      	adds	r4, #116	@ 0x74
 800426e:	7825      	ldrb	r5, [r4, #0]
 8004270:	2002      	movs	r0, #2
 8004272:	2d01      	cmp	r5, #1
 8004274:	d012      	beq.n	800429c <HAL_UART_Receive_IT+0x60>
 8004276:	3801      	subs	r0, #1
 8004278:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427a:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800427c:	4c08      	ldr	r4, [pc, #32]	@ (80042a0 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427e:	6618      	str	r0, [r3, #96]	@ 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	42a0      	cmp	r0, r4
 8004284:	d007      	beq.n	8004296 <HAL_UART_Receive_IT+0x5a>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004286:	6844      	ldr	r4, [r0, #4]
 8004288:	0224      	lsls	r4, r4, #8
 800428a:	d504      	bpl.n	8004296 <HAL_UART_Receive_IT+0x5a>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800428c:	2480      	movs	r4, #128	@ 0x80
 800428e:	6805      	ldr	r5, [r0, #0]
 8004290:	04e4      	lsls	r4, r4, #19
 8004292:	432c      	orrs	r4, r5
 8004294:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8004296:	0018      	movs	r0, r3
 8004298:	f7ff ff82 	bl	80041a0 <UART_Start_Receive_IT>
}
 800429c:	bd70      	pop	{r4, r5, r6, pc}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	40004800 	.word	0x40004800

080042a4 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80042a4:	4770      	bx	lr
	...

080042a8 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80042a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042aa:	0005      	movs	r5, r0
{
 80042ac:	b085      	sub	sp, #20
 80042ae:	9102      	str	r1, [sp, #8]
 80042b0:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 80042b2:	3574      	adds	r5, #116	@ 0x74
 80042b4:	782b      	ldrb	r3, [r5, #0]
{
 80042b6:	0004      	movs	r4, r0
 80042b8:	000f      	movs	r7, r1
  __HAL_LOCK(huart);
 80042ba:	2002      	movs	r0, #2
{
 80042bc:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d030      	beq.n	8004324 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>

  huart->gState = HAL_UART_STATE_BUSY;
 80042c2:	2324      	movs	r3, #36	@ 0x24
  __HAL_LOCK(huart);
 80042c4:	3801      	subs	r0, #1
 80042c6:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80042c8:	67a3      	str	r3, [r4, #120]	@ 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	4381      	bics	r1, r0
 80042d0:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80042d2:	6899      	ldr	r1, [r3, #8]
 80042d4:	4815      	ldr	r0, [pc, #84]	@ (800432c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
 80042d6:	4001      	ands	r1, r0
 80042d8:	4339      	orrs	r1, r7
 80042da:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80042dc:	2f00      	cmp	r7, #0
 80042de:	d10c      	bne.n	80042fa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x52>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80042e0:	2010      	movs	r0, #16
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	79b1      	ldrb	r1, [r6, #6]
 80042e6:	4382      	bics	r2, r0
 80042e8:	88b0      	ldrh	r0, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80042ea:	0609      	lsls	r1, r1, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80042ec:	4302      	orrs	r2, r0
 80042ee:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	0212      	lsls	r2, r2, #8
 80042f4:	0a12      	lsrs	r2, r2, #8
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 80042fa:	2201      	movs	r2, #1
 80042fc:	6819      	ldr	r1, [r3, #0]
 80042fe:	430a      	orrs	r2, r1
 8004300:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8004302:	f7fd f827 	bl	8001354 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004306:	2180      	movs	r1, #128	@ 0x80
 8004308:	4a09      	ldr	r2, [pc, #36]	@ (8004330 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
  tickstart = HAL_GetTick();
 800430a:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800430c:	9200      	str	r2, [sp, #0]
 800430e:	0020      	movs	r0, r4
 8004310:	2200      	movs	r2, #0
 8004312:	03c9      	lsls	r1, r1, #15
 8004314:	f7ff fe9a 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8004318:	2800      	cmp	r0, #0
 800431a:	d105      	bne.n	8004328 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800431c:	2320      	movs	r3, #32
 800431e:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UNLOCK(huart);
 8004320:	2300      	movs	r3, #0
 8004322:	702b      	strb	r3, [r5, #0]
}
 8004324:	b005      	add	sp, #20
 8004326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 8004328:	2003      	movs	r0, #3
 800432a:	e7f9      	b.n	8004320 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>
 800432c:	ffcfffff 	.word	0xffcfffff
 8004330:	01ffffff 	.word	0x01ffffff

08004334 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8004334:	0001      	movs	r1, r0
 8004336:	2302      	movs	r3, #2
{
 8004338:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800433a:	3174      	adds	r1, #116	@ 0x74
 800433c:	780c      	ldrb	r4, [r1, #0]
{
 800433e:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8004340:	0018      	movs	r0, r3
 8004342:	2c01      	cmp	r4, #1
 8004344:	d005      	beq.n	8004352 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	6810      	ldr	r0, [r2, #0]
 800434a:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 800434c:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800434e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8004350:	7008      	strb	r0, [r1, #0]
}
 8004352:	bd10      	pop	{r4, pc}

08004354 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 8004354:	4b01      	ldr	r3, [pc, #4]	@ (800435c <SX1276GetStatus+0x8>)
 8004356:	7918      	ldrb	r0, [r3, #4]
}
 8004358:	4770      	bx	lr
 800435a:	46c0      	nop			@ (mov r8, r8)
 800435c:	20000460 	.word	0x20000460

08004360 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004360:	4a09      	ldr	r2, [pc, #36]	@ (8004388 <GetFskBandwidthRegValue+0x28>)
{
 8004362:	2300      	movs	r3, #0
 8004364:	0011      	movs	r1, r2
 8004366:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8004368:	6814      	ldr	r4, [r2, #0]
 800436a:	4284      	cmp	r4, r0
 800436c:	d802      	bhi.n	8004374 <GetFskBandwidthRegValue+0x14>
 800436e:	6894      	ldr	r4, [r2, #8]
 8004370:	4284      	cmp	r4, r0
 8004372:	d804      	bhi.n	800437e <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004374:	3301      	adds	r3, #1
 8004376:	3208      	adds	r2, #8
 8004378:	2b15      	cmp	r3, #21
 800437a:	d1f5      	bne.n	8004368 <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 800437c:	e7fe      	b.n	800437c <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	18c9      	adds	r1, r1, r3
 8004382:	7908      	ldrb	r0, [r1, #4]
}
 8004384:	bd10      	pop	{r4, pc}
 8004386:	46c0      	nop			@ (mov r8, r8)
 8004388:	08006500 	.word	0x08006500

0800438c <SX1276GetTimeOnAir>:
{
 800438c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800438e:	000d      	movs	r5, r1
 8004390:	0019      	movs	r1, r3
 8004392:	ab08      	add	r3, sp, #32
 8004394:	881e      	ldrh	r6, [r3, #0]
 8004396:	ab09      	add	r3, sp, #36	@ 0x24
 8004398:	781f      	ldrb	r7, [r3, #0]
 800439a:	ab0a      	add	r3, sp, #40	@ 0x28
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	0014      	movs	r4, r2
 80043a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80043a2:	469c      	mov	ip, r3
 80043a4:	7812      	ldrb	r2, [r2, #0]
    switch( modem )
 80043a6:	2800      	cmp	r0, #0
 80043a8:	d009      	beq.n	80043be <SX1276GetTimeOnAir+0x32>
 80043aa:	2801      	cmp	r0, #1
 80043ac:	d014      	beq.n	80043d8 <SX1276GetTimeOnAir+0x4c>
 80043ae:	2401      	movs	r4, #1
 80043b0:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 80043b2:	1900      	adds	r0, r0, r4
 80043b4:	0021      	movs	r1, r4
 80043b6:	3801      	subs	r0, #1
 80043b8:	f7fb feb8 	bl	800012c <__udivsi3>
}
 80043bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 80043be:	2101      	movs	r1, #1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 80043c0:	20fa      	movs	r0, #250	@ 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 80043c2:	4079      	eors	r1, r7
    return ( preambleLen << 3 ) +
 80043c4:	1871      	adds	r1, r6, r1
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 80043c6:	0052      	lsls	r2, r2, #1
    return ( preambleLen << 3 ) +
 80043c8:	00c9      	lsls	r1, r1, #3
               ( 0 ) + // Address filter size
 80043ca:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 80043cc:	3118      	adds	r1, #24
               ) << 3 
 80043ce:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 80043d0:	188a      	adds	r2, r1, r2
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 80043d2:	0080      	lsls	r0, r0, #2
 80043d4:	4350      	muls	r0, r2
        break;
 80043d6:	e7ec      	b.n	80043b2 <SX1276GetTimeOnAir+0x26>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 80043d8:	1d0b      	adds	r3, r1, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80043da:	1f61      	subs	r1, r4, #5
    int32_t crDenom           = coderate + 4;
 80043dc:	9300      	str	r3, [sp, #0]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80043de:	2901      	cmp	r1, #1
 80043e0:	d804      	bhi.n	80043ec <SX1276GetTimeOnAir+0x60>
    {
        if( preambleLen < 12 )
 80043e2:	1c31      	adds	r1, r6, #0
 80043e4:	2e0c      	cmp	r6, #12
 80043e6:	d200      	bcs.n	80043ea <SX1276GetTimeOnAir+0x5e>
 80043e8:	210c      	movs	r1, #12
 80043ea:	b28e      	uxth	r6, r1
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80043ec:	2d00      	cmp	r5, #0
 80043ee:	d138      	bne.n	8004462 <SX1276GetTimeOnAir+0xd6>
 80043f0:	0021      	movs	r1, r4
 80043f2:	2001      	movs	r0, #1
 80043f4:	002b      	movs	r3, r5
 80043f6:	390b      	subs	r1, #11
 80043f8:	4288      	cmp	r0, r1
 80043fa:	416b      	adcs	r3, r5
 80043fc:	0018      	movs	r0, r3
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80043fe:	b2c0      	uxtb	r0, r0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004400:	4663      	mov	r3, ip
                            ( crcOn ? 16 : 0 ) -
 8004402:	0112      	lsls	r2, r2, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	189a      	adds	r2, r3, r2
                            ( 4 * datarate ) +
 8004408:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800440a:	1a53      	subs	r3, r2, r1
                            ( fixLen ? 0 : 20 );
 800440c:	003a      	movs	r2, r7
 800440e:	4257      	negs	r7, r2
 8004410:	4157      	adcs	r7, r2
                            ( crcOn ? 16 : 0 ) -
 8004412:	9301      	str	r3, [sp, #4]
                            ( fixLen ? 0 : 20 );
 8004414:	2314      	movs	r3, #20
 8004416:	427f      	negs	r7, r7
                            ( 4 * datarate ) +
 8004418:	9a01      	ldr	r2, [sp, #4]
                            ( fixLen ? 0 : 20 );
 800441a:	403b      	ands	r3, r7
                            ( 4 * datarate ) +
 800441c:	18d3      	adds	r3, r2, r3
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800441e:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 8004420:	2c06      	cmp	r4, #6
 8004422:	d903      	bls.n	800442c <SX1276GetTimeOnAir+0xa0>
        ceilNumerator += 8;
 8004424:	3308      	adds	r3, #8
        if( lowDatareOptimize == true )
 8004426:	2800      	cmp	r0, #0
 8004428:	d000      	beq.n	800442c <SX1276GetTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 800442a:	00b9      	lsls	r1, r7, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 800442c:	43da      	mvns	r2, r3
 800442e:	17d2      	asrs	r2, r2, #31
 8004430:	4013      	ands	r3, r2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8004432:	1858      	adds	r0, r3, r1
 8004434:	3801      	subs	r0, #1
 8004436:	f7fb ff03 	bl	8000240 <__divsi3>
 800443a:	9b00      	ldr	r3, [sp, #0]
 800443c:	4343      	muls	r3, r0
 800443e:	1998      	adds	r0, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 8004440:	0003      	movs	r3, r0
 8004442:	330e      	adds	r3, #14
    if( datarate <= 6 )
 8004444:	2c06      	cmp	r4, #6
 8004446:	d900      	bls.n	800444a <SX1276GetTimeOnAir+0xbe>
    int32_t intermediate =
 8004448:	3b02      	subs	r3, #2
    switch( bw )
 800444a:	2d02      	cmp	r5, #2
 800444c:	d811      	bhi.n	8004472 <SX1276GetTimeOnAir+0xe6>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800444e:	009b      	lsls	r3, r3, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8004450:	20fa      	movs	r0, #250	@ 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8004452:	3301      	adds	r3, #1
 8004454:	40bb      	lsls	r3, r7
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 8004456:	0080      	lsls	r0, r0, #2
 8004458:	4358      	muls	r0, r3
 800445a:	4b06      	ldr	r3, [pc, #24]	@ (8004474 <SX1276GetTimeOnAir+0xe8>)
 800445c:	00ad      	lsls	r5, r5, #2
 800445e:	58ec      	ldr	r4, [r5, r3]
 8004460:	e7a7      	b.n	80043b2 <SX1276GetTimeOnAir+0x26>
    bool    lowDatareOptimize = false;
 8004462:	2000      	movs	r0, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004464:	2d01      	cmp	r5, #1
 8004466:	d1cb      	bne.n	8004400 <SX1276GetTimeOnAir+0x74>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8004468:	0020      	movs	r0, r4
 800446a:	380c      	subs	r0, #12
 800446c:	4241      	negs	r1, r0
 800446e:	4148      	adcs	r0, r1
 8004470:	e7c5      	b.n	80043fe <SX1276GetTimeOnAir+0x72>
    return ( numerator + denominator - 1 ) / denominator;
 8004472:	deff      	udf	#255	@ 0xff
 8004474:	080064c4 	.word	0x080064c4

08004478 <SX1276GetWakeupTime>:
{
 8004478:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800447a:	f7fd f9f5 	bl	8001868 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800447e:	3002      	adds	r0, #2
}
 8004480:	bd10      	pop	{r4, pc}

08004482 <SX1276WriteBuffer>:
{
 8004482:	b570      	push	{r4, r5, r6, lr}
 8004484:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 8004486:	2000      	movs	r0, #0
{
 8004488:	000c      	movs	r4, r1
 800448a:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 800448c:	f7fd fbc6 	bl	8001c1c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 8004490:	2080      	movs	r0, #128	@ 0x80
 8004492:	4330      	orrs	r0, r6
 8004494:	b280      	uxth	r0, r0
 8004496:	f7fd fbb3 	bl	8001c00 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800449a:	1965      	adds	r5, r4, r5
 800449c:	42ac      	cmp	r4, r5
 800449e:	d103      	bne.n	80044a8 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 80044a0:	2001      	movs	r0, #1
 80044a2:	f7fd fbbb 	bl	8001c1c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 80044a8:	7820      	ldrb	r0, [r4, #0]
 80044aa:	f7fd fba9 	bl	8001c00 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 80044ae:	3401      	adds	r4, #1
 80044b0:	e7f4      	b.n	800449c <SX1276WriteBuffer+0x1a>

080044b2 <SX1276Write>:
{
 80044b2:	b507      	push	{r0, r1, r2, lr}
 80044b4:	466b      	mov	r3, sp
 80044b6:	71d9      	strb	r1, [r3, #7]
 80044b8:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 80044ba:	2201      	movs	r2, #1
 80044bc:	0019      	movs	r1, r3
 80044be:	f7ff ffe0 	bl	8004482 <SX1276WriteBuffer>
}
 80044c2:	bd07      	pop	{r0, r1, r2, pc}

080044c4 <SX1276SetChannel>:
{
 80044c4:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80044c6:	4911      	ldr	r1, [pc, #68]	@ (800450c <SX1276SetChannel+0x48>)
{
 80044c8:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80044ca:	f7fb feb5 	bl	8000238 <__aeabi_uidivmod>
 80044ce:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <SX1276SetChannel+0x4c>)
 80044d0:	0208      	lsls	r0, r1, #8
 80044d2:	18c0      	adds	r0, r0, r3
 80044d4:	490d      	ldr	r1, [pc, #52]	@ (800450c <SX1276SetChannel+0x48>)
 80044d6:	f7fb fe29 	bl	800012c <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 80044da:	490c      	ldr	r1, [pc, #48]	@ (800450c <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 80044dc:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 80044de:	0028      	movs	r0, r5
 80044e0:	f7fb fe24 	bl	800012c <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 80044e4:	0200      	lsls	r0, r0, #8
 80044e6:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 80044e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004514 <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 80044ea:	0c21      	lsrs	r1, r4, #16
 80044ec:	2006      	movs	r0, #6
 80044ee:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 80044f0:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 80044f2:	f7ff ffde 	bl	80044b2 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80044f6:	0a21      	lsrs	r1, r4, #8
 80044f8:	2007      	movs	r0, #7
 80044fa:	b2c9      	uxtb	r1, r1
 80044fc:	f7ff ffd9 	bl	80044b2 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8004500:	2008      	movs	r0, #8
 8004502:	b2e1      	uxtb	r1, r4
 8004504:	f7ff ffd5 	bl	80044b2 <SX1276Write>
}
 8004508:	bd70      	pop	{r4, r5, r6, pc}
 800450a:	46c0      	nop			@ (mov r8, r8)
 800450c:	00003d09 	.word	0x00003d09
 8004510:	00001e84 	.word	0x00001e84
 8004514:	20000460 	.word	0x20000460

08004518 <SX1276ReadBuffer>:
{
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 800451c:	2000      	movs	r0, #0
{
 800451e:	000c      	movs	r4, r1
 8004520:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 8004522:	f7fd fb7b 	bl	8001c1c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 8004526:	207f      	movs	r0, #127	@ 0x7f
 8004528:	4028      	ands	r0, r5
 800452a:	f7fd fb69 	bl	8001c00 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800452e:	19a6      	adds	r6, r4, r6
 8004530:	42b4      	cmp	r4, r6
 8004532:	d103      	bne.n	800453c <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 8004534:	2001      	movs	r0, #1
 8004536:	f7fd fb71 	bl	8001c1c <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800453a:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 800453c:	2000      	movs	r0, #0
 800453e:	f7fd fb5f 	bl	8001c00 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 8004542:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 8004544:	3401      	adds	r4, #1
 8004546:	e7f3      	b.n	8004530 <SX1276ReadBuffer+0x18>

08004548 <SX1276Read>:
{
 8004548:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800454a:	466b      	mov	r3, sp
 800454c:	1ddc      	adds	r4, r3, #7
 800454e:	2201      	movs	r2, #1
 8004550:	0021      	movs	r1, r4
 8004552:	f7ff ffe1 	bl	8004518 <SX1276ReadBuffer>
    return data;
 8004556:	7820      	ldrb	r0, [r4, #0]
}
 8004558:	bd16      	pop	{r1, r2, r4, pc}
	...

0800455c <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 800455c:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800455e:	4c2c      	ldr	r4, [pc, #176]	@ (8004610 <SX1276OnDio2Irq+0xb4>)
 8004560:	7925      	ldrb	r5, [r4, #4]
 8004562:	2d01      	cmp	r5, #1
 8004564:	d002      	beq.n	800456c <SX1276OnDio2Irq+0x10>
 8004566:	2d02      	cmp	r5, #2
 8004568:	d049      	beq.n	80045fe <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 800456a:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800456c:	7963      	ldrb	r3, [r4, #5]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d017      	beq.n	80045a2 <SX1276OnDio2Irq+0x46>
 8004572:	2b01      	cmp	r3, #1
 8004574:	d1f9      	bne.n	800456a <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004576:	3453      	adds	r4, #83	@ 0x53
 8004578:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800457a:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f4      	beq.n	800456a <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004580:	2012      	movs	r0, #18
 8004582:	f7ff ff96 	bl	80044b2 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004586:	4b23      	ldr	r3, [pc, #140]	@ (8004614 <SX1276OnDio2Irq+0xb8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0ed      	beq.n	800456a <SX1276OnDio2Irq+0xe>
 800458e:	695c      	ldr	r4, [r3, #20]
 8004590:	2c00      	cmp	r4, #0
 8004592:	d0ea      	beq.n	800456a <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004594:	201c      	movs	r0, #28
 8004596:	f7ff ffd7 	bl	8004548 <SX1276Read>
 800459a:	233f      	movs	r3, #63	@ 0x3f
 800459c:	4018      	ands	r0, r3
 800459e:	47a0      	blx	r4
}
 80045a0:	e7e3      	b.n	800456a <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80045a2:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 80045a4:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80045a6:	3330      	adds	r3, #48	@ 0x30
 80045a8:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 80045aa:	3631      	adds	r6, #49	@ 0x31
 80045ac:	7833      	ldrb	r3, [r6, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1db      	bne.n	800456a <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 80045b2:	0020      	movs	r0, r4
 80045b4:	3068      	adds	r0, #104	@ 0x68
 80045b6:	f001 fc9f 	bl	8005ef8 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80045ba:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80045bc:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80045be:	f7ff ffc3 	bl	8004548 <SX1276Read>
 80045c2:	0023      	movs	r3, r4
 80045c4:	0840      	lsrs	r0, r0, #1
 80045c6:	3332      	adds	r3, #50	@ 0x32
 80045c8:	4240      	negs	r0, r0
 80045ca:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80045cc:	201b      	movs	r0, #27
 80045ce:	f7ff ffbb 	bl	8004548 <SX1276Read>
 80045d2:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80045d4:	201c      	movs	r0, #28
 80045d6:	f7ff ffb7 	bl	8004548 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80045da:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80045dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004618 <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80045de:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80045e0:	b2c0      	uxtb	r0, r0
 80045e2:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 80045e4:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80045e6:	436b      	muls	r3, r5
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 80045e8:	3080      	adds	r0, #128	@ 0x80
 80045ea:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 80045ec:	18c0      	adds	r0, r0, r3
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80045ee:	6360      	str	r0, [r4, #52]	@ 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80045f0:	200c      	movs	r0, #12
 80045f2:	f7ff ffa9 	bl	8004548 <SX1276Read>
 80045f6:	3438      	adds	r4, #56	@ 0x38
 80045f8:	0940      	lsrs	r0, r0, #5
 80045fa:	7020      	strb	r0, [r4, #0]
 80045fc:	e7b5      	b.n	800456a <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 80045fe:	7963      	ldrb	r3, [r4, #5]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d1b2      	bne.n	800456a <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004604:	3453      	adds	r4, #83	@ 0x53
 8004606:	7823      	ldrb	r3, [r4, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ae      	beq.n	800456a <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800460c:	0029      	movs	r1, r5
 800460e:	e7b7      	b.n	8004580 <SX1276OnDio2Irq+0x24>
 8004610:	20000460 	.word	0x20000460
 8004614:	200004e0 	.word	0x200004e0
 8004618:	00003d09 	.word	0x00003d09

0800461c <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <SX1276OnDio4Irq+0x18>)
 800461e:	795a      	ldrb	r2, [r3, #5]
 8004620:	2a00      	cmp	r2, #0
 8004622:	d105      	bne.n	8004630 <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8004624:	3330      	adds	r3, #48	@ 0x30
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	2a00      	cmp	r2, #0
 800462a:	d101      	bne.n	8004630 <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800462c:	3201      	adds	r2, #1
 800462e:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 8004630:	4770      	bx	lr
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	20000460 	.word	0x20000460

08004638 <SX1276OnDio3Irq>:
{
 8004638:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800463a:	4b12      	ldr	r3, [pc, #72]	@ (8004684 <SX1276OnDio3Irq+0x4c>)
 800463c:	795c      	ldrb	r4, [r3, #5]
 800463e:	2c01      	cmp	r4, #1
 8004640:	d112      	bne.n	8004668 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8004642:	2012      	movs	r0, #18
 8004644:	f7ff ff80 	bl	8004548 <SX1276Read>
 8004648:	0005      	movs	r5, r0
 800464a:	4e0f      	ldr	r6, [pc, #60]	@ (8004688 <SX1276OnDio3Irq+0x50>)
 800464c:	4025      	ands	r5, r4
 800464e:	4220      	tst	r0, r4
 8004650:	d00b      	beq.n	800466a <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8004652:	2105      	movs	r1, #5
 8004654:	2012      	movs	r0, #18
 8004656:	f7ff ff2c 	bl	80044b2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800465a:	6833      	ldr	r3, [r6, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d003      	beq.n	8004668 <SX1276OnDio3Irq+0x30>
 8004660:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 8004662:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <SX1276OnDio3Irq+0x48>
}
 8004668:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800466a:	2104      	movs	r1, #4
 800466c:	2012      	movs	r0, #18
 800466e:	f7ff ff20 	bl	80044b2 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004672:	6833      	ldr	r3, [r6, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f7      	beq.n	8004668 <SX1276OnDio3Irq+0x30>
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d0f4      	beq.n	8004668 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800467e:	0028      	movs	r0, r5
 8004680:	4798      	blx	r3
}
 8004682:	e7f1      	b.n	8004668 <SX1276OnDio3Irq+0x30>
 8004684:	20000460 	.word	0x20000460
 8004688:	200004e0 	.word	0x200004e0

0800468c <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 8004690:	2805      	cmp	r0, #5
 8004692:	d111      	bne.n	80046b8 <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 8004694:	2001      	movs	r0, #1
 8004696:	f7fd f8e9 	bl	800186c <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 800469a:	2001      	movs	r0, #1
 800469c:	f7fd fa5e 	bl	8001b5c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80046a0:	2001      	movs	r0, #1
 80046a2:	f7ff ff51 	bl	8004548 <SX1276Read>
 80046a6:	2307      	movs	r3, #7
 80046a8:	0001      	movs	r1, r0
 80046aa:	4399      	bics	r1, r3
 80046ac:	4321      	orrs	r1, r4
 80046ae:	b2c9      	uxtb	r1, r1
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80046b0:	2001      	movs	r0, #1
 80046b2:	f7ff fefe 	bl	80044b2 <SX1276Write>
}
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 80046b8:	2009      	movs	r0, #9
 80046ba:	f7ff ff45 	bl	8004548 <SX1276Read>
 80046be:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 80046c0:	2001      	movs	r0, #1
 80046c2:	f7fd f8d3 	bl	800186c <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 80046c6:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80046c8:	062d      	lsls	r5, r5, #24
 80046ca:	d400      	bmi.n	80046ce <SX1276SetOpMode.part.0+0x42>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 80046cc:	2002      	movs	r0, #2
 80046ce:	f7fd fa45 	bl	8001b5c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80046d2:	2001      	movs	r0, #1
 80046d4:	f7ff ff38 	bl	8004548 <SX1276Read>
 80046d8:	2307      	movs	r3, #7
 80046da:	4398      	bics	r0, r3
 80046dc:	4304      	orrs	r4, r0
 80046de:	b2e1      	uxtb	r1, r4
 80046e0:	e7e6      	b.n	80046b0 <SX1276SetOpMode.part.0+0x24>
	...

080046e4 <SX1276SetStby>:
{
 80046e4:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 80046e6:	4c09      	ldr	r4, [pc, #36]	@ (800470c <SX1276SetStby+0x28>)
 80046e8:	4809      	ldr	r0, [pc, #36]	@ (8004710 <SX1276SetStby+0x2c>)
 80046ea:	f001 fc05 	bl	8005ef8 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 80046ee:	0020      	movs	r0, r4
 80046f0:	301c      	adds	r0, #28
 80046f2:	f001 fc01 	bl	8005ef8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 80046f6:	4807      	ldr	r0, [pc, #28]	@ (8004714 <SX1276SetStby+0x30>)
 80046f8:	4c07      	ldr	r4, [pc, #28]	@ (8004718 <SX1276SetStby+0x34>)
 80046fa:	f001 fbfd 	bl	8005ef8 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 80046fe:	2001      	movs	r0, #1
 8004700:	f7ff ffc4 	bl	800468c <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 8004704:	2300      	movs	r3, #0
 8004706:	7123      	strb	r3, [r4, #4]
}
 8004708:	bd10      	pop	{r4, pc}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	200004e0 	.word	0x200004e0
 8004710:	200004e4 	.word	0x200004e4
 8004714:	200004c8 	.word	0x200004c8
 8004718:	20000460 	.word	0x20000460

0800471c <SX1276SetRx>:
{
 800471c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    TimerStop( &TxTimeoutTimer );
 800471e:	4b7a      	ldr	r3, [pc, #488]	@ (8004908 <SX1276SetRx+0x1ec>)
{
 8004720:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 8004722:	487a      	ldr	r0, [pc, #488]	@ (800490c <SX1276SetRx+0x1f0>)
 8004724:	9301      	str	r3, [sp, #4]
 8004726:	f001 fbe7 	bl	8005ef8 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 800472a:	4c79      	ldr	r4, [pc, #484]	@ (8004910 <SX1276SetRx+0x1f4>)
 800472c:	7965      	ldrb	r5, [r4, #5]
 800472e:	2d00      	cmp	r5, #0
 8004730:	d02f      	beq.n	8004792 <SX1276SetRx+0x76>
 8004732:	2600      	movs	r6, #0
 8004734:	2d01      	cmp	r5, #1
 8004736:	d151      	bne.n	80047dc <SX1276SetRx+0xc0>
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004738:	0023      	movs	r3, r4
 800473a:	3355      	adds	r3, #85	@ 0x55
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2641      	movs	r6, #65	@ 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8004740:	2033      	movs	r0, #51	@ 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004742:	2b00      	cmp	r3, #0
 8004744:	d100      	bne.n	8004748 <SX1276SetRx+0x2c>
 8004746:	e06f      	b.n	8004828 <SX1276SetRx+0x10c>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8004748:	f7ff fefe 	bl	8004548 <SX1276Read>
 800474c:	4330      	orrs	r0, r6
 800474e:	b2c1      	uxtb	r1, r0
 8004750:	2033      	movs	r0, #51	@ 0x33
 8004752:	f7ff feae 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004756:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004758:	203b      	movs	r0, #59	@ 0x3b
 800475a:	f7ff feaa 	bl	80044b2 <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800475e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8004760:	2031      	movs	r0, #49	@ 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 8004762:	2b08      	cmp	r3, #8
 8004764:	d900      	bls.n	8004768 <SX1276SetRx+0x4c>
 8004766:	e0b7      	b.n	80048d8 <SX1276SetRx+0x1bc>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8004768:	f7ff feee 	bl	8004548 <SX1276Read>
 800476c:	217f      	movs	r1, #127	@ 0x7f
 800476e:	4001      	ands	r1, r0
 8004770:	2031      	movs	r0, #49	@ 0x31
 8004772:	f7ff fe9e 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 8004776:	2030      	movs	r0, #48	@ 0x30
 8004778:	2100      	movs	r1, #0
 800477a:	f7ff fe9a 	bl	80044b2 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800477e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004780:	2808      	cmp	r0, #8
 8004782:	d864      	bhi.n	800484e <SX1276SetRx+0x132>
 8004784:	f7fb fcc8 	bl	8000118 <__gnu_thumb1_case_uqi>
 8004788:	8e87805a 	.word	0x8e87805a
 800478c:	a3a39c95 	.word	0xa3a39c95
 8004790:	a3          	.byte	0xa3
 8004791:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8004792:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004794:	2040      	movs	r0, #64	@ 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 8004796:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004798:	f7ff fed6 	bl	8004548 <SX1276Read>
 800479c:	2303      	movs	r3, #3
 800479e:	210c      	movs	r1, #12
 80047a0:	4018      	ands	r0, r3
 80047a2:	4301      	orrs	r1, r0
 80047a4:	2040      	movs	r0, #64	@ 0x40
 80047a6:	f7ff fe84 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80047aa:	2041      	movs	r0, #65	@ 0x41
 80047ac:	f7ff fecc 	bl	8004548 <SX1276Read>
 80047b0:	213f      	movs	r1, #63	@ 0x3f
 80047b2:	4249      	negs	r1, r1
 80047b4:	4301      	orrs	r1, r0
 80047b6:	b2c9      	uxtb	r1, r1
 80047b8:	2041      	movs	r0, #65	@ 0x41
 80047ba:	f7ff fe7a 	bl	80044b2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80047be:	2035      	movs	r0, #53	@ 0x35
 80047c0:	f7ff fec2 	bl	8004548 <SX1276Read>
 80047c4:	233f      	movs	r3, #63	@ 0x3f
 80047c6:	4018      	ands	r0, r3
 80047c8:	0023      	movs	r3, r4
 80047ca:	333e      	adds	r3, #62	@ 0x3e
 80047cc:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80047ce:	211e      	movs	r1, #30
 80047d0:	200d      	movs	r0, #13
 80047d2:	f7ff fe6e 	bl	80044b2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80047d6:	8625      	strh	r5, [r4, #48]	@ 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80047d8:	87a5      	strh	r5, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80047da:	8765      	strh	r5, [r4, #58]	@ 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 80047dc:	2280      	movs	r2, #128	@ 0x80
 80047de:	2100      	movs	r1, #0
 80047e0:	484c      	ldr	r0, [pc, #304]	@ (8004914 <SX1276SetRx+0x1f8>)
 80047e2:	0052      	lsls	r2, r2, #1
 80047e4:	f001 fda0 	bl	8006328 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 80047e8:	2301      	movs	r3, #1
 80047ea:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 80047ec:	2f00      	cmp	r7, #0
 80047ee:	d008      	beq.n	8004802 <SX1276SetRx+0xe6>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80047f0:	9d01      	ldr	r5, [sp, #4]
 80047f2:	0039      	movs	r1, r7
 80047f4:	3504      	adds	r5, #4
 80047f6:	0028      	movs	r0, r5
 80047f8:	f001 fc10 	bl	800601c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80047fc:	0028      	movs	r0, r5
 80047fe:	f001 fbcf 	bl	8005fa0 <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 8004802:	7963      	ldrb	r3, [r4, #5]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d000      	beq.n	800480a <SX1276SetRx+0xee>
 8004808:	e077      	b.n	80048fa <SX1276SetRx+0x1de>
    if( opMode == RF_OPMODE_SLEEP )
 800480a:	2005      	movs	r0, #5
 800480c:	f7ff ff3e 	bl	800468c <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 8004810:	2e00      	cmp	r6, #0
 8004812:	d108      	bne.n	8004826 <SX1276SetRx+0x10a>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8004814:	0025      	movs	r5, r4
 8004816:	3568      	adds	r5, #104	@ 0x68
 8004818:	0028      	movs	r0, r5
 800481a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800481c:	f001 fbfe 	bl	800601c <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 8004820:	0028      	movs	r0, r5
 8004822:	f001 fbbd 	bl	8005fa0 <UTIL_TIMER_Start>
}
 8004826:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004828:	f7ff fe8e 	bl	8004548 <SX1276Read>
 800482c:	43b0      	bics	r0, r6
 800482e:	4305      	orrs	r5, r0
 8004830:	b2e9      	uxtb	r1, r5
 8004832:	2033      	movs	r0, #51	@ 0x33
 8004834:	f7ff fe3d 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004838:	211d      	movs	r1, #29
 800483a:	e78d      	b.n	8004758 <SX1276SetRx+0x3c>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800483c:	202f      	movs	r0, #47	@ 0x2f
 800483e:	2148      	movs	r1, #72	@ 0x48
 8004840:	f7ff fe37 	bl	80044b2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8004844:	68a0      	ldr	r0, [r4, #8]
 8004846:	4b34      	ldr	r3, [pc, #208]	@ (8004918 <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8004848:	18c0      	adds	r0, r0, r3
 800484a:	f7ff fe3b 	bl	80044c4 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800484e:	0023      	movs	r3, r4
 8004850:	3356      	adds	r3, #86	@ 0x56
 8004852:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004854:	0023      	movs	r3, r4
 8004856:	3353      	adds	r3, #83	@ 0x53
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d044      	beq.n	80048e8 <SX1276SetRx+0x1cc>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800485e:	211d      	movs	r1, #29
 8004860:	2011      	movs	r0, #17
 8004862:	f7ff fe26 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8004866:	2040      	movs	r0, #64	@ 0x40
 8004868:	f7ff fe6e 	bl	8004548 <SX1276Read>
 800486c:	2133      	movs	r1, #51	@ 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800486e:	4001      	ands	r1, r0
 8004870:	2040      	movs	r0, #64	@ 0x40
 8004872:	f7ff fe1e 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8004876:	2100      	movs	r1, #0
 8004878:	200f      	movs	r0, #15
 800487a:	f7ff fe1a 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800487e:	2100      	movs	r1, #0
 8004880:	200d      	movs	r0, #13
 8004882:	f7ff fe16 	bl	80044b2 <SX1276Write>
        break;
 8004886:	e7a9      	b.n	80047dc <SX1276SetRx+0xc0>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004888:	202f      	movs	r0, #47	@ 0x2f
 800488a:	2144      	movs	r1, #68	@ 0x44
 800488c:	f7ff fe11 	bl	80044b2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8004890:	68a0      	ldr	r0, [r4, #8]
 8004892:	4b22      	ldr	r3, [pc, #136]	@ (800491c <SX1276SetRx+0x200>)
 8004894:	e7d8      	b.n	8004848 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004896:	202f      	movs	r0, #47	@ 0x2f
 8004898:	2144      	movs	r1, #68	@ 0x44
 800489a:	f7ff fe0a 	bl	80044b2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800489e:	68a0      	ldr	r0, [r4, #8]
 80048a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004920 <SX1276SetRx+0x204>)
 80048a2:	e7d1      	b.n	8004848 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80048a4:	202f      	movs	r0, #47	@ 0x2f
 80048a6:	2144      	movs	r1, #68	@ 0x44
 80048a8:	f7ff fe03 	bl	80044b2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80048ac:	68a0      	ldr	r0, [r4, #8]
 80048ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004924 <SX1276SetRx+0x208>)
 80048b0:	e7ca      	b.n	8004848 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80048b2:	202f      	movs	r0, #47	@ 0x2f
 80048b4:	2144      	movs	r1, #68	@ 0x44
 80048b6:	f7ff fdfc 	bl	80044b2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80048ba:	68a0      	ldr	r0, [r4, #8]
 80048bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004928 <SX1276SetRx+0x20c>)
 80048be:	e7c3      	b.n	8004848 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80048c0:	202f      	movs	r0, #47	@ 0x2f
 80048c2:	2144      	movs	r1, #68	@ 0x44
 80048c4:	f7ff fdf5 	bl	80044b2 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80048c8:	68a0      	ldr	r0, [r4, #8]
 80048ca:	4b18      	ldr	r3, [pc, #96]	@ (800492c <SX1276SetRx+0x210>)
 80048cc:	e7bc      	b.n	8004848 <SX1276SetRx+0x12c>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80048ce:	2140      	movs	r1, #64	@ 0x40
 80048d0:	202f      	movs	r0, #47	@ 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80048d2:	f7ff fdee 	bl	80044b2 <SX1276Write>
 80048d6:	e7ba      	b.n	800484e <SX1276SetRx+0x132>
 80048d8:	f7ff fe36 	bl	8004548 <SX1276Read>
 80048dc:	2180      	movs	r1, #128	@ 0x80
 80048de:	4249      	negs	r1, r1
 80048e0:	4301      	orrs	r1, r0
 80048e2:	b2c9      	uxtb	r1, r1
 80048e4:	2031      	movs	r0, #49	@ 0x31
 80048e6:	e7f4      	b.n	80048d2 <SX1276SetRx+0x1b6>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80048e8:	211f      	movs	r1, #31
 80048ea:	2011      	movs	r0, #17
 80048ec:	f7ff fde1 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80048f0:	2040      	movs	r0, #64	@ 0x40
 80048f2:	f7ff fe29 	bl	8004548 <SX1276Read>
 80048f6:	213f      	movs	r1, #63	@ 0x3f
 80048f8:	e7b9      	b.n	800486e <SX1276SetRx+0x152>
        if( rxContinuous == true )
 80048fa:	2005      	movs	r0, #5
 80048fc:	2e00      	cmp	r6, #0
 80048fe:	d100      	bne.n	8004902 <SX1276SetRx+0x1e6>
    if( opMode == RF_OPMODE_SLEEP )
 8004900:	2006      	movs	r0, #6
 8004902:	f7ff fec3 	bl	800468c <SX1276SetOpMode.part.0>
}
 8004906:	e78e      	b.n	8004826 <SX1276SetRx+0x10a>
 8004908:	200004e0 	.word	0x200004e0
 800490c:	200004fc 	.word	0x200004fc
 8004910:	20000460 	.word	0x20000460
 8004914:	20000514 	.word	0x20000514
 8004918:	00001e82 	.word	0x00001e82
 800491c:	000028b4 	.word	0x000028b4
 8004920:	00003d04 	.word	0x00003d04
 8004924:	0000515e 	.word	0x0000515e
 8004928:	00007a12 	.word	0x00007a12
 800492c:	0000a2c6 	.word	0x0000a2c6

08004930 <SX1276StartCad>:
{
 8004930:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 8004932:	4c0b      	ldr	r4, [pc, #44]	@ (8004960 <SX1276StartCad+0x30>)
 8004934:	7963      	ldrb	r3, [r4, #5]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d110      	bne.n	800495c <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800493a:	21fa      	movs	r1, #250	@ 0xfa
 800493c:	2011      	movs	r0, #17
 800493e:	f7ff fdb8 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8004942:	2040      	movs	r0, #64	@ 0x40
 8004944:	f7ff fe00 	bl	8004548 <SX1276Read>
 8004948:	2503      	movs	r5, #3
 800494a:	43a8      	bics	r0, r5
 800494c:	b2c1      	uxtb	r1, r0
 800494e:	2040      	movs	r0, #64	@ 0x40
 8004950:	f7ff fdaf 	bl	80044b2 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8004954:	2007      	movs	r0, #7
 8004956:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 8004958:	f7ff fe98 	bl	800468c <SX1276SetOpMode.part.0>
}
 800495c:	bd70      	pop	{r4, r5, r6, pc}
 800495e:	46c0      	nop			@ (mov r8, r8)
 8004960:	20000460 	.word	0x20000460

08004964 <SX1276ReadRssi>:
{
 8004964:	b510      	push	{r4, lr}
    switch( modem )
 8004966:	2800      	cmp	r0, #0
 8004968:	d004      	beq.n	8004974 <SX1276ReadRssi+0x10>
 800496a:	2801      	cmp	r0, #1
 800496c:	d00a      	beq.n	8004984 <SX1276ReadRssi+0x20>
 800496e:	2001      	movs	r0, #1
 8004970:	4240      	negs	r0, r0
}
 8004972:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004974:	2011      	movs	r0, #17
 8004976:	f7ff fde7 	bl	8004548 <SX1276Read>
 800497a:	0840      	lsrs	r0, r0, #1
 800497c:	b2c0      	uxtb	r0, r0
 800497e:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004980:	b200      	sxth	r0, r0
 8004982:	e7f6      	b.n	8004972 <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004984:	4b06      	ldr	r3, [pc, #24]	@ (80049a0 <SX1276ReadRssi+0x3c>)
 8004986:	4a07      	ldr	r2, [pc, #28]	@ (80049a4 <SX1276ReadRssi+0x40>)
 8004988:	689b      	ldr	r3, [r3, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800498a:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800498c:	4293      	cmp	r3, r2
 800498e:	d903      	bls.n	8004998 <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8004990:	f7ff fdda 	bl	8004548 <SX1276Read>
 8004994:	389d      	subs	r0, #157	@ 0x9d
 8004996:	e7f3      	b.n	8004980 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004998:	f7ff fdd6 	bl	8004548 <SX1276Read>
 800499c:	38a4      	subs	r0, #164	@ 0xa4
 800499e:	e7ef      	b.n	8004980 <SX1276ReadRssi+0x1c>
 80049a0:	20000460 	.word	0x20000460
 80049a4:	1f4add40 	.word	0x1f4add40

080049a8 <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 80049a8:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80049aa:	2001      	movs	r0, #1
 80049ac:	f7ff fdcc 	bl	8004548 <SX1276Read>
 80049b0:	21f8      	movs	r1, #248	@ 0xf8
 80049b2:	4001      	ands	r1, r0
 80049b4:	2001      	movs	r0, #1
 80049b6:	f7ff fd7c 	bl	80044b2 <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 80049ba:	2000      	movs	r0, #0
 80049bc:	f7fd f8ce 	bl	8001b5c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 80049c0:	2000      	movs	r0, #0
 80049c2:	f7fc ff53 	bl	800186c <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 80049c6:	bd10      	pop	{r4, pc}

080049c8 <SX1276SetModem>:
{
 80049c8:	b510      	push	{r4, lr}
 80049ca:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80049cc:	2001      	movs	r0, #1
 80049ce:	f7ff fdbb 	bl	8004548 <SX1276Read>
 80049d2:	b2c0      	uxtb	r0, r0
 80049d4:	4b16      	ldr	r3, [pc, #88]	@ (8004a30 <SX1276SetModem+0x68>)
 80049d6:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 80049d8:	42a0      	cmp	r0, r4
 80049da:	d101      	bne.n	80049e0 <SX1276SetModem+0x18>
 80049dc:	7158      	strb	r0, [r3, #5]
}
 80049de:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 80049e0:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 80049e2:	2c01      	cmp	r4, #1
 80049e4:	d012      	beq.n	8004a0c <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80049e6:	f7ff ffdf 	bl	80049a8 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 80049ea:	2001      	movs	r0, #1
 80049ec:	f7ff fdac 	bl	8004548 <SX1276Read>
 80049f0:	217f      	movs	r1, #127	@ 0x7f
 80049f2:	4001      	ands	r1, r0
 80049f4:	2001      	movs	r0, #1
 80049f6:	f7ff fd5c 	bl	80044b2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 80049fa:	2100      	movs	r1, #0
 80049fc:	2040      	movs	r0, #64	@ 0x40
 80049fe:	f7ff fd58 	bl	80044b2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004a02:	2130      	movs	r1, #48	@ 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004a04:	2041      	movs	r0, #65	@ 0x41
 8004a06:	f7ff fd54 	bl	80044b2 <SX1276Write>
        break;
 8004a0a:	e7e8      	b.n	80049de <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004a0c:	f7ff ffcc 	bl	80049a8 <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004a10:	0020      	movs	r0, r4
 8004a12:	f7ff fd99 	bl	8004548 <SX1276Read>
 8004a16:	2180      	movs	r1, #128	@ 0x80
 8004a18:	4249      	negs	r1, r1
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	b2c9      	uxtb	r1, r1
 8004a1e:	0020      	movs	r0, r4
 8004a20:	f7ff fd47 	bl	80044b2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004a24:	2100      	movs	r1, #0
 8004a26:	2040      	movs	r0, #64	@ 0x40
 8004a28:	f7ff fd43 	bl	80044b2 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	e7e9      	b.n	8004a04 <SX1276SetModem+0x3c>
 8004a30:	20000460 	.word	0x20000460

08004a34 <SX1276SetMaxPayloadLength>:
{
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	0004      	movs	r4, r0
 8004a38:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 8004a3a:	f7ff ffc5 	bl	80049c8 <SX1276SetModem>
    switch( modem )
 8004a3e:	2c00      	cmp	r4, #0
 8004a40:	d002      	beq.n	8004a48 <SX1276SetMaxPayloadLength+0x14>
 8004a42:	2c01      	cmp	r4, #1
 8004a44:	d009      	beq.n	8004a5a <SX1276SetMaxPayloadLength+0x26>
}
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 8004a48:	4b05      	ldr	r3, [pc, #20]	@ (8004a60 <SX1276SetMaxPayloadLength+0x2c>)
 8004a4a:	7fdb      	ldrb	r3, [r3, #31]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1fa      	bne.n	8004a46 <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004a50:	0029      	movs	r1, r5
 8004a52:	2032      	movs	r0, #50	@ 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004a54:	f7ff fd2d 	bl	80044b2 <SX1276Write>
}
 8004a58:	e7f5      	b.n	8004a46 <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004a5a:	0029      	movs	r1, r5
 8004a5c:	2023      	movs	r0, #35	@ 0x23
 8004a5e:	e7f9      	b.n	8004a54 <SX1276SetMaxPayloadLength+0x20>
 8004a60:	20000463 	.word	0x20000463

08004a64 <SX1276SetPublicNetwork>:
{
 8004a64:	b510      	push	{r4, lr}
 8004a66:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 8004a68:	2001      	movs	r0, #1
 8004a6a:	f7ff ffad 	bl	80049c8 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004a6e:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004a70:	2134      	movs	r1, #52	@ 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004a72:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 8004a74:	2c00      	cmp	r4, #0
 8004a76:	d100      	bne.n	8004a7a <SX1276SetPublicNetwork+0x16>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004a78:	2112      	movs	r1, #18
 8004a7a:	2039      	movs	r0, #57	@ 0x39
 8004a7c:	f7ff fd19 	bl	80044b2 <SX1276Write>
}
 8004a80:	bd10      	pop	{r4, pc}
 8004a82:	46c0      	nop			@ (mov r8, r8)
 8004a84:	200004bc 	.word	0x200004bc

08004a88 <SX1276SetRxConfig>:
{
 8004a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a8a:	b08b      	sub	sp, #44	@ 0x2c
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	ab10      	add	r3, sp, #64	@ 0x40
 8004a90:	cb80      	ldmia	r3!, {r7}
 8004a92:	0014      	movs	r4, r2
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	aa0a      	add	r2, sp, #40	@ 0x28
 8004a98:	9300      	str	r3, [sp, #0]
 8004a9a:	ab12      	add	r3, sp, #72	@ 0x48
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	0005      	movs	r5, r0
 8004aa0:	9304      	str	r3, [sp, #16]
 8004aa2:	ab13      	add	r3, sp, #76	@ 0x4c
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	000e      	movs	r6, r1
 8004aa8:	9301      	str	r3, [sp, #4]
 8004aaa:	ab14      	add	r3, sp, #80	@ 0x50
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	9302      	str	r3, [sp, #8]
 8004ab0:	ab15      	add	r3, sp, #84	@ 0x54
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	9303      	str	r3, [sp, #12]
 8004ab6:	ab16      	add	r3, sp, #88	@ 0x58
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	9308      	str	r3, [sp, #32]
 8004abc:	ab17      	add	r3, sp, #92	@ 0x5c
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ac2:	2319      	movs	r3, #25
 8004ac4:	189b      	adds	r3, r3, r2
 8004ac6:	7fdb      	ldrb	r3, [r3, #31]
 8004ac8:	9306      	str	r3, [sp, #24]
 8004aca:	231d      	movs	r3, #29
 8004acc:	189b      	adds	r3, r3, r2
 8004ace:	7fdb      	ldrb	r3, [r3, #31]
 8004ad0:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 8004ad2:	f7ff ff79 	bl	80049c8 <SX1276SetModem>
    switch( modem )
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	d003      	beq.n	8004ae2 <SX1276SetRxConfig+0x5a>
 8004ada:	2d01      	cmp	r5, #1
 8004adc:	d067      	beq.n	8004bae <SX1276SetRxConfig+0x126>
}
 8004ade:	b00b      	add	sp, #44	@ 0x2c
 8004ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004ae2:	20fa      	movs	r0, #250	@ 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004ae4:	4d9a      	ldr	r5, [pc, #616]	@ (8004d50 <SX1276SetRxConfig+0x2c8>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004ae6:	9a01      	ldr	r2, [sp, #4]
 8004ae8:	1ceb      	adds	r3, r5, #3
 8004aea:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8004aec:	9a02      	ldr	r2, [sp, #8]
 8004aee:	1d2b      	adds	r3, r5, #4
 8004af0:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004af2:	9a03      	ldr	r2, [sp, #12]
 8004af4:	1d6b      	adds	r3, r5, #5
 8004af6:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8004af8:	9a06      	ldr	r2, [sp, #24]
 8004afa:	1dab      	adds	r3, r5, #6
 8004afc:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8004afe:	9a07      	ldr	r2, [sp, #28]
 8004b00:	1deb      	adds	r3, r5, #7
 8004b02:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004b04:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004b06:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004b08:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004b0a:	9b04      	ldr	r3, [sp, #16]
 8004b0c:	0021      	movs	r1, r4
 8004b0e:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 8004b10:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004b12:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8004b14:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004b16:	f7fb fb09 	bl	800012c <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004b1a:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8004b1c:	62e8      	str	r0, [r5, #44]	@ 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004b1e:	488d      	ldr	r0, [pc, #564]	@ (8004d54 <SX1276SetRxConfig+0x2cc>)
 8004b20:	f7fb fb04 	bl	800012c <__udivsi3>
 8004b24:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8004b26:	0a01      	lsrs	r1, r0, #8
 8004b28:	b2c9      	uxtb	r1, r1
 8004b2a:	2002      	movs	r0, #2
 8004b2c:	f7ff fcc1 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8004b30:	b2e1      	uxtb	r1, r4
 8004b32:	2003      	movs	r0, #3
 8004b34:	f7ff fcbd 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8004b38:	0030      	movs	r0, r6
 8004b3a:	f7ff fc11 	bl	8004360 <GetFskBandwidthRegValue>
 8004b3e:	0001      	movs	r1, r0
 8004b40:	2012      	movs	r0, #18
 8004b42:	f7ff fcb6 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8004b46:	0038      	movs	r0, r7
 8004b48:	f7ff fc0a 	bl	8004360 <GetFskBandwidthRegValue>
 8004b4c:	0001      	movs	r1, r0
 8004b4e:	2013      	movs	r0, #19
 8004b50:	f7ff fcaf 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004b54:	9b00      	ldr	r3, [sp, #0]
 8004b56:	2025      	movs	r0, #37	@ 0x25
 8004b58:	0a19      	lsrs	r1, r3, #8
 8004b5a:	f7ff fcaa 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004b5e:	466b      	mov	r3, sp
 8004b60:	2026      	movs	r0, #38	@ 0x26
 8004b62:	7819      	ldrb	r1, [r3, #0]
 8004b64:	f7ff fca5 	bl	80044b2 <SX1276Write>
            if( fixLen == 1 )
 8004b68:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8004b6a:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d100      	bne.n	8004b72 <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8004b70:	21ff      	movs	r1, #255	@ 0xff
 8004b72:	2032      	movs	r0, #50	@ 0x32
 8004b74:	f7ff fc9d 	bl	80044b2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004b78:	2030      	movs	r0, #48	@ 0x30
 8004b7a:	f7ff fce5 	bl	8004548 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004b7e:	2101      	movs	r1, #1
 8004b80:	9b01      	ldr	r3, [sp, #4]
 8004b82:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 8004b84:	9b03      	ldr	r3, [sp, #12]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004b86:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 8004b88:	011b      	lsls	r3, r3, #4
            SX1276Write( REG_PACKETCONFIG1,
 8004b8a:	4319      	orrs	r1, r3
 8004b8c:	236f      	movs	r3, #111	@ 0x6f
 8004b8e:	4018      	ands	r0, r3
 8004b90:	4301      	orrs	r1, r0
 8004b92:	b2c9      	uxtb	r1, r1
 8004b94:	2030      	movs	r0, #48	@ 0x30
 8004b96:	f7ff fc8c 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8004b9a:	2031      	movs	r0, #49	@ 0x31
 8004b9c:	f7ff fcd4 	bl	8004548 <SX1276Read>
 8004ba0:	2140      	movs	r1, #64	@ 0x40
 8004ba2:	4301      	orrs	r1, r0
 8004ba4:	2031      	movs	r0, #49	@ 0x31
 8004ba6:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004ba8:	f7ff fc83 	bl	80044b2 <SX1276Write>
}
 8004bac:	e797      	b.n	8004ade <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 8004bae:	2e02      	cmp	r6, #2
 8004bb0:	d900      	bls.n	8004bb4 <SX1276SetRxConfig+0x12c>
                while( 1 );
 8004bb2:	e7fe      	b.n	8004bb2 <SX1276SetRxConfig+0x12a>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004bb4:	4b66      	ldr	r3, [pc, #408]	@ (8004d50 <SX1276SetRxConfig+0x2c8>)
            SX1276.Settings.LoRa.Coderate = coderate;
 8004bb6:	9905      	ldr	r1, [sp, #20]
 8004bb8:	001a      	movs	r2, r3
 8004bba:	324d      	adds	r2, #77	@ 0x4d
 8004bbc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8004bbe:	001a      	movs	r2, r3
 8004bc0:	9900      	ldr	r1, [sp, #0]
 8004bc2:	324e      	adds	r2, #78	@ 0x4e
 8004bc4:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	9901      	ldr	r1, [sp, #4]
 8004bca:	3250      	adds	r2, #80	@ 0x50
 8004bcc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8004bce:	001a      	movs	r2, r3
 8004bd0:	9902      	ldr	r1, [sp, #8]
 8004bd2:	3251      	adds	r2, #81	@ 0x51
 8004bd4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8004bd6:	001a      	movs	r2, r3
 8004bd8:	9903      	ldr	r1, [sp, #12]
 8004bda:	3252      	adds	r2, #82	@ 0x52
 8004bdc:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8004bde:	001a      	movs	r2, r3
 8004be0:	9908      	ldr	r1, [sp, #32]
 8004be2:	3253      	adds	r2, #83	@ 0x53
 8004be4:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8004be6:	001a      	movs	r2, r3
 8004be8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004bea:	3254      	adds	r2, #84	@ 0x54
 8004bec:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004bee:	001a      	movs	r2, r3
 8004bf0:	9906      	ldr	r1, [sp, #24]
 8004bf2:	3255      	adds	r2, #85	@ 0x55
            bandwidth += 7;
 8004bf4:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004bf6:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8004bf8:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004bfa:	645f      	str	r7, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8004bfc:	649c      	str	r4, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8004bfe:	3356      	adds	r3, #86	@ 0x56
            else if( datarate < 6 )
 8004c00:	0025      	movs	r5, r4
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8004c02:	701a      	strb	r2, [r3, #0]
            else if( datarate < 6 )
 8004c04:	2c06      	cmp	r4, #6
 8004c06:	d300      	bcc.n	8004c0a <SX1276SetRxConfig+0x182>
 8004c08:	e082      	b.n	8004d10 <SX1276SetRxConfig+0x288>
 8004c0a:	2506      	movs	r5, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004c0c:	2f07      	cmp	r7, #7
 8004c0e:	d000      	beq.n	8004c12 <SX1276SetRxConfig+0x18a>
 8004c10:	e083      	b.n	8004d1a <SX1276SetRxConfig+0x292>
 8004c12:	002a      	movs	r2, r5
 8004c14:	2300      	movs	r3, #0
 8004c16:	2101      	movs	r1, #1
 8004c18:	3a0b      	subs	r2, #11
 8004c1a:	4291      	cmp	r1, r2
 8004c1c:	415b      	adcs	r3, r3
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	4a4d      	ldr	r2, [pc, #308]	@ (8004d58 <SX1276SetRxConfig+0x2d0>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004c22:	201d      	movs	r0, #29
 8004c24:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004c26:	9206      	str	r2, [sp, #24]
 8004c28:	4e49      	ldr	r6, [pc, #292]	@ (8004d50 <SX1276SetRxConfig+0x2c8>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004c2a:	f7ff fc8d 	bl	8004548 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004c2e:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004c30:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004c32:	0059      	lsls	r1, r3, #1
 8004c34:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004c36:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004c38:	4319      	orrs	r1, r3
 8004c3a:	013b      	lsls	r3, r7, #4
 8004c3c:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004c3e:	b2c9      	uxtb	r1, r1
 8004c40:	f7ff fc37 	bl	80044b2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8004c44:	201e      	movs	r0, #30
 8004c46:	f7ff fc7f 	bl	8004548 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8004c4a:	9b04      	ldr	r3, [sp, #16]
 8004c4c:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004c4e:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8004c50:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004c52:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004c54:	4319      	orrs	r1, r3
 8004c56:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8004c58:	2508      	movs	r5, #8
 8004c5a:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004c5c:	4301      	orrs	r1, r0
 8004c5e:	b2c9      	uxtb	r1, r1
 8004c60:	201e      	movs	r0, #30
 8004c62:	f7ff fc26 	bl	80044b2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004c66:	2026      	movs	r0, #38	@ 0x26
 8004c68:	f7ff fc6e 	bl	8004548 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004c6c:	9b06      	ldr	r3, [sp, #24]
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004c6e:	43a8      	bics	r0, r5
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004c70:	7819      	ldrb	r1, [r3, #0]
 8004c72:	00c9      	lsls	r1, r1, #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004c74:	4301      	orrs	r1, r0
 8004c76:	b2c9      	uxtb	r1, r1
 8004c78:	2026      	movs	r0, #38	@ 0x26
 8004c7a:	f7ff fc1a 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8004c7e:	466b      	mov	r3, sp
 8004c80:	201f      	movs	r0, #31
 8004c82:	7c19      	ldrb	r1, [r3, #16]
 8004c84:	f7ff fc15 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8004c88:	9b00      	ldr	r3, [sp, #0]
 8004c8a:	2020      	movs	r0, #32
 8004c8c:	0a19      	lsrs	r1, r3, #8
 8004c8e:	f7ff fc10 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8004c92:	466b      	mov	r3, sp
 8004c94:	2021      	movs	r0, #33	@ 0x21
 8004c96:	7819      	ldrb	r1, [r3, #0]
 8004c98:	f7ff fc0b 	bl	80044b2 <SX1276Write>
            if( fixLen == 1 )
 8004c9c:	9b01      	ldr	r3, [sp, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <SX1276SetRxConfig+0x222>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8004ca2:	2022      	movs	r0, #34	@ 0x22
 8004ca4:	9902      	ldr	r1, [sp, #8]
 8004ca6:	f7ff fc04 	bl	80044b2 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004caa:	0033      	movs	r3, r6
 8004cac:	3353      	adds	r3, #83	@ 0x53
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00f      	beq.n	8004cd4 <SX1276SetRxConfig+0x24c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8004cb4:	2044      	movs	r0, #68	@ 0x44
 8004cb6:	f7ff fc47 	bl	8004548 <SX1276Read>
 8004cba:	2180      	movs	r1, #128	@ 0x80
 8004cbc:	4249      	negs	r1, r1
 8004cbe:	4301      	orrs	r1, r0
 8004cc0:	b2c9      	uxtb	r1, r1
 8004cc2:	2044      	movs	r0, #68	@ 0x44
 8004cc4:	f7ff fbf5 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8004cc8:	0033      	movs	r3, r6
 8004cca:	3354      	adds	r3, #84	@ 0x54
 8004ccc:	2024      	movs	r0, #36	@ 0x24
 8004cce:	7819      	ldrb	r1, [r3, #0]
 8004cd0:	f7ff fbef 	bl	80044b2 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004cd4:	2f09      	cmp	r7, #9
 8004cd6:	d12d      	bne.n	8004d34 <SX1276SetRxConfig+0x2ac>
 8004cd8:	4b20      	ldr	r3, [pc, #128]	@ (8004d5c <SX1276SetRxConfig+0x2d4>)
 8004cda:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004cdc:	2102      	movs	r1, #2
 8004cde:	2036      	movs	r0, #54	@ 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d923      	bls.n	8004d2c <SX1276SetRxConfig+0x2a4>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004ce4:	f7ff fbe5 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8004ce8:	2164      	movs	r1, #100	@ 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8004cea:	203a      	movs	r0, #58	@ 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8004cec:	f7ff fbe1 	bl	80044b2 <SX1276Write>
            if( datarate == 6 )
 8004cf0:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004cf2:	2031      	movs	r0, #49	@ 0x31
            if( datarate == 6 )
 8004cf4:	2c06      	cmp	r4, #6
 8004cf6:	d820      	bhi.n	8004d3a <SX1276SetRxConfig+0x2b2>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004cf8:	f7ff fc26 	bl	8004548 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004cfc:	2105      	movs	r1, #5
 8004cfe:	43a8      	bics	r0, r5
 8004d00:	4301      	orrs	r1, r0
 8004d02:	b2c9      	uxtb	r1, r1
 8004d04:	2031      	movs	r0, #49	@ 0x31
 8004d06:	f7ff fbd4 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004d0a:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004d0c:	2037      	movs	r0, #55	@ 0x37
 8004d0e:	e74b      	b.n	8004ba8 <SX1276SetRxConfig+0x120>
 8004d10:	2c0c      	cmp	r4, #12
 8004d12:	d800      	bhi.n	8004d16 <SX1276SetRxConfig+0x28e>
 8004d14:	e77a      	b.n	8004c0c <SX1276SetRxConfig+0x184>
 8004d16:	250c      	movs	r5, #12
 8004d18:	e778      	b.n	8004c0c <SX1276SetRxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004d1a:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004d1c:	2f08      	cmp	r7, #8
 8004d1e:	d000      	beq.n	8004d22 <SX1276SetRxConfig+0x29a>
 8004d20:	e77e      	b.n	8004c20 <SX1276SetRxConfig+0x198>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8004d22:	330b      	adds	r3, #11
 8004d24:	42a3      	cmp	r3, r4
 8004d26:	419b      	sbcs	r3, r3
 8004d28:	425b      	negs	r3, r3
 8004d2a:	e779      	b.n	8004c20 <SX1276SetRxConfig+0x198>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004d2c:	f7ff fbc1 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8004d30:	217f      	movs	r1, #127	@ 0x7f
 8004d32:	e7da      	b.n	8004cea <SX1276SetRxConfig+0x262>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8004d34:	2103      	movs	r1, #3
 8004d36:	2036      	movs	r0, #54	@ 0x36
 8004d38:	e7d8      	b.n	8004cec <SX1276SetRxConfig+0x264>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004d3a:	f7ff fc05 	bl	8004548 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004d3e:	2103      	movs	r1, #3
 8004d40:	43a8      	bics	r0, r5
 8004d42:	4301      	orrs	r1, r0
 8004d44:	b2c9      	uxtb	r1, r1
 8004d46:	2031      	movs	r0, #49	@ 0x31
 8004d48:	f7ff fbb3 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004d4c:	210a      	movs	r1, #10
 8004d4e:	e7dd      	b.n	8004d0c <SX1276SetRxConfig+0x284>
 8004d50:	20000460 	.word	0x20000460
 8004d54:	01e84800 	.word	0x01e84800
 8004d58:	200004ac 	.word	0x200004ac
 8004d5c:	1f4add40 	.word	0x1f4add40

08004d60 <SX1276SetSleep>:
{
 8004d60:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 8004d62:	4c0a      	ldr	r4, [pc, #40]	@ (8004d8c <SX1276SetSleep+0x2c>)
 8004d64:	480a      	ldr	r0, [pc, #40]	@ (8004d90 <SX1276SetSleep+0x30>)
 8004d66:	f001 f8c7 	bl	8005ef8 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 8004d6a:	0020      	movs	r0, r4
 8004d6c:	301c      	adds	r0, #28
 8004d6e:	f001 f8c3 	bl	8005ef8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 8004d72:	4808      	ldr	r0, [pc, #32]	@ (8004d94 <SX1276SetSleep+0x34>)
 8004d74:	4c08      	ldr	r4, [pc, #32]	@ (8004d98 <SX1276SetSleep+0x38>)
 8004d76:	f001 f8bf 	bl	8005ef8 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004d7a:	f7ff fe15 	bl	80049a8 <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f7fc fd74 	bl	800186c <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 8004d84:	2300      	movs	r3, #0
 8004d86:	7123      	strb	r3, [r4, #4]
}
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	46c0      	nop			@ (mov r8, r8)
 8004d8c:	200004e0 	.word	0x200004e0
 8004d90:	200004e4 	.word	0x200004e4
 8004d94:	200004c8 	.word	0x200004c8
 8004d98:	20000460 	.word	0x20000460

08004d9c <SX1276IsChannelFree>:
{
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	0007      	movs	r7, r0
 8004da0:	000c      	movs	r4, r1
 8004da2:	0016      	movs	r6, r2
 8004da4:	001d      	movs	r5, r3
    SX1276SetSleep( );
 8004da6:	f7ff ffdb 	bl	8004d60 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 8004daa:	2000      	movs	r0, #0
 8004dac:	f7ff fe0c 	bl	80049c8 <SX1276SetModem>
    SX1276SetChannel( freq );
 8004db0:	0038      	movs	r0, r7
 8004db2:	f7ff fb87 	bl	80044c4 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8004db6:	0020      	movs	r0, r4
 8004db8:	f7ff fad2 	bl	8004360 <GetFskBandwidthRegValue>
 8004dbc:	0004      	movs	r4, r0
 8004dbe:	0001      	movs	r1, r0
 8004dc0:	2012      	movs	r0, #18
 8004dc2:	f7ff fb76 	bl	80044b2 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8004dc6:	0021      	movs	r1, r4
 8004dc8:	2013      	movs	r0, #19
 8004dca:	f7ff fb72 	bl	80044b2 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 8004dce:	2005      	movs	r0, #5
 8004dd0:	f7ff fc5c 	bl	800468c <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f7fc fac1 	bl	800135c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8004dda:	f001 f84b 	bl	8005e74 <UTIL_TIMER_GetCurrentTime>
 8004dde:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8004de0:	0020      	movs	r0, r4
 8004de2:	f001 f851 	bl	8005e88 <UTIL_TIMER_GetElapsedTime>
 8004de6:	42a8      	cmp	r0, r5
 8004de8:	d304      	bcc.n	8004df4 <SX1276IsChannelFree+0x58>
    bool status = true;
 8004dea:	2401      	movs	r4, #1
    SX1276SetSleep( );
 8004dec:	f7ff ffb8 	bl	8004d60 <SX1276SetSleep>
}
 8004df0:	0020      	movs	r0, r4
 8004df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 8004df4:	2000      	movs	r0, #0
 8004df6:	f7ff fdb5 	bl	8004964 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 8004dfa:	42b0      	cmp	r0, r6
 8004dfc:	ddf0      	ble.n	8004de0 <SX1276IsChannelFree+0x44>
            status = false;
 8004dfe:	2400      	movs	r4, #0
 8004e00:	e7f4      	b.n	8004dec <SX1276IsChannelFree+0x50>

08004e02 <SX1276Random>:
{
 8004e02:	b570      	push	{r4, r5, r6, lr}
 8004e04:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 8004e06:	2001      	movs	r0, #1
 8004e08:	f7ff fdde 	bl	80049c8 <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004e0c:	21ff      	movs	r1, #255	@ 0xff
 8004e0e:	2011      	movs	r0, #17
 8004e10:	f7ff fb4f 	bl	80044b2 <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 8004e14:	2005      	movs	r0, #5
 8004e16:	f7ff fc39 	bl	800468c <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 8004e1a:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 8004e1c:	2601      	movs	r6, #1
 8004e1e:	0030      	movs	r0, r6
 8004e20:	f7fc fa9c 	bl	800135c <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8004e24:	202c      	movs	r0, #44	@ 0x2c
 8004e26:	f7ff fb8f 	bl	8004548 <SX1276Read>
 8004e2a:	4030      	ands	r0, r6
 8004e2c:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 8004e2e:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8004e30:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 8004e32:	2c20      	cmp	r4, #32
 8004e34:	d1f3      	bne.n	8004e1e <SX1276Random+0x1c>
    SX1276SetSleep( );
 8004e36:	f7ff ff93 	bl	8004d60 <SX1276SetSleep>
}
 8004e3a:	0028      	movs	r0, r5
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e40 <SX1276SetTxConfig>:
{
 8004e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e42:	b08d      	sub	sp, #52	@ 0x34
 8004e44:	9306      	str	r3, [sp, #24]
 8004e46:	ab12      	add	r3, sp, #72	@ 0x48
 8004e48:	cb80      	ldmia	r3!, {r7}
 8004e4a:	9002      	str	r0, [sp, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	9205      	str	r2, [sp, #20]
 8004e50:	9307      	str	r3, [sp, #28]
 8004e52:	ab14      	add	r3, sp, #80	@ 0x50
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	000d      	movs	r5, r1
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	ab15      	add	r3, sp, #84	@ 0x54
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	9303      	str	r3, [sp, #12]
 8004e60:	ab16      	add	r3, sp, #88	@ 0x58
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	9304      	str	r3, [sp, #16]
 8004e66:	ab17      	add	r3, sp, #92	@ 0x5c
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	9308      	str	r3, [sp, #32]
 8004e6c:	ab18      	add	r3, sp, #96	@ 0x60
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e72:	ab19      	add	r3, sp, #100	@ 0x64
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	9309      	str	r3, [sp, #36]	@ 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 8004e78:	4bbd      	ldr	r3, [pc, #756]	@ (8005170 <SX1276SetTxConfig+0x330>)
 8004e7a:	791c      	ldrb	r4, [r3, #4]
 8004e7c:	2c01      	cmp	r4, #1
 8004e7e:	d106      	bne.n	8004e8e <SX1276SetTxConfig+0x4e>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d104      	bne.n	8004e8e <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 8004e84:	f7ff ff6c 	bl	8004d60 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 8004e88:	0020      	movs	r0, r4
 8004e8a:	f7fc fa67 	bl	800135c <HAL_Delay>
    SX1276SetModem( modem );
 8004e8e:	9802      	ldr	r0, [sp, #8]
 8004e90:	f7ff fd9a 	bl	80049c8 <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 8004e94:	2009      	movs	r0, #9
 8004e96:	f7ff fb57 	bl	8004548 <SX1276Read>
 8004e9a:	900b      	str	r0, [sp, #44]	@ 0x2c
    paDac = SX1276Read( REG_PADAC );
 8004e9c:	204d      	movs	r0, #77	@ 0x4d
 8004e9e:	f7ff fb53 	bl	8004548 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8004ea2:	4bb3      	ldr	r3, [pc, #716]	@ (8005170 <SX1276SetTxConfig+0x330>)
    paDac = SX1276Read( REG_PADAC );
 8004ea4:	0004      	movs	r4, r0
 8004ea6:	0006      	movs	r6, r0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 8004ea8:	6898      	ldr	r0, [r3, #8]
 8004eaa:	f7fc fe55 	bl	8001b58 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d02e      	beq.n	8004f10 <SX1276SetTxConfig+0xd0>
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	3802      	subs	r0, #2
 8004eb8:	b2c0      	uxtb	r0, r0
 8004eba:	4282      	cmp	r2, r0
 8004ebc:	415b      	adcs	r3, r3
 8004ebe:	217f      	movs	r1, #127	@ 0x7f
 8004ec0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
        if (power > 14)
 8004ec2:	01db      	lsls	r3, r3, #7
 8004ec4:	400a      	ands	r2, r1
 8004ec6:	0011      	movs	r1, r2
 8004ec8:	b2db      	uxtb	r3, r3
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8004eca:	4319      	orrs	r1, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d039      	beq.n	8004f44 <SX1276SetTxConfig+0x104>
        if( power > 17 )
 8004ed0:	2607      	movs	r6, #7
 8004ed2:	2d11      	cmp	r5, #17
 8004ed4:	dd21      	ble.n	8004f1a <SX1276SetTxConfig+0xda>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8004ed6:	4326      	orrs	r6, r4
 8004ed8:	230f      	movs	r3, #15
 8004eda:	b2f6      	uxtb	r6, r6
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8004edc:	4399      	bics	r1, r3
 8004ede:	43f3      	mvns	r3, r6
 8004ee0:	075b      	lsls	r3, r3, #29
 8004ee2:	d124      	bne.n	8004f2e <SX1276SetTxConfig+0xee>
            if( power > 20 )
 8004ee4:	1c2b      	adds	r3, r5, #0
 8004ee6:	2d14      	cmp	r5, #20
 8004ee8:	dd1c      	ble.n	8004f24 <SX1276SetTxConfig+0xe4>
 8004eea:	2314      	movs	r3, #20
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8004eec:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8004eee:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 8004ef0:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8004ef2:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 8004ef4:	f7ff fadd 	bl	80044b2 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8004ef8:	0031      	movs	r1, r6
 8004efa:	204d      	movs	r0, #77	@ 0x4d
 8004efc:	f7ff fad9 	bl	80044b2 <SX1276Write>
    switch( modem )
 8004f00:	9b02      	ldr	r3, [sp, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d02d      	beq.n	8004f62 <SX1276SetTxConfig+0x122>
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d100      	bne.n	8004f0c <SX1276SetTxConfig+0xcc>
 8004f0a:	e08b      	b.n	8005024 <SX1276SetTxConfig+0x1e4>
}
 8004f0c:	b00d      	add	sp, #52	@ 0x34
 8004f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 8004f10:	2301      	movs	r3, #1
 8004f12:	2d0e      	cmp	r5, #14
 8004f14:	dcd3      	bgt.n	8004ebe <SX1276SetTxConfig+0x7e>
 8004f16:	1c03      	adds	r3, r0, #0
 8004f18:	e7d1      	b.n	8004ebe <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8004f1a:	0023      	movs	r3, r4
 8004f1c:	43b3      	bics	r3, r6
 8004f1e:	2604      	movs	r6, #4
 8004f20:	431e      	orrs	r6, r3
 8004f22:	e7d9      	b.n	8004ed8 <SX1276SetTxConfig+0x98>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8004f24:	b26a      	sxtb	r2, r5
 8004f26:	2a05      	cmp	r2, #5
 8004f28:	dae0      	bge.n	8004eec <SX1276SetTxConfig+0xac>
 8004f2a:	2305      	movs	r3, #5
 8004f2c:	e7de      	b.n	8004eec <SX1276SetTxConfig+0xac>
            if( power > 17 )
 8004f2e:	1c2b      	adds	r3, r5, #0
 8004f30:	2d11      	cmp	r5, #17
 8004f32:	dd02      	ble.n	8004f3a <SX1276SetTxConfig+0xfa>
 8004f34:	2311      	movs	r3, #17
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8004f36:	3b02      	subs	r3, #2
 8004f38:	e7d9      	b.n	8004eee <SX1276SetTxConfig+0xae>
 8004f3a:	b26a      	sxtb	r2, r5
 8004f3c:	2a02      	cmp	r2, #2
 8004f3e:	dafa      	bge.n	8004f36 <SX1276SetTxConfig+0xf6>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e7f8      	b.n	8004f36 <SX1276SetTxConfig+0xf6>
        if( power > 0 )
 8004f44:	2d00      	cmp	r5, #0
 8004f46:	dd05      	ble.n	8004f54 <SX1276SetTxConfig+0x114>
            if( power > 15 )
 8004f48:	1c2b      	adds	r3, r5, #0
 8004f4a:	2d0f      	cmp	r5, #15
 8004f4c:	dd00      	ble.n	8004f50 <SX1276SetTxConfig+0x110>
 8004f4e:	230f      	movs	r3, #15
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8004f50:	2170      	movs	r1, #112	@ 0x70
 8004f52:	e7cc      	b.n	8004eee <SX1276SetTxConfig+0xae>
            if( power < -4 )
 8004f54:	1c29      	adds	r1, r5, #0
 8004f56:	1d2b      	adds	r3, r5, #4
 8004f58:	da01      	bge.n	8004f5e <SX1276SetTxConfig+0x11e>
 8004f5a:	4b86      	ldr	r3, [pc, #536]	@ (8005174 <SX1276SetTxConfig+0x334>)
 8004f5c:	7819      	ldrb	r1, [r3, #0]
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8004f5e:	3104      	adds	r1, #4
 8004f60:	e7c6      	b.n	8004ef0 <SX1276SetTxConfig+0xb0>
            SX1276.Settings.Fsk.Power = power;
 8004f62:	4b83      	ldr	r3, [pc, #524]	@ (8005170 <SX1276SetTxConfig+0x330>)
            SX1276.Settings.Fsk.Fdev = fdev;
 8004f64:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004f66:	9903      	ldr	r1, [sp, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 8004f68:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004f6a:	9a06      	ldr	r2, [sp, #24]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8004f6c:	9805      	ldr	r0, [sp, #20]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8004f6e:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004f70:	9a01      	ldr	r2, [sp, #4]
            SX1276.Settings.Fsk.Power = power;
 8004f72:	731d      	strb	r5, [r3, #12]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004f74:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 8004f76:	1cda      	adds	r2, r3, #3
 8004f78:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004f7a:	9904      	ldr	r1, [sp, #16]
 8004f7c:	1d5a      	adds	r2, r3, #5
 8004f7e:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8004f80:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f82:	1d9a      	adds	r2, r3, #6
 8004f84:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8004f86:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 8004f88:	61df      	str	r7, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8004f8a:	629a      	str	r2, [r3, #40]	@ 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8004f8c:	497a      	ldr	r1, [pc, #488]	@ (8005178 <SX1276SetTxConfig+0x338>)
 8004f8e:	f7fb f953 	bl	8000238 <__aeabi_uidivmod>
 8004f92:	4b7a      	ldr	r3, [pc, #488]	@ (800517c <SX1276SetTxConfig+0x33c>)
 8004f94:	0208      	lsls	r0, r1, #8
 8004f96:	18c0      	adds	r0, r0, r3
 8004f98:	4977      	ldr	r1, [pc, #476]	@ (8005178 <SX1276SetTxConfig+0x338>)
 8004f9a:	f7fb f8c7 	bl	800012c <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8004f9e:	4976      	ldr	r1, [pc, #472]	@ (8005178 <SX1276SetTxConfig+0x338>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8004fa0:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8004fa2:	9805      	ldr	r0, [sp, #20]
 8004fa4:	f7fb f8c2 	bl	800012c <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004fa8:	0200      	lsls	r0, r0, #8
 8004faa:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8004fac:	0a21      	lsrs	r1, r4, #8
 8004fae:	2004      	movs	r0, #4
 8004fb0:	b2c9      	uxtb	r1, r1
 8004fb2:	f7ff fa7e 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8004fb6:	b2e1      	uxtb	r1, r4
 8004fb8:	2005      	movs	r0, #5
 8004fba:	f7ff fa7a 	bl	80044b2 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004fbe:	0039      	movs	r1, r7
 8004fc0:	486f      	ldr	r0, [pc, #444]	@ (8005180 <SX1276SetTxConfig+0x340>)
 8004fc2:	f7fb f8b3 	bl	800012c <__udivsi3>
 8004fc6:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8004fc8:	0a01      	lsrs	r1, r0, #8
 8004fca:	b2c9      	uxtb	r1, r1
 8004fcc:	2002      	movs	r0, #2
 8004fce:	f7ff fa70 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8004fd2:	2003      	movs	r0, #3
 8004fd4:	b2e1      	uxtb	r1, r4
 8004fd6:	f7ff fa6c 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8004fda:	9b01      	ldr	r3, [sp, #4]
 8004fdc:	2025      	movs	r0, #37	@ 0x25
 8004fde:	0a19      	lsrs	r1, r3, #8
 8004fe0:	f7ff fa67 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8004fe4:	466b      	mov	r3, sp
 8004fe6:	2026      	movs	r0, #38	@ 0x26
 8004fe8:	7919      	ldrb	r1, [r3, #4]
 8004fea:	f7ff fa62 	bl	80044b2 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004fee:	2030      	movs	r0, #48	@ 0x30
 8004ff0:	f7ff faaa 	bl	8004548 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	9b03      	ldr	r3, [sp, #12]
 8004ff8:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 8004ffa:	9b04      	ldr	r3, [sp, #16]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004ffc:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 8004ffe:	011b      	lsls	r3, r3, #4
            SX1276Write( REG_PACKETCONFIG1,
 8005000:	4319      	orrs	r1, r3
 8005002:	236f      	movs	r3, #111	@ 0x6f
 8005004:	4018      	ands	r0, r3
 8005006:	4301      	orrs	r1, r0
 8005008:	b2c9      	uxtb	r1, r1
 800500a:	2030      	movs	r0, #48	@ 0x30
 800500c:	f7ff fa51 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8005010:	2031      	movs	r0, #49	@ 0x31
 8005012:	f7ff fa99 	bl	8004548 <SX1276Read>
 8005016:	2140      	movs	r1, #64	@ 0x40
 8005018:	4301      	orrs	r1, r0
 800501a:	2031      	movs	r0, #49	@ 0x31
 800501c:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800501e:	f7ff fa48 	bl	80044b2 <SX1276Write>
}
 8005022:	e773      	b.n	8004f0c <SX1276SetTxConfig+0xcc>
            SX1276.Settings.LoRa.Power = power;
 8005024:	4a57      	ldr	r2, [pc, #348]	@ (8005184 <SX1276SetTxConfig+0x344>)
 8005026:	4b52      	ldr	r3, [pc, #328]	@ (8005170 <SX1276SetTxConfig+0x330>)
 8005028:	7015      	strb	r5, [r2, #0]
            if( bandwidth > 2 )
 800502a:	9a06      	ldr	r2, [sp, #24]
 800502c:	2a02      	cmp	r2, #2
 800502e:	d900      	bls.n	8005032 <SX1276SetTxConfig+0x1f2>
                while( 1 );
 8005030:	e7fe      	b.n	8005030 <SX1276SetTxConfig+0x1f0>
            SX1276.Settings.LoRa.Coderate = coderate;
 8005032:	001a      	movs	r2, r3
 8005034:	9907      	ldr	r1, [sp, #28]
 8005036:	324d      	adds	r2, #77	@ 0x4d
 8005038:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800503a:	001a      	movs	r2, r3
 800503c:	9901      	ldr	r1, [sp, #4]
 800503e:	324e      	adds	r2, #78	@ 0x4e
 8005040:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 8005042:	001a      	movs	r2, r3
 8005044:	9903      	ldr	r1, [sp, #12]
 8005046:	3250      	adds	r2, #80	@ 0x50
 8005048:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800504a:	001a      	movs	r2, r3
 800504c:	9908      	ldr	r1, [sp, #32]
 800504e:	3253      	adds	r2, #83	@ 0x53
 8005050:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8005052:	001a      	movs	r2, r3
 8005054:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005056:	3254      	adds	r2, #84	@ 0x54
 8005058:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800505a:	001a      	movs	r2, r3
 800505c:	9904      	ldr	r1, [sp, #16]
 800505e:	3252      	adds	r2, #82	@ 0x52
 8005060:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8005062:	001a      	movs	r2, r3
 8005064:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005066:	3255      	adds	r2, #85	@ 0x55
            bandwidth += 7;
 8005068:	9d06      	ldr	r5, [sp, #24]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800506a:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800506c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
            bandwidth += 7;
 800506e:	3507      	adds	r5, #7
            else if( datarate < 6 )
 8005070:	003c      	movs	r4, r7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8005072:	645d      	str	r5, [r3, #68]	@ 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 8005074:	649f      	str	r7, [r3, #72]	@ 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 8005076:	659a      	str	r2, [r3, #88]	@ 0x58
            else if( datarate < 6 )
 8005078:	2f06      	cmp	r7, #6
 800507a:	d262      	bcs.n	8005142 <SX1276SetTxConfig+0x302>
 800507c:	2406      	movs	r4, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800507e:	2d07      	cmp	r5, #7
 8005080:	d163      	bne.n	800514a <SX1276SetTxConfig+0x30a>
 8005082:	0022      	movs	r2, r4
 8005084:	2300      	movs	r3, #0
 8005086:	2101      	movs	r1, #1
 8005088:	3a0b      	subs	r2, #11
 800508a:	4291      	cmp	r1, r2
 800508c:	415b      	adcs	r3, r3
 800508e:	b2db      	uxtb	r3, r3
 8005090:	4a3d      	ldr	r2, [pc, #244]	@ (8005188 <SX1276SetTxConfig+0x348>)
 8005092:	4e37      	ldr	r6, [pc, #220]	@ (8005170 <SX1276SetTxConfig+0x330>)
 8005094:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005096:	9b08      	ldr	r3, [sp, #32]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00f      	beq.n	80050bc <SX1276SetTxConfig+0x27c>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800509c:	2044      	movs	r0, #68	@ 0x44
 800509e:	f7ff fa53 	bl	8004548 <SX1276Read>
 80050a2:	2180      	movs	r1, #128	@ 0x80
 80050a4:	4249      	negs	r1, r1
 80050a6:	4301      	orrs	r1, r0
 80050a8:	b2c9      	uxtb	r1, r1
 80050aa:	2044      	movs	r0, #68	@ 0x44
 80050ac:	f7ff fa01 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80050b0:	0033      	movs	r3, r6
 80050b2:	3354      	adds	r3, #84	@ 0x54
 80050b4:	2024      	movs	r0, #36	@ 0x24
 80050b6:	7819      	ldrb	r1, [r3, #0]
 80050b8:	f7ff f9fb 	bl	80044b2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80050bc:	201d      	movs	r0, #29
 80050be:	f7ff fa43 	bl	8004548 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80050c2:	9b07      	ldr	r3, [sp, #28]
 80050c4:	012d      	lsls	r5, r5, #4
 80050c6:	0059      	lsls	r1, r3, #1
 80050c8:	9b03      	ldr	r3, [sp, #12]
            SX1276Write( REG_LR_MODEMCONFIG1,
 80050ca:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80050cc:	430b      	orrs	r3, r1
 80050ce:	0019      	movs	r1, r3
 80050d0:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 80050d2:	b2c9      	uxtb	r1, r1
 80050d4:	f7ff f9ed 	bl	80044b2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80050d8:	201e      	movs	r0, #30
 80050da:	f7ff fa35 	bl	8004548 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80050de:	9b04      	ldr	r3, [sp, #16]
 80050e0:	0124      	lsls	r4, r4, #4
 80050e2:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 80050e4:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 80050e6:	230b      	movs	r3, #11
 80050e8:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80050ea:	4304      	orrs	r4, r0
 80050ec:	b2e1      	uxtb	r1, r4
 80050ee:	201e      	movs	r0, #30
 80050f0:	f7ff f9df 	bl	80044b2 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80050f4:	2026      	movs	r0, #38	@ 0x26
 80050f6:	f7ff fa27 	bl	8004548 <SX1276Read>
            SX1276Write( REG_LR_MODEMCONFIG3,
 80050fa:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80050fc:	364c      	adds	r6, #76	@ 0x4c
 80050fe:	7831      	ldrb	r1, [r6, #0]
            SX1276Write( REG_LR_MODEMCONFIG3,
 8005100:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8005102:	00c9      	lsls	r1, r1, #3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8005104:	4301      	orrs	r1, r0
 8005106:	b2c9      	uxtb	r1, r1
 8005108:	2026      	movs	r0, #38	@ 0x26
 800510a:	f7ff f9d2 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800510e:	9b01      	ldr	r3, [sp, #4]
 8005110:	2020      	movs	r0, #32
 8005112:	0a19      	lsrs	r1, r3, #8
 8005114:	f7ff f9cd 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8005118:	466b      	mov	r3, sp
 800511a:	2021      	movs	r0, #33	@ 0x21
 800511c:	7919      	ldrb	r1, [r3, #4]
 800511e:	f7ff f9c8 	bl	80044b2 <SX1276Write>
            if( datarate == 6 )
 8005122:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8005124:	2031      	movs	r0, #49	@ 0x31
            if( datarate == 6 )
 8005126:	2f06      	cmp	r7, #6
 8005128:	d817      	bhi.n	800515a <SX1276SetTxConfig+0x31a>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800512a:	f7ff fa0d 	bl	8004548 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800512e:	2105      	movs	r1, #5
 8005130:	43a0      	bics	r0, r4
 8005132:	4301      	orrs	r1, r0
 8005134:	b2c9      	uxtb	r1, r1
 8005136:	2031      	movs	r0, #49	@ 0x31
 8005138:	f7ff f9bb 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800513c:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800513e:	2037      	movs	r0, #55	@ 0x37
 8005140:	e76d      	b.n	800501e <SX1276SetTxConfig+0x1de>
 8005142:	2f0c      	cmp	r7, #12
 8005144:	d99b      	bls.n	800507e <SX1276SetTxConfig+0x23e>
 8005146:	240c      	movs	r4, #12
 8005148:	e799      	b.n	800507e <SX1276SetTxConfig+0x23e>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800514a:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800514c:	2d08      	cmp	r5, #8
 800514e:	d19f      	bne.n	8005090 <SX1276SetTxConfig+0x250>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8005150:	330b      	adds	r3, #11
 8005152:	42bb      	cmp	r3, r7
 8005154:	419b      	sbcs	r3, r3
 8005156:	425b      	negs	r3, r3
 8005158:	e79a      	b.n	8005090 <SX1276SetTxConfig+0x250>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800515a:	f7ff f9f5 	bl	8004548 <SX1276Read>
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800515e:	2103      	movs	r1, #3
 8005160:	43a0      	bics	r0, r4
 8005162:	4301      	orrs	r1, r0
 8005164:	b2c9      	uxtb	r1, r1
 8005166:	2031      	movs	r0, #49	@ 0x31
 8005168:	f7ff f9a3 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800516c:	210a      	movs	r1, #10
 800516e:	e7e6      	b.n	800513e <SX1276SetTxConfig+0x2fe>
 8005170:	20000460 	.word	0x20000460
 8005174:	08006786 	.word	0x08006786
 8005178:	00003d09 	.word	0x00003d09
 800517c:	00001e84 	.word	0x00001e84
 8005180:	01e84800 	.word	0x01e84800
 8005184:	200004a0 	.word	0x200004a0
 8005188:	200004ac 	.word	0x200004ac

0800518c <SX1276SetTxContinuousWave>:
{
 800518c:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800518e:	24fa      	movs	r4, #250	@ 0xfa
{
 8005190:	b08b      	sub	sp, #44	@ 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 8005192:	00a4      	lsls	r4, r4, #2
 8005194:	4354      	muls	r4, r2
{
 8005196:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 8005198:	f7ff f994 	bl	80044c4 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800519c:	2305      	movs	r3, #5
 800519e:	9302      	str	r3, [sp, #8]
 80051a0:	2396      	movs	r3, #150	@ 0x96
 80051a2:	2000      	movs	r0, #0
 80051a4:	015b      	lsls	r3, r3, #5
 80051a6:	0002      	movs	r2, r0
 80051a8:	0029      	movs	r1, r5
 80051aa:	9408      	str	r4, [sp, #32]
 80051ac:	9007      	str	r0, [sp, #28]
 80051ae:	9006      	str	r0, [sp, #24]
 80051b0:	9005      	str	r0, [sp, #20]
 80051b2:	9004      	str	r0, [sp, #16]
 80051b4:	9003      	str	r0, [sp, #12]
 80051b6:	9001      	str	r0, [sp, #4]
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	0003      	movs	r3, r0
 80051bc:	f7ff fe40 	bl	8004e40 <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80051c0:	2031      	movs	r0, #49	@ 0x31
 80051c2:	f7ff f9c1 	bl	8004548 <SX1276Read>
 80051c6:	2540      	movs	r5, #64	@ 0x40
 80051c8:	43a8      	bics	r0, r5
 80051ca:	b2c1      	uxtb	r1, r0
 80051cc:	2031      	movs	r0, #49	@ 0x31
 80051ce:	f7ff f970 	bl	80044b2 <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80051d2:	0028      	movs	r0, r5
 80051d4:	21f0      	movs	r1, #240	@ 0xf0
 80051d6:	f7ff f96c 	bl	80044b2 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80051da:	21a0      	movs	r1, #160	@ 0xa0
 80051dc:	2041      	movs	r0, #65	@ 0x41
 80051de:	f7ff f968 	bl	80044b2 <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80051e2:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <SX1276SetTxContinuousWave+0x78>)
 80051e4:	0021      	movs	r1, r4
 80051e6:	0018      	movs	r0, r3
 80051e8:	001c      	movs	r4, r3
 80051ea:	f000 ff17 	bl	800601c <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 80051ee:	2202      	movs	r2, #2
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 80051f2:	0020      	movs	r0, r4
    SX1276.Settings.State = RF_TX_RUNNING;
 80051f4:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 80051f6:	f000 fed3 	bl	8005fa0 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 80051fa:	2003      	movs	r0, #3
 80051fc:	f7ff fa46 	bl	800468c <SX1276SetOpMode.part.0>
}
 8005200:	b00b      	add	sp, #44	@ 0x2c
 8005202:	bd30      	pop	{r4, r5, pc}
 8005204:	200004fc 	.word	0x200004fc
 8005208:	20000460 	.word	0x20000460

0800520c <RxChainCalibration>:
{
 800520c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800520e:	2009      	movs	r0, #9
 8005210:	f7ff f99a 	bl	8004548 <SX1276Read>
 8005214:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005216:	2006      	movs	r0, #6
 8005218:	f7ff f996 	bl	8004548 <SX1276Read>
 800521c:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800521e:	2007      	movs	r0, #7
 8005220:	f7ff f992 	bl	8004548 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005224:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8005226:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005228:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 800522a:	2008      	movs	r0, #8
 800522c:	f7ff f98c 	bl	8004548 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005230:	4b1a      	ldr	r3, [pc, #104]	@ (800529c <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8005232:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8005234:	b2c0      	uxtb	r0, r0
 8005236:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8005238:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800523a:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800523c:	3080      	adds	r0, #128	@ 0x80
 800523e:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 8005240:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8005242:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 8005244:	2009      	movs	r0, #9
 8005246:	f7ff f934 	bl	80044b2 <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800524a:	203b      	movs	r0, #59	@ 0x3b
 800524c:	f7ff f97c 	bl	8004548 <SX1276Read>
 8005250:	2140      	movs	r1, #64	@ 0x40
 8005252:	4301      	orrs	r1, r0
 8005254:	b2c9      	uxtb	r1, r1
 8005256:	203b      	movs	r0, #59	@ 0x3b
 8005258:	f7ff f92b 	bl	80044b2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800525c:	2620      	movs	r6, #32
 800525e:	203b      	movs	r0, #59	@ 0x3b
 8005260:	f7ff f972 	bl	8004548 <SX1276Read>
 8005264:	4230      	tst	r0, r6
 8005266:	d1fa      	bne.n	800525e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 8005268:	480d      	ldr	r0, [pc, #52]	@ (80052a0 <RxChainCalibration+0x94>)
 800526a:	f7ff f92b 	bl	80044c4 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800526e:	203b      	movs	r0, #59	@ 0x3b
 8005270:	f7ff f96a 	bl	8004548 <SX1276Read>
 8005274:	2140      	movs	r1, #64	@ 0x40
 8005276:	4301      	orrs	r1, r0
 8005278:	b2c9      	uxtb	r1, r1
 800527a:	203b      	movs	r0, #59	@ 0x3b
 800527c:	f7ff f919 	bl	80044b2 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8005280:	2620      	movs	r6, #32
 8005282:	203b      	movs	r0, #59	@ 0x3b
 8005284:	f7ff f960 	bl	8004548 <SX1276Read>
 8005288:	4230      	tst	r0, r6
 800528a:	d1fa      	bne.n	8005282 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800528c:	0029      	movs	r1, r5
 800528e:	2009      	movs	r0, #9
 8005290:	f7ff f90f 	bl	80044b2 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8005294:	0020      	movs	r0, r4
 8005296:	f7ff f915 	bl	80044c4 <SX1276SetChannel>
}
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	00003d09 	.word	0x00003d09
 80052a0:	33bca100 	.word	0x33bca100

080052a4 <SX1276Init>:
{
 80052a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 80052a6:	4e1f      	ldr	r6, [pc, #124]	@ (8005324 <SX1276Init+0x80>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80052a8:	2400      	movs	r4, #0
    RadioEvents = events;
 80052aa:	6030      	str	r0, [r6, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80052ac:	2101      	movs	r1, #1
 80052ae:	0030      	movs	r0, r6
 80052b0:	4d1d      	ldr	r5, [pc, #116]	@ (8005328 <SX1276Init+0x84>)
 80052b2:	0022      	movs	r2, r4
 80052b4:	002b      	movs	r3, r5
 80052b6:	9400      	str	r4, [sp, #0]
 80052b8:	4249      	negs	r1, r1
 80052ba:	301c      	adds	r0, #28
 80052bc:	f000 fdbe 	bl	8005e3c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80052c0:	2101      	movs	r1, #1
 80052c2:	002b      	movs	r3, r5
 80052c4:	0022      	movs	r2, r4
 80052c6:	1d30      	adds	r0, r6, #4
 80052c8:	9400      	str	r4, [sp, #0]
 80052ca:	4249      	negs	r1, r1
 80052cc:	f000 fdb6 	bl	8005e3c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80052d0:	2101      	movs	r1, #1
 80052d2:	002b      	movs	r3, r5
 80052d4:	0022      	movs	r2, r4
 80052d6:	4249      	negs	r1, r1
 80052d8:	9400      	str	r4, [sp, #0]
 80052da:	4814      	ldr	r0, [pc, #80]	@ (800532c <SX1276Init+0x88>)
 80052dc:	4e14      	ldr	r6, [pc, #80]	@ (8005330 <SX1276Init+0x8c>)
 80052de:	f000 fdad 	bl	8005e3c <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 80052e2:	2001      	movs	r0, #1
 80052e4:	f7fc fac2 	bl	800186c <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 80052e8:	f7fc fc60 	bl	8001bac <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 80052ec:	f7ff ff8e 	bl	800520c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80052f0:	f7ff fb5a 	bl	80049a8 <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 80052f4:	480f      	ldr	r0, [pc, #60]	@ (8005334 <SX1276Init+0x90>)
 80052f6:	f7fc fc01 	bl	8001afc <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80052fa:	4c0f      	ldr	r4, [pc, #60]	@ (8005338 <SX1276Init+0x94>)
 80052fc:	4d0f      	ldr	r5, [pc, #60]	@ (800533c <SX1276Init+0x98>)
        SX1276SetModem( RadioRegsInit[i].Modem );
 80052fe:	7820      	ldrb	r0, [r4, #0]
 8005300:	f7ff fb62 	bl	80049c8 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8005304:	78a1      	ldrb	r1, [r4, #2]
 8005306:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005308:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800530a:	f7ff f8d2 	bl	80044b2 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800530e:	42ac      	cmp	r4, r5
 8005310:	d1f5      	bne.n	80052fe <SX1276Init+0x5a>
    SX1276SetModem( MODEM_FSK );
 8005312:	2000      	movs	r0, #0
 8005314:	f7ff fb58 	bl	80049c8 <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 8005318:	2300      	movs	r3, #0
 800531a:	7133      	strb	r3, [r6, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800531c:	f7fc faa4 	bl	8001868 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 8005320:	3002      	adds	r0, #2
}
 8005322:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005324:	200004e0 	.word	0x200004e0
 8005328:	08005341 	.word	0x08005341
 800532c:	200004c8 	.word	0x200004c8
 8005330:	20000460 	.word	0x20000460
 8005334:	20000024 	.word	0x20000024
 8005338:	080064d0 	.word	0x080064d0
 800533c:	08006500 	.word	0x08006500

08005340 <SX1276OnTimeoutIrq>:
{
 8005340:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 8005342:	4c29      	ldr	r4, [pc, #164]	@ (80053e8 <SX1276OnTimeoutIrq+0xa8>)
 8005344:	7923      	ldrb	r3, [r4, #4]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d002      	beq.n	8005350 <SX1276OnTimeoutIrq+0x10>
 800534a:	2b02      	cmp	r3, #2
 800534c:	d02a      	beq.n	80053a4 <SX1276OnTimeoutIrq+0x64>
}
 800534e:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 8005350:	7963      	ldrb	r3, [r4, #5]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d117      	bne.n	8005386 <SX1276OnTimeoutIrq+0x46>
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8005356:	210b      	movs	r1, #11
 8005358:	203e      	movs	r0, #62	@ 0x3e
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800535a:	8623      	strh	r3, [r4, #48]	@ 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800535c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800535e:	8763      	strh	r3, [r4, #58]	@ 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8005360:	f7ff f8a7 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005364:	2110      	movs	r1, #16
 8005366:	203f      	movs	r0, #63	@ 0x3f
 8005368:	f7ff f8a3 	bl	80044b2 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800536c:	1de3      	adds	r3, r4, #7
 800536e:	7fdb      	ldrb	r3, [r3, #31]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d011      	beq.n	8005398 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8005374:	200d      	movs	r0, #13
 8005376:	f7ff f8e7 	bl	8004548 <SX1276Read>
 800537a:	2140      	movs	r1, #64	@ 0x40
 800537c:	4301      	orrs	r1, r0
 800537e:	b2c9      	uxtb	r1, r1
 8005380:	200d      	movs	r0, #13
 8005382:	f7ff f896 	bl	80044b2 <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005386:	4b19      	ldr	r3, [pc, #100]	@ (80053ec <SX1276OnTimeoutIrq+0xac>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0df      	beq.n	800534e <SX1276OnTimeoutIrq+0xe>
 800538e:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0dc      	beq.n	800534e <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 8005394:	4798      	blx	r3
}
 8005396:	e7da      	b.n	800534e <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 8005398:	0020      	movs	r0, r4
 800539a:	3068      	adds	r0, #104	@ 0x68
                SX1276.Settings.State = RF_IDLE;
 800539c:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 800539e:	f000 fdab 	bl	8005ef8 <UTIL_TIMER_Stop>
 80053a2:	e7f0      	b.n	8005386 <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 80053a4:	f7fc fc02 	bl	8001bac <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 80053a8:	f7ff ff30 	bl	800520c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80053ac:	f7ff fafc 	bl	80049a8 <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80053b0:	4d0f      	ldr	r5, [pc, #60]	@ (80053f0 <SX1276OnTimeoutIrq+0xb0>)
 80053b2:	4e10      	ldr	r6, [pc, #64]	@ (80053f4 <SX1276OnTimeoutIrq+0xb4>)
            SX1276SetModem( RadioRegsInit[i].Modem );
 80053b4:	7828      	ldrb	r0, [r5, #0]
 80053b6:	f7ff fb07 	bl	80049c8 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80053ba:	78a9      	ldrb	r1, [r5, #2]
 80053bc:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80053be:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80053c0:	f7ff f877 	bl	80044b2 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80053c4:	42b5      	cmp	r5, r6
 80053c6:	d1f5      	bne.n	80053b4 <SX1276OnTimeoutIrq+0x74>
        SX1276SetModem( MODEM_FSK );
 80053c8:	2000      	movs	r0, #0
 80053ca:	f7ff fafd 	bl	80049c8 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80053ce:	0023      	movs	r3, r4
 80053d0:	335c      	adds	r3, #92	@ 0x5c
 80053d2:	7818      	ldrb	r0, [r3, #0]
 80053d4:	f7ff fb46 	bl	8004a64 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80053d8:	2300      	movs	r3, #0
 80053da:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80053dc:	4b03      	ldr	r3, [pc, #12]	@ (80053ec <SX1276OnTimeoutIrq+0xac>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0b4      	beq.n	800534e <SX1276OnTimeoutIrq+0xe>
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	e7d3      	b.n	8005390 <SX1276OnTimeoutIrq+0x50>
 80053e8:	20000460 	.word	0x20000460
 80053ec:	200004e0 	.word	0x200004e0
 80053f0:	080064d0 	.word	0x080064d0
 80053f4:	08006500 	.word	0x08006500

080053f8 <SX1276OnDio0Irq>:
{
 80053f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    volatile uint8_t irqFlags = 0;
 80053fa:	466b      	mov	r3, sp
 80053fc:	1dde      	adds	r6, r3, #7
 80053fe:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 8005400:	4c8c      	ldr	r4, [pc, #560]	@ (8005634 <SX1276OnDio0Irq+0x23c>)
    volatile uint8_t irqFlags = 0;
 8005402:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 8005404:	7923      	ldrb	r3, [r4, #4]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d003      	beq.n	8005412 <SX1276OnDio0Irq+0x1a>
 800540a:	2b02      	cmp	r3, #2
 800540c:	d100      	bne.n	8005410 <SX1276OnDio0Irq+0x18>
 800540e:	e0fd      	b.n	800560c <SX1276OnDio0Irq+0x214>
}
 8005410:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 8005412:	7963      	ldrb	r3, [r4, #5]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d023      	beq.n	8005460 <SX1276OnDio0Irq+0x68>
 8005418:	2b01      	cmp	r3, #1
 800541a:	d1f9      	bne.n	8005410 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800541c:	2140      	movs	r1, #64	@ 0x40
 800541e:	2012      	movs	r0, #18
 8005420:	f7ff f847 	bl	80044b2 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8005424:	2012      	movs	r0, #18
 8005426:	f7ff f88f 	bl	8004548 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800542a:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800542c:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800542e:	7833      	ldrb	r3, [r6, #0]
 8005430:	4d81      	ldr	r5, [pc, #516]	@ (8005638 <SX1276OnDio0Irq+0x240>)
 8005432:	420b      	tst	r3, r1
 8005434:	d100      	bne.n	8005438 <SX1276OnDio0Irq+0x40>
 8005436:	e08a      	b.n	800554e <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8005438:	2012      	movs	r0, #18
 800543a:	f7ff f83a 	bl	80044b2 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800543e:	0023      	movs	r3, r4
 8005440:	3356      	adds	r3, #86	@ 0x56
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d100      	bne.n	800544a <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 8005448:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 800544a:	1d28      	adds	r0, r5, #4
 800544c:	f000 fd54 	bl	8005ef8 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0dc      	beq.n	8005410 <SX1276OnDio0Irq+0x18>
 8005456:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0d9      	beq.n	8005410 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800545c:	4798      	blx	r3
}
 800545e:	e7d7      	b.n	8005410 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8005460:	1d63      	adds	r3, r4, #5
 8005462:	7fdb      	ldrb	r3, [r3, #31]
 8005464:	4d74      	ldr	r5, [pc, #464]	@ (8005638 <SX1276OnDio0Irq+0x240>)
 8005466:	2b00      	cmp	r3, #0
 8005468:	d030      	beq.n	80054cc <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800546a:	203f      	movs	r0, #63	@ 0x3f
 800546c:	f7ff f86c 	bl	8004548 <SX1276Read>
 8005470:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8005472:	7833      	ldrb	r3, [r6, #0]
 8005474:	079b      	lsls	r3, r3, #30
 8005476:	d429      	bmi.n	80054cc <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8005478:	210b      	movs	r1, #11
 800547a:	203e      	movs	r0, #62	@ 0x3e
 800547c:	f7ff f819 	bl	80044b2 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005480:	2110      	movs	r1, #16
 8005482:	203f      	movs	r0, #63	@ 0x3f
 8005484:	f7ff f815 	bl	80044b2 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8005488:	1d28      	adds	r0, r5, #4
 800548a:	f000 fd35 	bl	8005ef8 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800548e:	1de3      	adds	r3, r4, #7
 8005490:	7fde      	ldrb	r6, [r3, #31]
 8005492:	2e00      	cmp	r6, #0
 8005494:	d110      	bne.n	80054b8 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 8005496:	0020      	movs	r0, r4
 8005498:	3068      	adds	r0, #104	@ 0x68
 800549a:	f000 fd2d 	bl	8005ef8 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 800549e:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <SX1276OnDio0Irq+0xb6>
 80054a6:	691b      	ldr	r3, [r3, #16]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d000      	beq.n	80054ae <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 80054ac:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80054ae:	2300      	movs	r3, #0
 80054b0:	8623      	strh	r3, [r4, #48]	@ 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80054b2:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80054b4:	8763      	strh	r3, [r4, #58]	@ 0x3a
                        break;
 80054b6:	e7ab      	b.n	8005410 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80054b8:	200d      	movs	r0, #13
 80054ba:	f7ff f845 	bl	8004548 <SX1276Read>
 80054be:	2140      	movs	r1, #64	@ 0x40
 80054c0:	4301      	orrs	r1, r0
 80054c2:	b2c9      	uxtb	r1, r1
 80054c4:	200d      	movs	r0, #13
 80054c6:	f7fe fff4 	bl	80044b2 <SX1276Write>
 80054ca:	e7e9      	b.n	80054a0 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80054cc:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
 80054ce:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80054d0:	0013      	movs	r3, r2
 80054d2:	4e5a      	ldr	r6, [pc, #360]	@ (800563c <SX1276OnDio0Irq+0x244>)
 80054d4:	430b      	orrs	r3, r1
 80054d6:	d10a      	bne.n	80054ee <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80054d8:	1ce3      	adds	r3, r4, #3
 80054da:	7fd8      	ldrb	r0, [r3, #31]
 80054dc:	2800      	cmp	r0, #0
 80054de:	d127      	bne.n	8005530 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 80054e0:	0021      	movs	r1, r4
 80054e2:	2201      	movs	r2, #1
 80054e4:	313a      	adds	r1, #58	@ 0x3a
 80054e6:	f7ff f817 	bl	8004518 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80054ea:	8fa1      	ldrh	r1, [r4, #60]	@ 0x3c
 80054ec:	8f62      	ldrh	r2, [r4, #58]	@ 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80054ee:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 80054f0:	2000      	movs	r0, #0
 80054f2:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80054f4:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 80054f6:	f7ff f80f 	bl	8004518 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80054fa:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                TimerStop( &RxTimeoutTimer );
 80054fc:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80054fe:	87a3      	strh	r3, [r4, #60]	@ 0x3c
                TimerStop( &RxTimeoutTimer );
 8005500:	f000 fcfa 	bl	8005ef8 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 8005504:	1de3      	adds	r3, r4, #7
 8005506:	7fdb      	ldrb	r3, [r3, #31]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d116      	bne.n	800553a <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 800550c:	0020      	movs	r0, r4
 800550e:	3068      	adds	r0, #104	@ 0x68
                    SX1276.Settings.State = RF_IDLE;
 8005510:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 8005512:	f000 fcf1 	bl	8005ef8 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005516:	682b      	ldr	r3, [r5, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0c8      	beq.n	80054ae <SX1276OnDio0Irq+0xb6>
 800551c:	689d      	ldr	r5, [r3, #8]
 800551e:	2d00      	cmp	r5, #0
 8005520:	d0c5      	beq.n	80054ae <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8005522:	2232      	movs	r2, #50	@ 0x32
 8005524:	2300      	movs	r3, #0
 8005526:	0030      	movs	r0, r6
 8005528:	56a2      	ldrsb	r2, [r4, r2]
 800552a:	8f61      	ldrh	r1, [r4, #58]	@ 0x3a
 800552c:	47a8      	blx	r5
 800552e:	e7be      	b.n	80054ae <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8005530:	2032      	movs	r0, #50	@ 0x32
 8005532:	f7ff f809 	bl	8004548 <SX1276Read>
 8005536:	8760      	strh	r0, [r4, #58]	@ 0x3a
 8005538:	e7d7      	b.n	80054ea <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800553a:	200d      	movs	r0, #13
 800553c:	f7ff f804 	bl	8004548 <SX1276Read>
 8005540:	2140      	movs	r1, #64	@ 0x40
 8005542:	4301      	orrs	r1, r0
 8005544:	b2c9      	uxtb	r1, r1
 8005546:	200d      	movs	r0, #13
 8005548:	f7fe ffb3 	bl	80044b2 <SX1276Write>
 800554c:	e7e3      	b.n	8005516 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800554e:	2019      	movs	r0, #25
 8005550:	f7fe fffa 	bl	8004548 <SX1276Read>
 8005554:	0026      	movs	r6, r4
 8005556:	b240      	sxtb	r0, r0
 8005558:	3002      	adds	r0, #2
 800555a:	1080      	asrs	r0, r0, #2
 800555c:	3660      	adds	r6, #96	@ 0x60
 800555e:	7030      	strb	r0, [r6, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8005560:	201a      	movs	r0, #26
 8005562:	f7fe fff1 	bl	8004548 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8005566:	2200      	movs	r2, #0
 8005568:	56b2      	ldrsb	r2, [r6, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800556a:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800556c:	4934      	ldr	r1, [pc, #208]	@ (8005640 <SX1276OnDio0Irq+0x248>)
 800556e:	111b      	asrs	r3, r3, #4
 8005570:	2a00      	cmp	r2, #0
 8005572:	da41      	bge.n	80055f8 <SX1276OnDio0Irq+0x200>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8005574:	68a6      	ldr	r6, [r4, #8]
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8005576:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8005578:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800557a:	428e      	cmp	r6, r1
 800557c:	d937      	bls.n	80055ee <SX1276OnDio0Irq+0x1f6>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800557e:	3a9d      	subs	r2, #157	@ 0x9d
 8005580:	1882      	adds	r2, r0, r2
 8005582:	189a      	adds	r2, r3, r2
 8005584:	b210      	sxth	r0, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8005586:	0023      	movs	r3, r4
 8005588:	3362      	adds	r3, #98	@ 0x62
 800558a:	8018      	strh	r0, [r3, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800558c:	0026      	movs	r6, r4
 800558e:	2013      	movs	r0, #19
 8005590:	f7fe ffda 	bl	8004548 <SX1276Read>
 8005594:	3664      	adds	r6, #100	@ 0x64
 8005596:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8005598:	2010      	movs	r0, #16
 800559a:	f7fe ffd5 	bl	8004548 <SX1276Read>
 800559e:	0001      	movs	r1, r0
 80055a0:	200d      	movs	r0, #13
 80055a2:	f7fe ff86 	bl	80044b2 <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 80055a6:	7832      	ldrb	r2, [r6, #0]
 80055a8:	4e24      	ldr	r6, [pc, #144]	@ (800563c <SX1276OnDio0Irq+0x244>)
 80055aa:	2000      	movs	r0, #0
 80055ac:	0031      	movs	r1, r6
 80055ae:	f7fe ffb3 	bl	8004518 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80055b2:	0023      	movs	r3, r4
 80055b4:	3356      	adds	r3, #86	@ 0x56
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d100      	bne.n	80055be <SX1276OnDio0Irq+0x1c6>
                        SX1276.Settings.State = RF_IDLE;
 80055bc:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 80055be:	1d28      	adds	r0, r5, #4
 80055c0:	f000 fc9a 	bl	8005ef8 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d100      	bne.n	80055cc <SX1276OnDio0Irq+0x1d4>
 80055ca:	e721      	b.n	8005410 <SX1276OnDio0Irq+0x18>
 80055cc:	689d      	ldr	r5, [r3, #8]
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	d100      	bne.n	80055d4 <SX1276OnDio0Irq+0x1dc>
 80055d2:	e71d      	b.n	8005410 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80055d4:	0023      	movs	r3, r4
 80055d6:	0022      	movs	r2, r4
 80055d8:	3360      	adds	r3, #96	@ 0x60
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	3464      	adds	r4, #100	@ 0x64
 80055de:	3262      	adds	r2, #98	@ 0x62
 80055e0:	2100      	movs	r1, #0
 80055e2:	5e52      	ldrsh	r2, [r2, r1]
 80055e4:	0030      	movs	r0, r6
 80055e6:	7821      	ldrb	r1, [r4, #0]
 80055e8:	b25b      	sxtb	r3, r3
 80055ea:	47a8      	blx	r5
 80055ec:	e710      	b.n	8005410 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80055ee:	3aa4      	subs	r2, #164	@ 0xa4
 80055f0:	1882      	adds	r2, r0, r2
 80055f2:	189b      	adds	r3, r3, r2
 80055f4:	b218      	sxth	r0, r3
 80055f6:	e7c6      	b.n	8005586 <SX1276OnDio0Irq+0x18e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80055f8:	68a2      	ldr	r2, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80055fa:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80055fc:	428a      	cmp	r2, r1
 80055fe:	d903      	bls.n	8005608 <SX1276OnDio0Irq+0x210>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8005600:	389d      	subs	r0, #157	@ 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8005602:	1818      	adds	r0, r3, r0
 8005604:	b200      	sxth	r0, r0
 8005606:	e7be      	b.n	8005586 <SX1276OnDio0Irq+0x18e>
 8005608:	38a4      	subs	r0, #164	@ 0xa4
 800560a:	e7fa      	b.n	8005602 <SX1276OnDio0Irq+0x20a>
            TimerStop( &TxTimeoutTimer );
 800560c:	480d      	ldr	r0, [pc, #52]	@ (8005644 <SX1276OnDio0Irq+0x24c>)
 800560e:	4d0a      	ldr	r5, [pc, #40]	@ (8005638 <SX1276OnDio0Irq+0x240>)
 8005610:	f000 fc72 	bl	8005ef8 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 8005614:	7963      	ldrb	r3, [r4, #5]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d103      	bne.n	8005622 <SX1276OnDio0Irq+0x22a>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800561a:	2108      	movs	r1, #8
 800561c:	2012      	movs	r0, #18
 800561e:	f7fe ff48 	bl	80044b2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8005622:	2300      	movs	r3, #0
 8005624:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005626:	682b      	ldr	r3, [r5, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d100      	bne.n	800562e <SX1276OnDio0Irq+0x236>
 800562c:	e6f0      	b.n	8005410 <SX1276OnDio0Irq+0x18>
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	e712      	b.n	8005458 <SX1276OnDio0Irq+0x60>
 8005632:	46c0      	nop			@ (mov r8, r8)
 8005634:	20000460 	.word	0x20000460
 8005638:	200004e0 	.word	0x200004e0
 800563c:	20000514 	.word	0x20000514
 8005640:	1f4add40 	.word	0x1f4add40
 8005644:	200004fc 	.word	0x200004fc

08005648 <SX1276Send>:
{
 8005648:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800564a:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 800564c:	4c5f      	ldr	r4, [pc, #380]	@ (80057cc <SX1276Send+0x184>)
{
 800564e:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 8005650:	7965      	ldrb	r5, [r4, #5]
{
 8005652:	1ddf      	adds	r7, r3, #7
 8005654:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 8005656:	2d00      	cmp	r5, #0
 8005658:	d01c      	beq.n	8005694 <SX1276Send+0x4c>
 800565a:	2d01      	cmp	r5, #1
 800565c:	d041      	beq.n	80056e2 <SX1276Send+0x9a>
 800565e:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 8005660:	4d5b      	ldr	r5, [pc, #364]	@ (80057d0 <SX1276Send+0x188>)
 8005662:	485c      	ldr	r0, [pc, #368]	@ (80057d4 <SX1276Send+0x18c>)
 8005664:	f000 fc48 	bl	8005ef8 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8005668:	0028      	movs	r0, r5
 800566a:	0031      	movs	r1, r6
 800566c:	301c      	adds	r0, #28
 800566e:	f000 fcd5 	bl	800601c <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 8005672:	7963      	ldrb	r3, [r4, #5]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d100      	bne.n	800567a <SX1276Send+0x32>
 8005678:	e072      	b.n	8005760 <SX1276Send+0x118>
 800567a:	2b01      	cmp	r3, #1
 800567c:	d100      	bne.n	8005680 <SX1276Send+0x38>
 800567e:	e088      	b.n	8005792 <SX1276Send+0x14a>
    TimerStart( &TxTimeoutTimer );
 8005680:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 8005682:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 8005684:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 8005686:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 8005688:	f000 fc8a 	bl	8005fa0 <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800568c:	2003      	movs	r0, #3
 800568e:	f7fe fffd 	bl	800468c <SX1276SetOpMode.part.0>
}
 8005692:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005694:	87a5      	strh	r5, [r4, #60]	@ 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 8005696:	783d      	ldrb	r5, [r7, #0]
            if( SX1276.Settings.Fsk.FixLen == false )
 8005698:	1ce3      	adds	r3, r4, #3
            SX1276.Settings.FskPacketHandler.Size = size;
 800569a:	8765      	strh	r5, [r4, #58]	@ 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800569c:	7fd8      	ldrb	r0, [r3, #31]
 800569e:	2800      	cmp	r0, #0
 80056a0:	d11a      	bne.n	80056d8 <SX1276Send+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 80056a2:	2201      	movs	r2, #1
 80056a4:	0039      	movs	r1, r7
 80056a6:	f7fe feec 	bl	8004482 <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 80056aa:	1e6b      	subs	r3, r5, #1
 80056ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80056ae:	d905      	bls.n	80056bc <SX1276Send+0x74>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 80056b0:	002a      	movs	r2, r5
 80056b2:	0031      	movs	r1, r6
 80056b4:	4848      	ldr	r0, [pc, #288]	@ (80057d8 <SX1276Send+0x190>)
 80056b6:	f000 fad5 	bl	8005c64 <UTIL_MEM_cpy_8>
 80056ba:	2520      	movs	r5, #32
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80056bc:	0027      	movs	r7, r4
    SX1276WriteBuffer( 0, buffer, size );
 80056be:	002a      	movs	r2, r5
 80056c0:	0031      	movs	r1, r6
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80056c2:	373f      	adds	r7, #63	@ 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 80056c4:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80056c6:	703d      	strb	r5, [r7, #0]
    SX1276WriteBuffer( 0, buffer, size );
 80056c8:	f7fe fedb 	bl	8004482 <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80056cc:	783b      	ldrb	r3, [r7, #0]
 80056ce:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80056d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80056d2:	189b      	adds	r3, r3, r2
 80056d4:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        break;
 80056d6:	e7c3      	b.n	8005660 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 80056d8:	0029      	movs	r1, r5
 80056da:	2032      	movs	r0, #50	@ 0x32
 80056dc:	f7fe fee9 	bl	80044b2 <SX1276Write>
 80056e0:	e7e3      	b.n	80056aa <SX1276Send+0x62>
            if( SX1276.Settings.LoRa.IqInverted == true )
 80056e2:	0023      	movs	r3, r4
 80056e4:	3355      	adds	r3, #85	@ 0x55
 80056e6:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80056e8:	2033      	movs	r0, #51	@ 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d02d      	beq.n	800574a <SX1276Send+0x102>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80056ee:	f7fe ff2b 	bl	8004548 <SX1276Read>
 80056f2:	2341      	movs	r3, #65	@ 0x41
 80056f4:	4398      	bics	r0, r3
 80056f6:	b2c1      	uxtb	r1, r0
 80056f8:	2033      	movs	r0, #51	@ 0x33
 80056fa:	f7fe feda 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80056fe:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8005700:	203b      	movs	r0, #59	@ 0x3b
 8005702:	f7fe fed6 	bl	80044b2 <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8005706:	0023      	movs	r3, r4
 8005708:	783d      	ldrb	r5, [r7, #0]
 800570a:	3364      	adds	r3, #100	@ 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800570c:	0029      	movs	r1, r5
 800570e:	2022      	movs	r0, #34	@ 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 8005710:	701d      	strb	r5, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8005712:	f7fe fece 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8005716:	2100      	movs	r1, #0
 8005718:	200e      	movs	r0, #14
 800571a:	f7fe feca 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800571e:	2100      	movs	r1, #0
 8005720:	200d      	movs	r0, #13
 8005722:	f7fe fec6 	bl	80044b2 <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8005726:	2001      	movs	r0, #1
 8005728:	f7fe ff0e 	bl	8004548 <SX1276Read>
 800572c:	23f8      	movs	r3, #248	@ 0xf8
 800572e:	4398      	bics	r0, r3
 8005730:	d104      	bne.n	800573c <SX1276Send+0xf4>
                SX1276SetStby( );
 8005732:	f7fe ffd7 	bl	80046e4 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 8005736:	2001      	movs	r0, #1
 8005738:	f7fb fe10 	bl	800135c <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 800573c:	0031      	movs	r1, r6
 800573e:	002a      	movs	r2, r5
 8005740:	2000      	movs	r0, #0
 8005742:	f7fe fe9e 	bl	8004482 <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8005746:	6da6      	ldr	r6, [r4, #88]	@ 0x58
        break;
 8005748:	e78a      	b.n	8005660 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800574a:	f7fe fefd 	bl	8004548 <SX1276Read>
 800574e:	2341      	movs	r3, #65	@ 0x41
 8005750:	4398      	bics	r0, r3
 8005752:	4305      	orrs	r5, r0
 8005754:	b2e9      	uxtb	r1, r5
 8005756:	2033      	movs	r0, #51	@ 0x33
 8005758:	f7fe feab 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800575c:	211d      	movs	r1, #29
 800575e:	e7cf      	b.n	8005700 <SX1276Send+0xb8>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8005760:	2040      	movs	r0, #64	@ 0x40
 8005762:	f7fe fef1 	bl	8004548 <SX1276Read>
 8005766:	2103      	movs	r1, #3
 8005768:	4001      	ands	r1, r0
 800576a:	2040      	movs	r0, #64	@ 0x40
 800576c:	f7fe fea1 	bl	80044b2 <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8005770:	2041      	movs	r0, #65	@ 0x41
 8005772:	f7fe fee9 	bl	8004548 <SX1276Read>
 8005776:	213e      	movs	r1, #62	@ 0x3e
 8005778:	4001      	ands	r1, r0
 800577a:	2041      	movs	r0, #65	@ 0x41
 800577c:	f7fe fe99 	bl	80044b2 <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8005780:	2035      	movs	r0, #53	@ 0x35
 8005782:	f7fe fee1 	bl	8004548 <SX1276Read>
 8005786:	233f      	movs	r3, #63	@ 0x3f
 8005788:	4018      	ands	r0, r3
 800578a:	0023      	movs	r3, r4
 800578c:	333e      	adds	r3, #62	@ 0x3e
 800578e:	7018      	strb	r0, [r3, #0]
        break;
 8005790:	e776      	b.n	8005680 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005792:	0023      	movs	r3, r4
 8005794:	3353      	adds	r3, #83	@ 0x53
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00e      	beq.n	80057ba <SX1276Send+0x172>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800579c:	21f5      	movs	r1, #245	@ 0xf5
 800579e:	2011      	movs	r0, #17
 80057a0:	f7fe fe87 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80057a4:	2040      	movs	r0, #64	@ 0x40
 80057a6:	f7fe fecf 	bl	8004548 <SX1276Read>
 80057aa:	2333      	movs	r3, #51	@ 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80057ac:	0001      	movs	r1, r0
 80057ae:	2040      	movs	r0, #64	@ 0x40
 80057b0:	4019      	ands	r1, r3
 80057b2:	4301      	orrs	r1, r0
 80057b4:	f7fe fe7d 	bl	80044b2 <SX1276Write>
 80057b8:	e762      	b.n	8005680 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80057ba:	21f7      	movs	r1, #247	@ 0xf7
 80057bc:	2011      	movs	r0, #17
 80057be:	f7fe fe78 	bl	80044b2 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 80057c2:	2040      	movs	r0, #64	@ 0x40
 80057c4:	f7fe fec0 	bl	8004548 <SX1276Read>
 80057c8:	233f      	movs	r3, #63	@ 0x3f
 80057ca:	e7ef      	b.n	80057ac <SX1276Send+0x164>
 80057cc:	20000460 	.word	0x20000460
 80057d0:	200004e0 	.word	0x200004e0
 80057d4:	200004e4 	.word	0x200004e4
 80057d8:	20000514 	.word	0x20000514

080057dc <SX1276OnDio1Irq>:
{
 80057dc:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 80057de:	4c39      	ldr	r4, [pc, #228]	@ (80058c4 <SX1276OnDio1Irq+0xe8>)
 80057e0:	7925      	ldrb	r5, [r4, #4]
 80057e2:	2d01      	cmp	r5, #1
 80057e4:	d002      	beq.n	80057ec <SX1276OnDio1Irq+0x10>
 80057e6:	2d02      	cmp	r5, #2
 80057e8:	d050      	beq.n	800588c <SX1276OnDio1Irq+0xb0>
}
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 80057ec:	7963      	ldrb	r3, [r4, #5]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d017      	beq.n	8005822 <SX1276OnDio1Irq+0x46>
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d1f9      	bne.n	80057ea <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 80057f6:	f7fc fa1f 	bl	8001c38 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 80057fa:	2800      	cmp	r0, #0
 80057fc:	d0f5      	beq.n	80057ea <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 80057fe:	4832      	ldr	r0, [pc, #200]	@ (80058c8 <SX1276OnDio1Irq+0xec>)
 8005800:	4d32      	ldr	r5, [pc, #200]	@ (80058cc <SX1276OnDio1Irq+0xf0>)
 8005802:	f000 fb79 	bl	8005ef8 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8005806:	2180      	movs	r1, #128	@ 0x80
 8005808:	2012      	movs	r0, #18
 800580a:	f7fe fe52 	bl	80044b2 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800580e:	2300      	movs	r3, #0
 8005810:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005812:	682b      	ldr	r3, [r5, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0e8      	beq.n	80057ea <SX1276OnDio1Irq+0xe>
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0e5      	beq.n	80057ea <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800581e:	4798      	blx	r3
 8005820:	e7e3      	b.n	80057ea <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 8005822:	f7fc fa09 	bl	8001c38 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8005826:	2800      	cmp	r0, #0
 8005828:	d0df      	beq.n	80057ea <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800582a:	0020      	movs	r0, r4
 800582c:	3068      	adds	r0, #104	@ 0x68
 800582e:	f000 fb63 	bl	8005ef8 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8005832:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 8005834:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 8005836:	4313      	orrs	r3, r2
 8005838:	d108      	bne.n	800584c <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800583a:	1ce3      	adds	r3, r4, #3
 800583c:	7fd8      	ldrb	r0, [r3, #31]
 800583e:	2800      	cmp	r0, #0
 8005840:	d119      	bne.n	8005876 <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 8005842:	0021      	movs	r1, r4
 8005844:	002a      	movs	r2, r5
 8005846:	313a      	adds	r1, #58	@ 0x3a
 8005848:	f7fe fe66 	bl	8004518 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800584c:	0025      	movs	r5, r4
 800584e:	353e      	adds	r5, #62	@ 0x3e
 8005850:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 8005852:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8005854:	491e      	ldr	r1, [pc, #120]	@ (80058d0 <SX1276OnDio1Irq+0xf4>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 8005856:	782a      	ldrb	r2, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8005858:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800585a:	1a1b      	subs	r3, r3, r0
 800585c:	4293      	cmp	r3, r2
 800585e:	db0f      	blt.n	8005880 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8005860:	3a01      	subs	r2, #1
    SX1276ReadBuffer( 0, buffer, size );
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	2000      	movs	r0, #0
 8005866:	f7fe fe57 	bl	8004518 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800586a:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 800586c:	782b      	ldrb	r3, [r5, #0]
 800586e:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005870:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8005872:	87a3      	strh	r3, [r4, #60]	@ 0x3c
}
 8005874:	e7b9      	b.n	80057ea <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8005876:	2032      	movs	r0, #50	@ 0x32
 8005878:	f7fe fe66 	bl	8004548 <SX1276Read>
 800587c:	8760      	strh	r0, [r4, #58]	@ 0x3a
 800587e:	e7e5      	b.n	800584c <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 8005880:	2000      	movs	r0, #0
 8005882:	b2da      	uxtb	r2, r3
 8005884:	f7fe fe48 	bl	8004518 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8005888:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
 800588a:	e7f2      	b.n	8005872 <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 800588c:	7965      	ldrb	r5, [r4, #5]
 800588e:	2d00      	cmp	r5, #0
 8005890:	d1ab      	bne.n	80057ea <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 8005892:	f7fc f9d1 	bl	8001c38 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 8005896:	2801      	cmp	r0, #1
 8005898:	d0a7      	beq.n	80057ea <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800589a:	0026      	movs	r6, r4
 800589c:	363f      	adds	r6, #63	@ 0x3f
 800589e:	8fa0      	ldrh	r0, [r4, #60]	@ 0x3c
 80058a0:	8f63      	ldrh	r3, [r4, #58]	@ 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80058a2:	490b      	ldr	r1, [pc, #44]	@ (80058d0 <SX1276OnDio1Irq+0xf4>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80058a4:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80058a6:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80058a8:	1a1b      	subs	r3, r3, r0
 80058aa:	4293      	cmp	r3, r2
 80058ac:	dd05      	ble.n	80058ba <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 80058ae:	0028      	movs	r0, r5
 80058b0:	f7fe fde7 	bl	8004482 <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80058b4:	7833      	ldrb	r3, [r6, #0]
 80058b6:	8fa2      	ldrh	r2, [r4, #60]	@ 0x3c
 80058b8:	e7da      	b.n	8005870 <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 80058ba:	0028      	movs	r0, r5
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	f7fe fde0 	bl	8004482 <SX1276WriteBuffer>
 80058c2:	e7e1      	b.n	8005888 <SX1276OnDio1Irq+0xac>
 80058c4:	20000460 	.word	0x20000460
 80058c8:	200004e4 	.word	0x200004e4
 80058cc:	200004e0 	.word	0x200004e0
 80058d0:	20000514 	.word	0x20000514

080058d4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80058d4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058d6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80058da:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80058dc:	4b16      	ldr	r3, [pc, #88]	@ (8005938 <TRACE_AllocateBufer+0x64>)
 80058de:	8a5d      	ldrh	r5, [r3, #18]
 80058e0:	8a1a      	ldrh	r2, [r3, #16]
 80058e2:	4295      	cmp	r5, r2
 80058e4:	d114      	bne.n	8005910 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80058e6:	2280      	movs	r2, #128	@ 0x80
 80058e8:	0092      	lsls	r2, r2, #2
 80058ea:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80058ec:	b292      	uxth	r2, r2
 80058ee:	4290      	cmp	r0, r2
 80058f0:	d306      	bcc.n	8005900 <TRACE_AllocateBufer+0x2c>
 80058f2:	4285      	cmp	r5, r0
 80058f4:	d916      	bls.n	8005924 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80058f6:	2201      	movs	r2, #1
 80058f8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80058fa:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80058fc:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80058fe:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8005900:	8a5a      	ldrh	r2, [r3, #18]
 8005902:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8005904:	1812      	adds	r2, r2, r0
 8005906:	05d2      	lsls	r2, r2, #23
 8005908:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 800590a:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800590c:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800590e:	e00b      	b.n	8005928 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8005910:	4295      	cmp	r5, r2
 8005912:	d90c      	bls.n	800592e <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8005914:	2680      	movs	r6, #128	@ 0x80
 8005916:	00b6      	lsls	r6, r6, #2
 8005918:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800591a:	b2b6      	uxth	r6, r6
 800591c:	4286      	cmp	r6, r0
 800591e:	d8ef      	bhi.n	8005900 <TRACE_AllocateBufer+0x2c>
 8005920:	4282      	cmp	r2, r0
 8005922:	d8e8      	bhi.n	80058f6 <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 8005924:	2001      	movs	r0, #1
 8005926:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005928:	f384 8810 	msr	PRIMASK, r4
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800592c:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800592e:	1b52      	subs	r2, r2, r5
  if(freesize > Size)
 8005930:	b292      	uxth	r2, r2
 8005932:	4282      	cmp	r2, r0
 8005934:	d8e4      	bhi.n	8005900 <TRACE_AllocateBufer+0x2c>
 8005936:	e7f5      	b.n	8005924 <TRACE_AllocateBufer+0x50>
 8005938:	20000614 	.word	0x20000614

0800593c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005940:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8005942:	4a03      	ldr	r2, [pc, #12]	@ (8005950 <TRACE_Lock+0x14>)
 8005944:	8ad3      	ldrh	r3, [r2, #22]
 8005946:	3301      	adds	r3, #1
 8005948:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800594e:	4770      	bx	lr
 8005950:	20000614 	.word	0x20000614

08005954 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005954:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005958:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800595a:	4a03      	ldr	r2, [pc, #12]	@ (8005968 <TRACE_UnLock+0x14>)
 800595c:	8ad3      	ldrh	r3, [r2, #22]
 800595e:	3b01      	subs	r3, #1
 8005960:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005962:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8005966:	4770      	bx	lr
 8005968:	20000614 	.word	0x20000614

0800596c <UTIL_ADV_TRACE_Init>:
{
 800596c:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800596e:	2218      	movs	r2, #24
 8005970:	2100      	movs	r1, #0
 8005972:	4807      	ldr	r0, [pc, #28]	@ (8005990 <UTIL_ADV_TRACE_Init+0x24>)
 8005974:	f000 f97f 	bl	8005c76 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8005978:	2280      	movs	r2, #128	@ 0x80
 800597a:	2100      	movs	r1, #0
 800597c:	4805      	ldr	r0, [pc, #20]	@ (8005994 <UTIL_ADV_TRACE_Init+0x28>)
 800597e:	0092      	lsls	r2, r2, #2
 8005980:	f000 f979 	bl	8005c76 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8005984:	4b04      	ldr	r3, [pc, #16]	@ (8005998 <UTIL_ADV_TRACE_Init+0x2c>)
 8005986:	4805      	ldr	r0, [pc, #20]	@ (800599c <UTIL_ADV_TRACE_Init+0x30>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4798      	blx	r3
}
 800598c:	bd10      	pop	{r4, pc}
 800598e:	46c0      	nop			@ (mov r8, r8)
 8005990:	20000614 	.word	0x20000614
 8005994:	2000072c 	.word	0x2000072c
 8005998:	08006440 	.word	0x08006440
 800599c:	08005b05 	.word	0x08005b05

080059a0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80059a0:	4b01      	ldr	r3, [pc, #4]	@ (80059a8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80059a2:	6058      	str	r0, [r3, #4]
}
 80059a4:	4770      	bx	lr
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	20000614 	.word	0x20000614

080059ac <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80059ac:	4b01      	ldr	r3, [pc, #4]	@ (80059b4 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80059ae:	7218      	strb	r0, [r3, #8]
}
 80059b0:	4770      	bx	lr
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	20000614 	.word	0x20000614

080059b8 <TRACE_Send>:
{
 80059b8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ba:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80059be:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80059c0:	4c1b      	ldr	r4, [pc, #108]	@ (8005a30 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 80059c2:	8ae6      	ldrh	r6, [r4, #22]
 80059c4:	2e00      	cmp	r6, #0
 80059c6:	d12f      	bne.n	8005a28 <TRACE_Send+0x70>
    TRACE_Lock();
 80059c8:	f7ff ffb8 	bl	800593c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80059cc:	8a21      	ldrh	r1, [r4, #16]
 80059ce:	8a62      	ldrh	r2, [r4, #18]
 80059d0:	4291      	cmp	r1, r2
 80059d2:	d027      	beq.n	8005a24 <TRACE_Send+0x6c>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80059d4:	78a3      	ldrb	r3, [r4, #2]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d110      	bne.n	80059fc <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80059da:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80059dc:	8026      	strh	r6, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80059de:	1a5b      	subs	r3, r3, r1
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80059e0:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80059e6:	70a1      	strb	r1, [r4, #2]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d109      	bne.n	8005a00 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80059ec:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80059ee:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80059f0:	8a21      	ldrh	r1, [r4, #16]
 80059f2:	428a      	cmp	r2, r1
 80059f4:	d911      	bls.n	8005a1a <TRACE_Send+0x62>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80059f6:	1a52      	subs	r2, r2, r1
 80059f8:	82a2      	strh	r2, [r4, #20]
 80059fa:	e001      	b.n	8005a00 <TRACE_Send+0x48>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d0f7      	beq.n	80059f0 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8005a00:	8a26      	ldrh	r6, [r4, #16]
 8005a02:	4b0c      	ldr	r3, [pc, #48]	@ (8005a34 <TRACE_Send+0x7c>)
 8005a04:	18f6      	adds	r6, r6, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a06:	f385 8810 	msr	PRIMASK, r5
      UTIL_ADV_TRACE_PreSendHook();
 8005a0a:	f7fb fc95 	bl	8001338 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a38 <TRACE_Send+0x80>)
 8005a10:	0030      	movs	r0, r6
 8005a12:	8aa1      	ldrh	r1, [r4, #20]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	4798      	blx	r3
}
 8005a18:	bd70      	pop	{r4, r5, r6, pc}
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8005a1a:	2380      	movs	r3, #128	@ 0x80
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	1a5b      	subs	r3, r3, r1
 8005a20:	82a3      	strh	r3, [r4, #20]
 8005a22:	e7ed      	b.n	8005a00 <TRACE_Send+0x48>
      TRACE_UnLock();
 8005a24:	f7ff ff96 	bl	8005954 <TRACE_UnLock>
 8005a28:	f385 8810 	msr	PRIMASK, r5
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	e7f3      	b.n	8005a18 <TRACE_Send+0x60>
 8005a30:	20000614 	.word	0x20000614
 8005a34:	2000072c 	.word	0x2000072c
 8005a38:	08006440 	.word	0x08006440

08005a3c <UTIL_ADV_TRACE_COND_FSend>:
{
 8005a3c:	b408      	push	{r3}
 8005a3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a40:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 8005a42:	2300      	movs	r3, #0
 8005a44:	466c      	mov	r4, sp
 8005a46:	8023      	strh	r3, [r4, #0]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8005a48:	4b2b      	ldr	r3, [pc, #172]	@ (8005af8 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8005a4a:	7a1c      	ldrb	r4, [r3, #8]
 8005a4c:	4284      	cmp	r4, r0
 8005a4e:	d34f      	bcc.n	8005af0 <UTIL_ADV_TRACE_COND_FSend+0xb4>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8005a50:	68d8      	ldr	r0, [r3, #12]
 8005a52:	4008      	ands	r0, r1
 8005a54:	4288      	cmp	r0, r1
 8005a56:	d14d      	bne.n	8005af4 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d004      	beq.n	8005a68 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	d002      	beq.n	8005a68 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8005a62:	4669      	mov	r1, sp
 8005a64:	a802      	add	r0, sp, #8
 8005a66:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8005a68:	2180      	movs	r1, #128	@ 0x80
  va_start( vaArgs, strFormat);
 8005a6a:	ab0c      	add	r3, sp, #48	@ 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8005a6c:	0049      	lsls	r1, r1, #1
 8005a6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005a70:	4822      	ldr	r0, [pc, #136]	@ (8005afc <UTIL_ADV_TRACE_COND_FSend+0xc0>)
  va_start( vaArgs, strFormat);
 8005a72:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8005a74:	f000 fb30 	bl	80060d8 <tiny_vsnprintf_like>
 8005a78:	0005      	movs	r5, r0
  TRACE_Lock();
 8005a7a:	f7ff ff5f 	bl	800593c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8005a7e:	466b      	mov	r3, sp
 8005a80:	8818      	ldrh	r0, [r3, #0]
 8005a82:	1c9c      	adds	r4, r3, #2
 8005a84:	1940      	adds	r0, r0, r5
 8005a86:	0021      	movs	r1, r4
 8005a88:	b280      	uxth	r0, r0
 8005a8a:	f7ff ff23 	bl	80058d4 <TRACE_AllocateBufer>
 8005a8e:	3001      	adds	r0, #1
 8005a90:	d029      	beq.n	8005ae6 <UTIL_ADV_TRACE_COND_FSend+0xaa>
    for (idx = 0u; idx < timestamp_size; idx++)
 8005a92:	466b      	mov	r3, sp
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8005a94:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 8005a96:	881a      	ldrh	r2, [r3, #0]
 8005a98:	2300      	movs	r3, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8005a9a:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 8005a9c:	001e      	movs	r6, r3
 8005a9e:	8825      	ldrh	r5, [r4, #0]
 8005aa0:	4817      	ldr	r0, [pc, #92]	@ (8005b00 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8005aa2:	b29f      	uxth	r7, r3
 8005aa4:	19e9      	adds	r1, r5, r7
 8005aa6:	b289      	uxth	r1, r1
 8005aa8:	42ba      	cmp	r2, r7
 8005aaa:	d814      	bhi.n	8005ad6 <UTIL_ADV_TRACE_COND_FSend+0x9a>
 8005aac:	2e00      	cmp	r6, #0
 8005aae:	d001      	beq.n	8005ab4 <UTIL_ADV_TRACE_COND_FSend+0x78>
 8005ab0:	1952      	adds	r2, r2, r5
 8005ab2:	8022      	strh	r2, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8005ab4:	2180      	movs	r1, #128	@ 0x80
 8005ab6:	8823      	ldrh	r3, [r4, #0]
 8005ab8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005aba:	0049      	lsls	r1, r1, #1
 8005abc:	18c0      	adds	r0, r0, r3
 8005abe:	9b01      	ldr	r3, [sp, #4]
 8005ac0:	f000 fb0a 	bl	80060d8 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8005ac4:	f7ff ff46 	bl	8005954 <TRACE_UnLock>
    return TRACE_Send();
 8005ac8:	f7ff ff76 	bl	80059b8 <TRACE_Send>
}
 8005acc:	b006      	add	sp, #24
 8005ace:	bcf0      	pop	{r4, r5, r6, r7}
 8005ad0:	bc08      	pop	{r3}
 8005ad2:	b001      	add	sp, #4
 8005ad4:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8005ad6:	466e      	mov	r6, sp
 8005ad8:	2708      	movs	r7, #8
 8005ada:	19f6      	adds	r6, r6, r7
 8005adc:	5cf6      	ldrb	r6, [r6, r3]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	5446      	strb	r6, [r0, r1]
 8005ae2:	4666      	mov	r6, ip
 8005ae4:	e7dd      	b.n	8005aa2 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 8005ae6:	f7ff ff35 	bl	8005954 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8005aea:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 8005aec:	4240      	negs	r0, r0
 8005aee:	e7ed      	b.n	8005acc <UTIL_ADV_TRACE_COND_FSend+0x90>
    return UTIL_ADV_TRACE_GIVEUP;
 8005af0:	2005      	movs	r0, #5
 8005af2:	e7fb      	b.n	8005aec <UTIL_ADV_TRACE_COND_FSend+0xb0>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8005af4:	2006      	movs	r0, #6
 8005af6:	e7f9      	b.n	8005aec <UTIL_ADV_TRACE_COND_FSend+0xb0>
 8005af8:	20000614 	.word	0x20000614
 8005afc:	2000062c 	.word	0x2000062c
 8005b00:	2000072c 	.word	0x2000072c

08005b04 <TRACE_TxCpltCallback>:
{
 8005b04:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b06:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005b0a:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8005b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8005b8c <TRACE_TxCpltCallback+0x88>)
 8005b0e:	789a      	ldrb	r2, [r3, #2]
 8005b10:	2a02      	cmp	r2, #2
 8005b12:	d11d      	bne.n	8005b50 <TRACE_TxCpltCallback+0x4c>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8005b14:	2200      	movs	r2, #0
 8005b16:	709a      	strb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8005b18:	8a5c      	ldrh	r4, [r3, #18]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8005b1a:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8005b1c:	4294      	cmp	r4, r2
 8005b1e:	d02e      	beq.n	8005b7e <TRACE_TxCpltCallback+0x7a>
 8005b20:	8ad8      	ldrh	r0, [r3, #22]
 8005b22:	2801      	cmp	r0, #1
 8005b24:	d12b      	bne.n	8005b7e <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8005b26:	7898      	ldrb	r0, [r3, #2]
 8005b28:	2801      	cmp	r0, #1
 8005b2a:	d117      	bne.n	8005b5c <TRACE_TxCpltCallback+0x58>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8005b2c:	8818      	ldrh	r0, [r3, #0]
 8005b2e:	1a82      	subs	r2, r0, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8005b30:	2002      	movs	r0, #2
 8005b32:	7098      	strb	r0, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8005b34:	2000      	movs	r0, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8005b36:	b292      	uxth	r2, r2
 8005b38:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8005b3a:	8018      	strh	r0, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8005b3c:	4282      	cmp	r2, r0
 8005b3e:	d10f      	bne.n	8005b60 <TRACE_TxCpltCallback+0x5c>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8005b40:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8005b42:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8005b44:	8a18      	ldrh	r0, [r3, #16]
 8005b46:	4284      	cmp	r4, r0
 8005b48:	d914      	bls.n	8005b74 <TRACE_TxCpltCallback+0x70>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8005b4a:	1a24      	subs	r4, r4, r0
 8005b4c:	829c      	strh	r4, [r3, #20]
 8005b4e:	e007      	b.n	8005b60 <TRACE_TxCpltCallback+0x5c>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8005b50:	8a1a      	ldrh	r2, [r3, #16]
 8005b52:	8a98      	ldrh	r0, [r3, #20]
 8005b54:	1812      	adds	r2, r2, r0
 8005b56:	05d2      	lsls	r2, r2, #23
 8005b58:	0dd2      	lsrs	r2, r2, #23
 8005b5a:	e7dd      	b.n	8005b18 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	d0f1      	beq.n	8005b44 <TRACE_TxCpltCallback+0x40>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8005b60:	8a18      	ldrh	r0, [r3, #16]
 8005b62:	4a0b      	ldr	r2, [pc, #44]	@ (8005b90 <TRACE_TxCpltCallback+0x8c>)
 8005b64:	1880      	adds	r0, r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b66:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8005b6a:	8a99      	ldrh	r1, [r3, #20]
 8005b6c:	4b09      	ldr	r3, [pc, #36]	@ (8005b94 <TRACE_TxCpltCallback+0x90>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4798      	blx	r3
}
 8005b72:	bd10      	pop	{r4, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8005b74:	2280      	movs	r2, #128	@ 0x80
 8005b76:	0092      	lsls	r2, r2, #2
 8005b78:	1a12      	subs	r2, r2, r0
 8005b7a:	829a      	strh	r2, [r3, #20]
 8005b7c:	e7f0      	b.n	8005b60 <TRACE_TxCpltCallback+0x5c>
 8005b7e:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8005b82:	f7fb fbdf 	bl	8001344 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8005b86:	f7ff fee5 	bl	8005954 <TRACE_UnLock>
}
 8005b8a:	e7f2      	b.n	8005b72 <TRACE_TxCpltCallback+0x6e>
 8005b8c:	20000614 	.word	0x20000614
 8005b90:	2000072c 	.word	0x2000072c
 8005b94:	08006440 	.word	0x08006440

08005b98 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8005b98:	2200      	movs	r2, #0
 8005b9a:	4b02      	ldr	r3, [pc, #8]	@ (8005ba4 <UTIL_LPM_Init+0xc>)
 8005b9c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8005b9e:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8005ba0:	4770      	bx	lr
 8005ba2:	46c0      	nop			@ (mov r8, r8)
 8005ba4:	2000092c 	.word	0x2000092c

08005ba8 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8005ba8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005baa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005bae:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8005bb0:	2900      	cmp	r1, #0
 8005bb2:	d008      	beq.n	8005bc6 <UTIL_LPM_SetStopMode+0x1e>
 8005bb4:	2901      	cmp	r1, #1
 8005bb6:	d103      	bne.n	8005bc0 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8005bb8:	4a05      	ldr	r2, [pc, #20]	@ (8005bd0 <UTIL_LPM_SetStopMode+0x28>)
 8005bba:	6813      	ldr	r3, [r2, #0]
 8005bbc:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8005bbe:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bc0:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8005bc4:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 8005bc6:	4a02      	ldr	r2, [pc, #8]	@ (8005bd0 <UTIL_LPM_SetStopMode+0x28>)
 8005bc8:	6813      	ldr	r3, [r2, #0]
 8005bca:	4383      	bics	r3, r0
 8005bcc:	e7f7      	b.n	8005bbe <UTIL_LPM_SetStopMode+0x16>
 8005bce:	46c0      	nop			@ (mov r8, r8)
 8005bd0:	2000092c 	.word	0x2000092c

08005bd4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8005bd4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005bda:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d008      	beq.n	8005bf2 <UTIL_LPM_SetOffMode+0x1e>
 8005be0:	2901      	cmp	r1, #1
 8005be2:	d103      	bne.n	8005bec <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8005be4:	4a05      	ldr	r2, [pc, #20]	@ (8005bfc <UTIL_LPM_SetOffMode+0x28>)
 8005be6:	6853      	ldr	r3, [r2, #4]
 8005be8:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8005bea:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bec:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8005bf0:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8005bf2:	4a02      	ldr	r2, [pc, #8]	@ (8005bfc <UTIL_LPM_SetOffMode+0x28>)
 8005bf4:	6853      	ldr	r3, [r2, #4]
 8005bf6:	4383      	bics	r3, r0
 8005bf8:	e7f7      	b.n	8005bea <UTIL_LPM_SetOffMode+0x16>
 8005bfa:	46c0      	nop			@ (mov r8, r8)
 8005bfc:	2000092c 	.word	0x2000092c

08005c00 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c00:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c04:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 8005c06:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8005c08:	4b05      	ldr	r3, [pc, #20]	@ (8005c20 <UTIL_LPM_GetMode+0x20>)
 8005c0a:	6819      	ldr	r1, [r3, #0]
 8005c0c:	4281      	cmp	r1, r0
 8005c0e:	d103      	bne.n	8005c18 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8005c10:	6858      	ldr	r0, [r3, #4]
    {
      /**
       * At least one user disallows Off Mode
       */
      mode_selected = UTIL_LPM_STOPMODE;
 8005c12:	4243      	negs	r3, r0
 8005c14:	4158      	adcs	r0, r3
 8005c16:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c18:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 8005c1c:	4770      	bx	lr
 8005c1e:	46c0      	nop			@ (mov r8, r8)
 8005c20:	2000092c 	.word	0x2000092c

08005c24 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 8005c24:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c26:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c2a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <UTIL_LPM_EnterLowPower+0x38>)
 8005c2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005c60 <UTIL_LPM_EnterLowPower+0x3c>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	2a00      	cmp	r2, #0
 8005c34:	d006      	beq.n	8005c44 <UTIL_LPM_EnterLowPower+0x20>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8005c36:	6823      	ldr	r3, [r4, #0]
 8005c38:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8005c3a:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 8005c3c:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3e:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8005c42:	bd70      	pop	{r4, r5, r6, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <UTIL_LPM_EnterLowPower+0x2e>
        UTIL_PowerDriver.EnterStopMode( );
 8005c4a:	68a3      	ldr	r3, [r4, #8]
 8005c4c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8005c4e:	68e3      	ldr	r3, [r4, #12]
 8005c50:	e7f4      	b.n	8005c3c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8005c52:	6923      	ldr	r3, [r4, #16]
 8005c54:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8005c56:	6963      	ldr	r3, [r4, #20]
 8005c58:	e7f0      	b.n	8005c3c <UTIL_LPM_EnterLowPower+0x18>
 8005c5a:	46c0      	nop			@ (mov r8, r8)
 8005c5c:	2000092c 	.word	0x2000092c
 8005c60:	08006428 	.word	0x08006428

08005c64 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 8005c64:	2300      	movs	r3, #0
{
 8005c66:	b510      	push	{r4, lr}
  while( size-- )
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d100      	bne.n	8005c6e <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 8005c6c:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 8005c6e:	5ccc      	ldrb	r4, [r1, r3]
 8005c70:	54c4      	strb	r4, [r0, r3]
 8005c72:	3301      	adds	r3, #1
 8005c74:	e7f8      	b.n	8005c68 <UTIL_MEM_cpy_8+0x4>

08005c76 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8005c76:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 8005c78:	f000 fb56 	bl	8006328 <memset>
  }
}
 8005c7c:	bd10      	pop	{r4, pc}
	...

08005c80 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8005c80:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c82:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005c86:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8005c88:	4b05      	ldr	r3, [pc, #20]	@ (8005ca0 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8005c8a:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	4302      	orrs	r2, r0
 8005c90:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8005c92:	185b      	adds	r3, r3, r1
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	4302      	orrs	r2, r0
 8005c98:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c9a:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 8005c9e:	bd10      	pop	{r4, pc}
 8005ca0:	20000934 	.word	0x20000934

08005ca4 <UTIL_SEQ_PreIdle>:
__WEAK void UTIL_SEQ_Idle( void )
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
 8005ca4:	4770      	bx	lr

08005ca6 <UTIL_SEQ_PostIdle>:
   * Unless specified by the application, there is nothing to be done
   */
  return;
}

__WEAK void UTIL_SEQ_PostIdle( void )
 8005ca6:	4770      	bx	lr

08005ca8 <SEQ_BitPosition>:
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8005ca8:	2280      	movs	r2, #128	@ 0x80
  uint8_t n = 0U;
 8005caa:	2300      	movs	r3, #0
  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 8005cac:	0252      	lsls	r2, r2, #9
 8005cae:	4290      	cmp	r0, r2
 8005cb0:	d201      	bcs.n	8005cb6 <SEQ_BitPosition+0xe>
 8005cb2:	0400      	lsls	r0, r0, #16
 8005cb4:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 8005cb6:	2280      	movs	r2, #128	@ 0x80
 8005cb8:	0452      	lsls	r2, r2, #17
 8005cba:	4290      	cmp	r0, r2
 8005cbc:	d202      	bcs.n	8005cc4 <SEQ_BitPosition+0x1c>
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 8005cc4:	2280      	movs	r2, #128	@ 0x80
 8005cc6:	0552      	lsls	r2, r2, #21
 8005cc8:	4290      	cmp	r0, r2
 8005cca:	d202      	bcs.n	8005cd2 <SEQ_BitPosition+0x2a>
 8005ccc:	3304      	adds	r3, #4
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 8005cd2:	221f      	movs	r2, #31
 8005cd4:	1ad3      	subs	r3, r2, r3
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 8005cd6:	4a03      	ldr	r2, [pc, #12]	@ (8005ce4 <SEQ_BitPosition+0x3c>)
 8005cd8:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 8005cda:	5c10      	ldrb	r0, [r2, r0]
 8005cdc:	1a18      	subs	r0, r3, r0
 8005cde:	b2c0      	uxtb	r0, r0
}
 8005ce0:	4770      	bx	lr
 8005ce2:	46c0      	nop			@ (mov r8, r8)
 8005ce4:	0800661c 	.word	0x0800661c

08005ce8 <UTIL_SEQ_Run>:
{
 8005ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 8005cea:	4e2f      	ldr	r6, [pc, #188]	@ (8005da8 <UTIL_SEQ_Run+0xc0>)
 8005cec:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 8005cee:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 8005cf0:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 8005cf2:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 8005cf4:	4c2d      	ldr	r4, [pc, #180]	@ (8005dac <UTIL_SEQ_Run+0xc4>)
 8005cf6:	6831      	ldr	r1, [r6, #0]
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	6873      	ldr	r3, [r6, #4]
 8005cfc:	400a      	ands	r2, r1
 8005cfe:	4213      	tst	r3, r2
 8005d00:	d037      	beq.n	8005d72 <UTIL_SEQ_Run+0x8a>
 8005d02:	68a0      	ldr	r0, [r4, #8]
 8005d04:	6862      	ldr	r2, [r4, #4]
 8005d06:	0005      	movs	r5, r0
 8005d08:	4015      	ands	r5, r2
 8005d0a:	4210      	tst	r0, r2
 8005d0c:	d131      	bne.n	8005d72 <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8005d0e:	6922      	ldr	r2, [r4, #16]
 8005d10:	400b      	ands	r3, r1
 8005d12:	0010      	movs	r0, r2
 8005d14:	4018      	ands	r0, r3
 8005d16:	421a      	tst	r2, r3
 8005d18:	d102      	bne.n	8005d20 <UTIL_SEQ_Run+0x38>
      counter++;
 8005d1a:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 8005d1c:	69a0      	ldr	r0, [r4, #24]
 8005d1e:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8005d20:	00ed      	lsls	r5, r5, #3
 8005d22:	1963      	adds	r3, r4, r5
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	4202      	tst	r2, r0
 8005d28:	d102      	bne.n	8005d30 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4252      	negs	r2, r2
 8005d2e:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8005d30:	1965      	adds	r5, r4, r5
 8005d32:	696f      	ldr	r7, [r5, #20]
 8005d34:	4038      	ands	r0, r7
 8005d36:	f7ff ffb7 	bl	8005ca8 <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	4083      	lsls	r3, r0
 8005d3e:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8005d40:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8005d42:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d44:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005d48:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	68e3      	ldr	r3, [r4, #12]
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	4393      	bics	r3, r2
 8005d54:	6023      	str	r3, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8005d56:	69a3      	ldr	r3, [r4, #24]
 8005d58:	4393      	bics	r3, r2
 8005d5a:	61a3      	str	r3, [r4, #24]
 8005d5c:	6923      	ldr	r3, [r4, #16]
 8005d5e:	4393      	bics	r3, r2
 8005d60:	6123      	str	r3, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d62:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 8005d66:	68e2      	ldr	r2, [r4, #12]
 8005d68:	4b11      	ldr	r3, [pc, #68]	@ (8005db0 <UTIL_SEQ_Run+0xc8>)
 8005d6a:	0092      	lsls	r2, r2, #2
 8005d6c:	58d3      	ldr	r3, [r2, r3]
 8005d6e:	4798      	blx	r3
 8005d70:	e7c0      	b.n	8005cf4 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8005d72:	2301      	movs	r3, #1
 8005d74:	425b      	negs	r3, r3
 8005d76:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 8005d78:	f7ff ff94 	bl	8005ca4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005d80:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	6832      	ldr	r2, [r6, #0]
 8005d86:	6861      	ldr	r1, [r4, #4]
 8005d88:	401a      	ands	r2, r3
 8005d8a:	6873      	ldr	r3, [r6, #4]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	68a2      	ldr	r2, [r4, #8]
 8005d90:	400a      	ands	r2, r1
 8005d92:	4313      	orrs	r3, r2
 8005d94:	d101      	bne.n	8005d9a <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 8005d96:	f7fb facb 	bl	8001330 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9a:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8005d9e:	f7ff ff82 	bl	8005ca6 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8005da2:	9b01      	ldr	r3, [sp, #4]
 8005da4:	6073      	str	r3, [r6, #4]
}
 8005da6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005da8:	2000003c 	.word	0x2000003c
 8005dac:	20000934 	.word	0x20000934
 8005db0:	20000954 	.word	0x20000954

08005db4 <UTIL_SEQ_RegTask>:
{
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005db8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005dbc:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8005dbe:	f7ff ff73 	bl	8005ca8 <SEQ_BitPosition>
 8005dc2:	4b03      	ldr	r3, [pc, #12]	@ (8005dd0 <UTIL_SEQ_RegTask+0x1c>)
 8005dc4:	0080      	lsls	r0, r0, #2
 8005dc6:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dc8:	f385 8810 	msr	PRIMASK, r5
}
 8005dcc:	bd70      	pop	{r4, r5, r6, pc}
 8005dce:	46c0      	nop			@ (mov r8, r8)
 8005dd0:	20000954 	.word	0x20000954

08005dd4 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8005dd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	466a      	mov	r2, sp
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8005dda:	4e10      	ldr	r6, [pc, #64]	@ (8005e1c <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8005ddc:	8093      	strh	r3, [r2, #4]
 8005dde:	9300      	str	r3, [sp, #0]
{
 8005de0:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8005de2:	6933      	ldr	r3, [r6, #16]
 8005de4:	a801      	add	r0, sp, #4
 8005de6:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8005de8:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8005dea:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8005dec:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8005dee:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8005df0:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8005df2:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8005df4:	466b      	mov	r3, sp
  c.Seconds = a.Seconds + b.Seconds;
 8005df6:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8005df8:	889b      	ldrh	r3, [r3, #4]
  c.Seconds = a.Seconds + b.Seconds;
 8005dfa:	1882      	adds	r2, r0, r2
  if( c.SubSeconds >= 1000 )
 8005dfc:	20fa      	movs	r0, #250	@ 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8005dfe:	195b      	adds	r3, r3, r5
 8005e00:	b299      	uxth	r1, r3
 8005e02:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 8005e04:	0080      	lsls	r0, r0, #2
 8005e06:	4283      	cmp	r3, r0
 8005e08:	db03      	blt.n	8005e12 <SysTimeGet+0x3e>
    c.SubSeconds -= 1000;
 8005e0a:	4b05      	ldr	r3, [pc, #20]	@ (8005e20 <SysTimeGet+0x4c>)
    c.Seconds++;
 8005e0c:	3201      	adds	r2, #1
    c.SubSeconds -= 1000;
 8005e0e:	18cb      	adds	r3, r1, r3
 8005e10:	b21b      	sxth	r3, r3

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
}
 8005e12:	0020      	movs	r0, r4
  return sysTime;
 8005e14:	6022      	str	r2, [r4, #0]
 8005e16:	80a3      	strh	r3, [r4, #4]
}
 8005e18:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	080063e8 	.word	0x080063e8
 8005e20:	fffffc18 	.word	0xfffffc18

08005e24 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8005e24:	2200      	movs	r2, #0
{
 8005e26:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 8005e28:	4b02      	ldr	r3, [pc, #8]	@ (8005e34 <UTIL_TIMER_Init+0x10>)
 8005e2a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8005e2c:	4b02      	ldr	r3, [pc, #8]	@ (8005e38 <UTIL_TIMER_Init+0x14>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4798      	blx	r3
}
 8005e32:	bd10      	pop	{r4, pc}
 8005e34:	200009d4 	.word	0x200009d4
 8005e38:	080063fc 	.word	0x080063fc

08005e3c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8005e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3e:	0004      	movs	r4, r0
 8005e40:	0017      	movs	r7, r2
 8005e42:	0008      	movs	r0, r1
 8005e44:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8005e46:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 8005e48:	2c00      	cmp	r4, #0
 8005e4a:	d00e      	beq.n	8005e6a <UTIL_TIMER_Create+0x2e>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00c      	beq.n	8005e6a <UTIL_TIMER_Create+0x2e>
    TimerObject->Timestamp = 0U;
 8005e50:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8005e52:	4b07      	ldr	r3, [pc, #28]	@ (8005e70 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 8005e54:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	4798      	blx	r3
    TimerObject->argument = Argument;
 8005e5a:	9b06      	ldr	r3, [sp, #24]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8005e5c:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8005e5e:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 8005e60:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8005e62:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8005e64:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8005e66:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8005e68:	6165      	str	r5, [r4, #20]
  }
}
 8005e6a:	0028      	movs	r0, r5
 8005e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6e:	46c0      	nop			@ (mov r8, r8)
 8005e70:	080063fc 	.word	0x080063fc

08005e74 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8005e74:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8005e76:	4c03      	ldr	r4, [pc, #12]	@ (8005e84 <UTIL_TIMER_GetCurrentTime+0x10>)
 8005e78:	69e3      	ldr	r3, [r4, #28]
 8005e7a:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8005e7c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005e7e:	4798      	blx	r3
}
 8005e80:	bd10      	pop	{r4, pc}
 8005e82:	46c0      	nop			@ (mov r8, r8)
 8005e84:	080063fc 	.word	0x080063fc

08005e88 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8005e88:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8005e8a:	4d06      	ldr	r5, [pc, #24]	@ (8005ea4 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 8005e8c:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8005e8e:	69eb      	ldr	r3, [r5, #28]
 8005e90:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8005e92:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8005e94:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8005e96:	0030      	movs	r0, r6
 8005e98:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8005e9a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8005e9c:	1a20      	subs	r0, r4, r0
 8005e9e:	4798      	blx	r3
}
 8005ea0:	bd70      	pop	{r4, r5, r6, pc}
 8005ea2:	46c0      	nop			@ (mov r8, r8)
 8005ea4:	080063fc 	.word	0x080063fc

08005ea8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8005ea8:	4b05      	ldr	r3, [pc, #20]	@ (8005ec0 <TimerExists+0x18>)
 8005eaa:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <TimerExists+0xc>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 8005eb0:	0018      	movs	r0, r3
}
 8005eb2:	4770      	bx	lr
    if( cur == TimerObject )
 8005eb4:	4283      	cmp	r3, r0
 8005eb6:	d001      	beq.n	8005ebc <TimerExists+0x14>
    cur = cur->Next;
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	e7f7      	b.n	8005eac <TimerExists+0x4>
      return true;
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	e7f8      	b.n	8005eb2 <TimerExists+0xa>
 8005ec0:	200009d4 	.word	0x200009d4

08005ec4 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8005ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8005ec6:	4e0b      	ldr	r6, [pc, #44]	@ (8005ef4 <TimerSetTimeout+0x30>)
{
 8005ec8:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8005eca:	6a33      	ldr	r3, [r6, #32]
 8005ecc:	4798      	blx	r3
  TimerObject->IsPending = 1;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8005ed2:	6823      	ldr	r3, [r4, #0]
 8005ed4:	69b7      	ldr	r7, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8005ed6:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8005ed8:	9301      	str	r3, [sp, #4]
 8005eda:	47b8      	blx	r7
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	1940      	adds	r0, r0, r5
 8005ee0:	4283      	cmp	r3, r0
 8005ee2:	d202      	bcs.n	8005eea <TimerSetTimeout+0x26>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8005ee4:	47b8      	blx	r7
 8005ee6:	1940      	adds	r0, r0, r5
 8005ee8:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8005eea:	68b3      	ldr	r3, [r6, #8]
 8005eec:	6820      	ldr	r0, [r4, #0]
 8005eee:	4798      	blx	r3
}
 8005ef0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005ef2:	46c0      	nop			@ (mov r8, r8)
 8005ef4:	080063fc 	.word	0x080063fc

08005ef8 <UTIL_TIMER_Stop>:
{
 8005ef8:	0003      	movs	r3, r0
 8005efa:	b570      	push	{r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 8005efc:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d016      	beq.n	8005f30 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f02:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8005f06:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8005f08:	4d11      	ldr	r5, [pc, #68]	@ (8005f50 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 8005f0a:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8005f0c:	682a      	ldr	r2, [r5, #0]
    if(NULL != TimerListHead)
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	d00b      	beq.n	8005f2a <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 8005f12:	2100      	movs	r1, #0
 8005f14:	7259      	strb	r1, [r3, #9]
          if( TimerListHead->Next != NULL )
 8005f16:	6954      	ldr	r4, [r2, #20]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d10f      	bne.n	8005f3c <UTIL_TIMER_Stop+0x44>
          TimerListHead->IsPending = 0;
 8005f1c:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 8005f1e:	428c      	cmp	r4, r1
 8005f20:	d007      	beq.n	8005f32 <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 8005f22:	0020      	movs	r0, r4
            TimerListHead = TimerListHead->Next;
 8005f24:	602c      	str	r4, [r5, #0]
            TimerSetTimeout( TimerListHead );
 8005f26:	f7ff ffcd 	bl	8005ec4 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f2a:	f386 8810 	msr	PRIMASK, r6
}
 8005f2e:	2000      	movs	r0, #0
}
 8005f30:	bd70      	pop	{r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 8005f32:	4b08      	ldr	r3, [pc, #32]	@ (8005f54 <UTIL_TIMER_Stop+0x5c>)
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	4798      	blx	r3
            TimerListHead = NULL;
 8005f38:	602c      	str	r4, [r5, #0]
 8005f3a:	e7f6      	b.n	8005f2a <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 8005f3c:	0011      	movs	r1, r2
 8005f3e:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 8005f40:	2a00      	cmp	r2, #0
 8005f42:	d0f2      	beq.n	8005f2a <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d1f9      	bne.n	8005f3c <UTIL_TIMER_Stop+0x44>
            if( cur->Next != NULL )
 8005f48:	695b      	ldr	r3, [r3, #20]
              prev->Next = cur;
 8005f4a:	614b      	str	r3, [r1, #20]
 8005f4c:	e7ed      	b.n	8005f2a <UTIL_TIMER_Stop+0x32>
 8005f4e:	46c0      	nop			@ (mov r8, r8)
 8005f50:	200009d4 	.word	0x200009d4
 8005f54:	080063fc 	.word	0x080063fc

08005f58 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8005f58:	4b09      	ldr	r3, [pc, #36]	@ (8005f80 <TimerInsertTimer+0x28>)
{
 8005f5a:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8005f5c:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8005f5e:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8005f60:	6951      	ldr	r1, [r2, #20]
 8005f62:	2900      	cmp	r1, #0
 8005f64:	d102      	bne.n	8005f6c <TimerInsertTimer+0x14>
        cur = next;
        next = next->Next;
    }
    else
    {
        cur->Next = TimerObject;
 8005f66:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8005f68:	6141      	str	r1, [r0, #20]

    }
  }
  cur->Next = TimerObject;
  TimerObject->Next = NULL;
}
 8005f6a:	bd10      	pop	{r4, pc}
    if( TimerObject->Timestamp  > next->Timestamp )
 8005f6c:	6804      	ldr	r4, [r0, #0]
 8005f6e:	6819      	ldr	r1, [r3, #0]
 8005f70:	428c      	cmp	r4, r1
 8005f72:	d902      	bls.n	8005f7a <TimerInsertTimer+0x22>
        next = next->Next;
 8005f74:	001a      	movs	r2, r3
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	e7f2      	b.n	8005f60 <TimerInsertTimer+0x8>
 8005f7a:	0019      	movs	r1, r3
 8005f7c:	e7f3      	b.n	8005f66 <TimerInsertTimer+0xe>
 8005f7e:	46c0      	nop			@ (mov r8, r8)
 8005f80:	200009d4 	.word	0x200009d4

08005f84 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8005f84:	4a05      	ldr	r2, [pc, #20]	@ (8005f9c <TimerInsertNewHeadTimer+0x18>)
{
 8005f86:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8005f88:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 8005f8e:	2100      	movs	r1, #0
 8005f90:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 8005f92:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8005f94:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8005f96:	f7ff ff95 	bl	8005ec4 <TimerSetTimeout>
}
 8005f9a:	bd10      	pop	{r4, pc}
 8005f9c:	200009d4 	.word	0x200009d4

08005fa0 <UTIL_TIMER_Start>:
{
 8005fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fa2:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 8005fa4:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	d023      	beq.n	8005ff2 <UTIL_TIMER_Start+0x52>
 8005faa:	f7ff ff7d 	bl	8005ea8 <TimerExists>
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d11f      	bne.n	8005ff2 <UTIL_TIMER_Start+0x52>
 8005fb2:	7a65      	ldrb	r5, [r4, #9]
 8005fb4:	2d00      	cmp	r5, #0
 8005fb6:	d12b      	bne.n	8006010 <UTIL_TIMER_Start+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fbc:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 8005fbe:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8005fc0:	4e14      	ldr	r6, [pc, #80]	@ (8006014 <UTIL_TIMER_Start+0x74>)
    ticks = TimerObject->ReloadValue;
 8005fc2:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8005fc4:	6a33      	ldr	r3, [r6, #32]
 8005fc6:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 8005fc8:	4287      	cmp	r7, r0
 8005fca:	d200      	bcs.n	8005fce <UTIL_TIMER_Start+0x2e>
 8005fcc:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 8005fce:	2380      	movs	r3, #128	@ 0x80
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 8005fd4:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 8005fd6:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 8005fd8:	4f0f      	ldr	r7, [pc, #60]	@ (8006018 <UTIL_TIMER_Start+0x78>)
    TimerObject->IsReloadStopped = 0U;
 8005fda:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d109      	bne.n	8005ff6 <UTIL_TIMER_Start+0x56>
      UTIL_TimerDriver.SetTimerContext();
 8005fe2:	6933      	ldr	r3, [r6, #16]
 8005fe4:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 8005fe6:	0020      	movs	r0, r4
 8005fe8:	f7ff ffcc 	bl	8005f84 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fec:	9b01      	ldr	r3, [sp, #4]
 8005fee:	f383 8810 	msr	PRIMASK, r3
}
 8005ff2:	0028      	movs	r0, r5
 8005ff4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8005ff6:	69b3      	ldr	r3, [r6, #24]
 8005ff8:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8005ffa:	6823      	ldr	r3, [r4, #0]
 8005ffc:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8005ffe:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 8006000:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4298      	cmp	r0, r3
 8006006:	d3ee      	bcc.n	8005fe6 <UTIL_TIMER_Start+0x46>
        TimerInsertTimer( TimerObject);
 8006008:	0020      	movs	r0, r4
 800600a:	f7ff ffa5 	bl	8005f58 <TimerInsertTimer>
 800600e:	e7ed      	b.n	8005fec <UTIL_TIMER_Start+0x4c>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8006010:	2501      	movs	r5, #1
 8006012:	e7ee      	b.n	8005ff2 <UTIL_TIMER_Start+0x52>
 8006014:	080063fc 	.word	0x080063fc
 8006018:	200009d4 	.word	0x200009d4

0800601c <UTIL_TIMER_SetPeriod>:
{
 800601c:	b510      	push	{r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800601e:	2301      	movs	r3, #1
{
 8006020:	0004      	movs	r4, r0
 8006022:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 8006024:	2c00      	cmp	r4, #0
 8006026:	d010      	beq.n	800604a <UTIL_TIMER_SetPeriod+0x2e>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8006028:	4b09      	ldr	r3, [pc, #36]	@ (8006050 <UTIL_TIMER_SetPeriod+0x34>)
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	4798      	blx	r3
 800602e:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8006030:	0020      	movs	r0, r4
 8006032:	f7ff ff39 	bl	8005ea8 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8006036:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 8006038:	4298      	cmp	r0, r3
 800603a:	d006      	beq.n	800604a <UTIL_TIMER_SetPeriod+0x2e>
      (void)UTIL_TIMER_Stop(TimerObject);
 800603c:	0020      	movs	r0, r4
 800603e:	f7ff ff5b 	bl	8005ef8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8006042:	0020      	movs	r0, r4
 8006044:	f7ff ffac 	bl	8005fa0 <UTIL_TIMER_Start>
 8006048:	0003      	movs	r3, r0
}
 800604a:	0018      	movs	r0, r3
 800604c:	bd10      	pop	{r4, pc}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	080063fc 	.word	0x080063fc

08006054 <UTIL_TIMER_IRQ_Handler>:
{
 8006054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006056:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800605a:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800605c:	4e1c      	ldr	r6, [pc, #112]	@ (80060d0 <UTIL_TIMER_IRQ_Handler+0x7c>)
 800605e:	6973      	ldr	r3, [r6, #20]
 8006060:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8006062:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8006064:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8006066:	4798      	blx	r3
  if ( TimerListHead != NULL )
 8006068:	4d1a      	ldr	r5, [pc, #104]	@ (80060d4 <UTIL_TIMER_IRQ_Handler+0x80>)
  DeltaContext = now  - old; /*intentional wrap around */
 800606a:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800606c:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800606e:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01e      	beq.n	80060b2 <UTIL_TIMER_IRQ_Handler+0x5e>
      if (cur->Timestamp > DeltaContext)
 8006074:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 8006076:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 8006078:	4288      	cmp	r0, r1
 800607a:	d900      	bls.n	800607e <UTIL_TIMER_IRQ_Handler+0x2a>
        cur->Timestamp -= DeltaContext;
 800607c:	1822      	adds	r2, r4, r0
 800607e:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8006080:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8006082:	e7f5      	b.n	8006070 <UTIL_TIMER_IRQ_Handler+0x1c>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8006084:	681c      	ldr	r4, [r3, #0]
 8006086:	2c00      	cmp	r4, #0
 8006088:	d003      	beq.n	8006092 <UTIL_TIMER_IRQ_Handler+0x3e>
 800608a:	69b3      	ldr	r3, [r6, #24]
 800608c:	4798      	blx	r3
 800608e:	4284      	cmp	r4, r0
 8006090:	d212      	bcs.n	80060b8 <UTIL_TIMER_IRQ_Handler+0x64>
      cur = TimerListHead;
 8006092:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 8006094:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 8006096:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 8006098:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800609a:	2300      	movs	r3, #0
 800609c:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800609e:	68e3      	ldr	r3, [r4, #12]
 80060a0:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 80060a2:	2280      	movs	r2, #128	@ 0x80
 80060a4:	8963      	ldrh	r3, [r4, #10]
 80060a6:	0052      	lsls	r2, r2, #1
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d102      	bne.n	80060b2 <UTIL_TIMER_IRQ_Handler+0x5e>
        (void)UTIL_TIMER_Start(cur);
 80060ac:	0020      	movs	r0, r4
 80060ae:	f7ff ff77 	bl	8005fa0 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 80060b2:	682b      	ldr	r3, [r5, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e5      	bne.n	8006084 <UTIL_TIMER_IRQ_Handler+0x30>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80060b8:	6828      	ldr	r0, [r5, #0]
 80060ba:	2800      	cmp	r0, #0
 80060bc:	d102      	bne.n	80060c4 <UTIL_TIMER_IRQ_Handler+0x70>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060be:	f387 8810 	msr	PRIMASK, r7
}
 80060c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 80060c4:	7a03      	ldrb	r3, [r0, #8]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d1f9      	bne.n	80060be <UTIL_TIMER_IRQ_Handler+0x6a>
    TimerSetTimeout( TimerListHead );
 80060ca:	f7ff fefb 	bl	8005ec4 <TimerSetTimeout>
 80060ce:	e7f6      	b.n	80060be <UTIL_TIMER_IRQ_Handler+0x6a>
 80060d0:	080063fc 	.word	0x080063fc
 80060d4:	200009d4 	.word	0x200009d4

080060d8 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 80060d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060da:	b09d      	sub	sp, #116	@ 0x74
 80060dc:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 80060de:	2000      	movs	r0, #0
{
 80060e0:	9109      	str	r1, [sp, #36]	@ 0x24
  if (size <= 0)
 80060e2:	4281      	cmp	r1, r0
 80060e4:	dd0a      	ble.n	80060fc <tiny_vsnprintf_like+0x24>
 80060e6:	001f      	movs	r7, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80060e8:	9e02      	ldr	r6, [sp, #8]
  {
    CHECK_STR_SIZE(buf, str, size);
 80060ea:	9902      	ldr	r1, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80060ec:	7813      	ldrb	r3, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 80060ee:	1a70      	subs	r0, r6, r1
 80060f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060f2:	3901      	subs	r1, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d103      	bne.n	8006100 <tiny_vsnprintf_like+0x28>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 80060f8:	2300      	movs	r3, #0
 80060fa:	7033      	strb	r3, [r6, #0]
  return str - buf;
}
 80060fc:	b01d      	add	sp, #116	@ 0x74
 80060fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 8006100:	4288      	cmp	r0, r1
 8006102:	daf9      	bge.n	80060f8 <tiny_vsnprintf_like+0x20>
    if (*fmt != '%')
 8006104:	2b25      	cmp	r3, #37	@ 0x25
 8006106:	d005      	beq.n	8006114 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 8006108:	7033      	strb	r3, [r6, #0]
      continue;
 800610a:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800610c:	3601      	adds	r6, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800610e:	9a01      	ldr	r2, [sp, #4]
 8006110:	3201      	adds	r2, #1
 8006112:	e7ea      	b.n	80060ea <tiny_vsnprintf_like+0x12>
    fmt++;
 8006114:	1c53      	adds	r3, r2, #1
 8006116:	9301      	str	r3, [sp, #4]
    if (*fmt == '0')
 8006118:	7853      	ldrb	r3, [r2, #1]
 800611a:	0018      	movs	r0, r3
 800611c:	3830      	subs	r0, #48	@ 0x30
 800611e:	9304      	str	r3, [sp, #16]
 8006120:	4242      	negs	r2, r0
 8006122:	4142      	adcs	r2, r0
    if (is_digit(*fmt))
 8006124:	b2c0      	uxtb	r0, r0
    if (*fmt == '0')
 8006126:	0013      	movs	r3, r2
    if (is_digit(*fmt))
 8006128:	2809      	cmp	r0, #9
 800612a:	d92e      	bls.n	800618a <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 800612c:	2001      	movs	r0, #1
 800612e:	4240      	negs	r0, r0
 8006130:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 8006132:	9801      	ldr	r0, [sp, #4]
 8006134:	7800      	ldrb	r0, [r0, #0]
 8006136:	2869      	cmp	r0, #105	@ 0x69
 8006138:	d100      	bne.n	800613c <tiny_vsnprintf_like+0x64>
 800613a:	e0a4      	b.n	8006286 <tiny_vsnprintf_like+0x1ae>
 800613c:	d829      	bhi.n	8006192 <tiny_vsnprintf_like+0xba>
 800613e:	2863      	cmp	r0, #99	@ 0x63
 8006140:	d038      	beq.n	80061b4 <tiny_vsnprintf_like+0xdc>
 8006142:	2864      	cmp	r0, #100	@ 0x64
 8006144:	d100      	bne.n	8006148 <tiny_vsnprintf_like+0x70>
 8006146:	e09e      	b.n	8006286 <tiny_vsnprintf_like+0x1ae>
 8006148:	2858      	cmp	r0, #88	@ 0x58
 800614a:	d066      	beq.n	800621a <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800614c:	0032      	movs	r2, r6
 800614e:	2825      	cmp	r0, #37	@ 0x25
 8006150:	d126      	bne.n	80061a0 <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 8006152:	9801      	ldr	r0, [sp, #4]
 8006154:	7800      	ldrb	r0, [r0, #0]
 8006156:	2800      	cmp	r0, #0
 8006158:	d100      	bne.n	800615c <tiny_vsnprintf_like+0x84>
 800615a:	e098      	b.n	800628e <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 800615c:	1c56      	adds	r6, r2, #1
 800615e:	7010      	strb	r0, [r2, #0]
        CHECK_STR_SIZE(buf, str, size);
 8006160:	9a02      	ldr	r2, [sp, #8]
 8006162:	1ab2      	subs	r2, r6, r2
 8006164:	428a      	cmp	r2, r1
 8006166:	db00      	blt.n	800616a <tiny_vsnprintf_like+0x92>
 8006168:	e08f      	b.n	800628a <tiny_vsnprintf_like+0x1b2>
 800616a:	e7d0      	b.n	800610e <tiny_vsnprintf_like+0x36>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800616c:	9c01      	ldr	r4, [sp, #4]
 800616e:	3401      	adds	r4, #1
 8006170:	9401      	str	r4, [sp, #4]
 8006172:	9c00      	ldr	r4, [sp, #0]
 8006174:	436c      	muls	r4, r5
 8006176:	1824      	adds	r4, r4, r0
 8006178:	3c30      	subs	r4, #48	@ 0x30
 800617a:	9400      	str	r4, [sp, #0]
 800617c:	9801      	ldr	r0, [sp, #4]
 800617e:	7800      	ldrb	r0, [r0, #0]
 8006180:	0004      	movs	r4, r0
 8006182:	3c30      	subs	r4, #48	@ 0x30
 8006184:	2c09      	cmp	r4, #9
 8006186:	d9f1      	bls.n	800616c <tiny_vsnprintf_like+0x94>
 8006188:	e7d3      	b.n	8006132 <tiny_vsnprintf_like+0x5a>
  int i = 0;
 800618a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800618c:	250a      	movs	r5, #10
  int i = 0;
 800618e:	9000      	str	r0, [sp, #0]
 8006190:	e7f4      	b.n	800617c <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 8006192:	2875      	cmp	r0, #117	@ 0x75
 8006194:	d079      	beq.n	800628a <tiny_vsnprintf_like+0x1b2>
 8006196:	2410      	movs	r4, #16
 8006198:	2878      	cmp	r0, #120	@ 0x78
 800619a:	d041      	beq.n	8006220 <tiny_vsnprintf_like+0x148>
 800619c:	2873      	cmp	r0, #115	@ 0x73
 800619e:	d01d      	beq.n	80061dc <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 80061a0:	2025      	movs	r0, #37	@ 0x25
 80061a2:	7030      	strb	r0, [r6, #0]
        CHECK_STR_SIZE(buf, str, size);
 80061a4:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 80061a6:	1c72      	adds	r2, r6, #1
 80061a8:	0016      	movs	r6, r2
    base = 10;
 80061aa:	240a      	movs	r4, #10
        CHECK_STR_SIZE(buf, str, size);
 80061ac:	1a10      	subs	r0, r2, r0
 80061ae:	4288      	cmp	r0, r1
 80061b0:	da36      	bge.n	8006220 <tiny_vsnprintf_like+0x148>
 80061b2:	e7ce      	b.n	8006152 <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 80061b4:	2400      	movs	r4, #0
 80061b6:	9b00      	ldr	r3, [sp, #0]
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	dd00      	ble.n	80061be <tiny_vsnprintf_like+0xe6>
 80061bc:	1e5c      	subs	r4, r3, #1
 80061be:	0022      	movs	r2, r4
 80061c0:	2120      	movs	r1, #32
 80061c2:	0030      	movs	r0, r6
 80061c4:	f000 f8b0 	bl	8006328 <memset>
 80061c8:	9a00      	ldr	r2, [sp, #0]
 80061ca:	2301      	movs	r3, #1
 80061cc:	1934      	adds	r4, r6, r4
 80061ce:	2a00      	cmp	r2, #0
 80061d0:	dd00      	ble.n	80061d4 <tiny_vsnprintf_like+0xfc>
 80061d2:	0013      	movs	r3, r2
        *str++ = (unsigned char) va_arg(args, int);
 80061d4:	cf04      	ldmia	r7!, {r2}
          while (--field_width > 0) *str++ = ' ';
 80061d6:	18f6      	adds	r6, r6, r3
        *str++ = (unsigned char) va_arg(args, int);
 80061d8:	7022      	strb	r2, [r4, #0]
        continue;
 80061da:	e798      	b.n	800610e <tiny_vsnprintf_like+0x36>
        s = va_arg(args, char *);
 80061dc:	cf20      	ldmia	r7!, {r5}
        if (!s) s = "<NULL>";
 80061de:	2d00      	cmp	r5, #0
 80061e0:	d100      	bne.n	80061e4 <tiny_vsnprintf_like+0x10c>
 80061e2:	4d4e      	ldr	r5, [pc, #312]	@ (800631c <tiny_vsnprintf_like+0x244>)
        len = strlen(s);
 80061e4:	0028      	movs	r0, r5
 80061e6:	f7f9 ff8f 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 80061ea:	2300      	movs	r3, #0
 80061ec:	9303      	str	r3, [sp, #12]
 80061ee:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 80061f0:	0004      	movs	r4, r0
          while (len < field_width--) *str++ = ' ';
 80061f2:	4283      	cmp	r3, r0
 80061f4:	db01      	blt.n	80061fa <tiny_vsnprintf_like+0x122>
 80061f6:	1a1b      	subs	r3, r3, r0
 80061f8:	9303      	str	r3, [sp, #12]
 80061fa:	0030      	movs	r0, r6
 80061fc:	2120      	movs	r1, #32
 80061fe:	9a03      	ldr	r2, [sp, #12]
 8006200:	f000 f892 	bl	8006328 <memset>
 8006204:	9b03      	ldr	r3, [sp, #12]
 8006206:	18f6      	adds	r6, r6, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 8006208:	2300      	movs	r3, #0
 800620a:	42a3      	cmp	r3, r4
 800620c:	db01      	blt.n	8006212 <tiny_vsnprintf_like+0x13a>
 800620e:	1936      	adds	r6, r6, r4
 8006210:	e77d      	b.n	800610e <tiny_vsnprintf_like+0x36>
 8006212:	5cea      	ldrb	r2, [r5, r3]
 8006214:	54f2      	strb	r2, [r6, r3]
 8006216:	3301      	adds	r3, #1
 8006218:	e7f7      	b.n	800620a <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 800621a:	2340      	movs	r3, #64	@ 0x40
        base = 16;
 800621c:	2410      	movs	r4, #16
        flags |= UPPERCASE;
 800621e:	4313      	orrs	r3, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8006220:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 8006222:	2202      	movs	r2, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8006224:	1a35      	subs	r5, r6, r0
 8006226:	1b4d      	subs	r5, r1, r5
  char *dig = lower_digits;
 8006228:	493d      	ldr	r1, [pc, #244]	@ (8006320 <tiny_vsnprintf_like+0x248>)
    else if (flags & SIGN)
 800622a:	401a      	ands	r2, r3
  char *dig = lower_digits;
 800622c:	9107      	str	r1, [sp, #28]
  if (type & UPPERCASE)  dig = upper_digits;
 800622e:	2140      	movs	r1, #64	@ 0x40
    else if (flags & SIGN)
 8006230:	4694      	mov	ip, r2
      num = va_arg(args, int);
 8006232:	cf04      	ldmia	r7!, {r2}
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8006234:	0010      	movs	r0, r2
  if (type & UPPERCASE)  dig = upper_digits;
 8006236:	420b      	tst	r3, r1
 8006238:	d001      	beq.n	800623e <tiny_vsnprintf_like+0x166>
 800623a:	4b3a      	ldr	r3, [pc, #232]	@ (8006324 <tiny_vsnprintf_like+0x24c>)
 800623c:	9307      	str	r3, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 800623e:	2330      	movs	r3, #48	@ 0x30
 8006240:	9308      	str	r3, [sp, #32]
 8006242:	9b04      	ldr	r3, [sp, #16]
 8006244:	2b30      	cmp	r3, #48	@ 0x30
 8006246:	d001      	beq.n	800624c <tiny_vsnprintf_like+0x174>
 8006248:	2320      	movs	r3, #32
 800624a:	9308      	str	r3, [sp, #32]
  if (type & SIGN)
 800624c:	4663      	mov	r3, ip
 800624e:	2b00      	cmp	r3, #0
 8006250:	d022      	beq.n	8006298 <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 8006252:	2a00      	cmp	r2, #0
 8006254:	da20      	bge.n	8006298 <tiny_vsnprintf_like+0x1c0>
      size--;
 8006256:	9b00      	ldr	r3, [sp, #0]
      num = -num;
 8006258:	4250      	negs	r0, r2
      size--;
 800625a:	3b01      	subs	r3, #1
 800625c:	9300      	str	r3, [sp, #0]
      sign = '-';
 800625e:	232d      	movs	r3, #45	@ 0x2d
 8006260:	9305      	str	r3, [sp, #20]
  if (base < 2 || base > 36) return 0;
 8006262:	2300      	movs	r3, #0
 8006264:	9303      	str	r3, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8006266:	0021      	movs	r1, r4
 8006268:	9006      	str	r0, [sp, #24]
 800626a:	f7f9 ffe5 	bl	8000238 <__aeabi_uidivmod>
 800626e:	9a07      	ldr	r2, [sp, #28]
 8006270:	9b03      	ldr	r3, [sp, #12]
 8006272:	5c52      	ldrb	r2, [r2, r1]
 8006274:	a90b      	add	r1, sp, #44	@ 0x2c
 8006276:	54ca      	strb	r2, [r1, r3]
 8006278:	3301      	adds	r3, #1
 800627a:	9303      	str	r3, [sp, #12]
    while (num != 0)
 800627c:	9b06      	ldr	r3, [sp, #24]
 800627e:	429c      	cmp	r4, r3
 8006280:	d9f1      	bls.n	8006266 <tiny_vsnprintf_like+0x18e>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8006282:	9c03      	ldr	r4, [sp, #12]
 8006284:	e011      	b.n	80062aa <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 8006286:	2302      	movs	r3, #2
 8006288:	4313      	orrs	r3, r2
    base = 10;
 800628a:	240a      	movs	r4, #10
 800628c:	e7c8      	b.n	8006220 <tiny_vsnprintf_like+0x148>
          --fmt;
 800628e:	9801      	ldr	r0, [sp, #4]
 8006290:	0016      	movs	r6, r2
 8006292:	3801      	subs	r0, #1
 8006294:	9001      	str	r0, [sp, #4]
 8006296:	e763      	b.n	8006160 <tiny_vsnprintf_like+0x88>
  if (num == 0)
 8006298:	2a00      	cmp	r2, #0
 800629a:	d001      	beq.n	80062a0 <tiny_vsnprintf_like+0x1c8>
 800629c:	2300      	movs	r3, #0
 800629e:	e7df      	b.n	8006260 <tiny_vsnprintf_like+0x188>
    tmp[i++] = '0';
 80062a0:	2130      	movs	r1, #48	@ 0x30
 80062a2:	2401      	movs	r4, #1
 80062a4:	ab0b      	add	r3, sp, #44	@ 0x2c
 80062a6:	7019      	strb	r1, [r3, #0]
 80062a8:	9205      	str	r2, [sp, #20]
  size -= precision;
 80062aa:	9b00      	ldr	r3, [sp, #0]
 80062ac:	1b19      	subs	r1, r3, r4
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80062ae:	9b04      	ldr	r3, [sp, #16]
 80062b0:	2b30      	cmp	r3, #48	@ 0x30
 80062b2:	d006      	beq.n	80062c2 <tiny_vsnprintf_like+0x1ea>
 80062b4:	0030      	movs	r0, r6
 80062b6:	2220      	movs	r2, #32
 80062b8:	000b      	movs	r3, r1
 80062ba:	0006      	movs	r6, r0
 80062bc:	3901      	subs	r1, #1
 80062be:	2b00      	cmp	r3, #0
 80062c0:	dc1a      	bgt.n	80062f8 <tiny_vsnprintf_like+0x220>
  if (sign) ASSIGN_STR(sign);
 80062c2:	9b05      	ldr	r3, [sp, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d026      	beq.n	8006316 <tiny_vsnprintf_like+0x23e>
 80062c8:	232d      	movs	r3, #45	@ 0x2d
 80062ca:	3d01      	subs	r5, #1
 80062cc:	1c70      	adds	r0, r6, #1
 80062ce:	7033      	strb	r3, [r6, #0]
 80062d0:	2d00      	cmp	r5, #0
 80062d2:	d016      	beq.n	8006302 <tiny_vsnprintf_like+0x22a>
 80062d4:	0002      	movs	r2, r0
 80062d6:	002b      	movs	r3, r5
 80062d8:	1b49      	subs	r1, r1, r5
 80062da:	18c8      	adds	r0, r1, r3
 80062dc:	0015      	movs	r5, r2
  while (size-- > 0) ASSIGN_STR(c);
 80062de:	2800      	cmp	r0, #0
 80062e0:	dc11      	bgt.n	8006306 <tiny_vsnprintf_like+0x22e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80062e2:	a90b      	add	r1, sp, #44	@ 0x2c
 80062e4:	18d3      	adds	r3, r2, r3
 80062e6:	0010      	movs	r0, r2
 80062e8:	3c01      	subs	r4, #1
 80062ea:	d30a      	bcc.n	8006302 <tiny_vsnprintf_like+0x22a>
 80062ec:	5c65      	ldrb	r5, [r4, r1]
 80062ee:	1c42      	adds	r2, r0, #1
 80062f0:	7005      	strb	r5, [r0, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d1f7      	bne.n	80062e6 <tiny_vsnprintf_like+0x20e>
 80062f6:	e00c      	b.n	8006312 <tiny_vsnprintf_like+0x23a>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80062f8:	3d01      	subs	r5, #1
 80062fa:	3001      	adds	r0, #1
 80062fc:	7032      	strb	r2, [r6, #0]
 80062fe:	2d00      	cmp	r5, #0
 8006300:	d1da      	bne.n	80062b8 <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8006302:	0006      	movs	r6, r0
 8006304:	e703      	b.n	800610e <tiny_vsnprintf_like+0x36>
  while (size-- > 0) ASSIGN_STR(c);
 8006306:	9808      	ldr	r0, [sp, #32]
 8006308:	3b01      	subs	r3, #1
 800630a:	3201      	adds	r2, #1
 800630c:	7028      	strb	r0, [r5, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e3      	bne.n	80062da <tiny_vsnprintf_like+0x202>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8006312:	0010      	movs	r0, r2
 8006314:	e7f5      	b.n	8006302 <tiny_vsnprintf_like+0x22a>
 8006316:	0030      	movs	r0, r6
 8006318:	e7dc      	b.n	80062d4 <tiny_vsnprintf_like+0x1fc>
 800631a:	46c0      	nop			@ (mov r8, r8)
 800631c:	08006787 	.word	0x08006787
 8006320:	0800678e 	.word	0x0800678e
 8006324:	080067b3 	.word	0x080067b3

08006328 <memset>:
 8006328:	0003      	movs	r3, r0
 800632a:	1882      	adds	r2, r0, r2
 800632c:	4293      	cmp	r3, r2
 800632e:	d100      	bne.n	8006332 <memset+0xa>
 8006330:	4770      	bx	lr
 8006332:	7019      	strb	r1, [r3, #0]
 8006334:	3301      	adds	r3, #1
 8006336:	e7f9      	b.n	800632c <memset+0x4>

08006338 <strncmp>:
 8006338:	b530      	push	{r4, r5, lr}
 800633a:	0005      	movs	r5, r0
 800633c:	1e10      	subs	r0, r2, #0
 800633e:	d00b      	beq.n	8006358 <strncmp+0x20>
 8006340:	2400      	movs	r4, #0
 8006342:	3a01      	subs	r2, #1
 8006344:	5d2b      	ldrb	r3, [r5, r4]
 8006346:	5d08      	ldrb	r0, [r1, r4]
 8006348:	4283      	cmp	r3, r0
 800634a:	d104      	bne.n	8006356 <strncmp+0x1e>
 800634c:	42a2      	cmp	r2, r4
 800634e:	d002      	beq.n	8006356 <strncmp+0x1e>
 8006350:	3401      	adds	r4, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d1f6      	bne.n	8006344 <strncmp+0xc>
 8006356:	1a18      	subs	r0, r3, r0
 8006358:	bd30      	pop	{r4, r5, pc}
	...

0800635c <__libc_init_array>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	2600      	movs	r6, #0
 8006360:	4c0c      	ldr	r4, [pc, #48]	@ (8006394 <__libc_init_array+0x38>)
 8006362:	4d0d      	ldr	r5, [pc, #52]	@ (8006398 <__libc_init_array+0x3c>)
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	42a6      	cmp	r6, r4
 800636a:	d109      	bne.n	8006380 <__libc_init_array+0x24>
 800636c:	2600      	movs	r6, #0
 800636e:	f000 f823 	bl	80063b8 <_init>
 8006372:	4c0a      	ldr	r4, [pc, #40]	@ (800639c <__libc_init_array+0x40>)
 8006374:	4d0a      	ldr	r5, [pc, #40]	@ (80063a0 <__libc_init_array+0x44>)
 8006376:	1b64      	subs	r4, r4, r5
 8006378:	10a4      	asrs	r4, r4, #2
 800637a:	42a6      	cmp	r6, r4
 800637c:	d105      	bne.n	800638a <__libc_init_array+0x2e>
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	00b3      	lsls	r3, r6, #2
 8006382:	58eb      	ldr	r3, [r5, r3]
 8006384:	4798      	blx	r3
 8006386:	3601      	adds	r6, #1
 8006388:	e7ee      	b.n	8006368 <__libc_init_array+0xc>
 800638a:	00b3      	lsls	r3, r6, #2
 800638c:	58eb      	ldr	r3, [r5, r3]
 800638e:	4798      	blx	r3
 8006390:	3601      	adds	r6, #1
 8006392:	e7f2      	b.n	800637a <__libc_init_array+0x1e>
 8006394:	080067e0 	.word	0x080067e0
 8006398:	080067e0 	.word	0x080067e0
 800639c:	080067e4 	.word	0x080067e4
 80063a0:	080067e0 	.word	0x080067e0

080063a4 <memcpy>:
 80063a4:	2300      	movs	r3, #0
 80063a6:	b510      	push	{r4, lr}
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d100      	bne.n	80063ae <memcpy+0xa>
 80063ac:	bd10      	pop	{r4, pc}
 80063ae:	5ccc      	ldrb	r4, [r1, r3]
 80063b0:	54c4      	strb	r4, [r0, r3]
 80063b2:	3301      	adds	r3, #1
 80063b4:	e7f8      	b.n	80063a8 <memcpy+0x4>
	...

080063b8 <_init>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063be:	bc08      	pop	{r3}
 80063c0:	469e      	mov	lr, r3
 80063c2:	4770      	bx	lr

080063c4 <_fini>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr
