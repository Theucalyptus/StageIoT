[general]
# device id; should match the registered ID on the webapp
device_id=test1
# logs location (for CSV Writer)
logsPath=logs

[sensors]
; sensors settings
; enable sensors
phone=yes
camera=yes
canbus=no

[sensors.phone]
; phone sensor settings
; log data locally
logData=yes

[sensors.canbus]
; log data locally
logData=yes
; can bus settings
interface=
channel=
bitrate=

[sensors.static]
; all data fields added to this section will be interpreted as static sensor data
; this section can be used to set fixed values, for example a GPS location for a static piece of equipment
; you have to indicate the datatype, by adding a type marker after the value. i for int, f for float, b for bool and s for string
; example line: 
;[datafiel]=[value][type]
; for the text 'hello', there is no space between the content and the type marker
#exampleText=hellos
#exampleInt=43i
#exampleBool=1b
#exampleFloat=45.67f

; static GPS and orientation
;latitude=43.602401f
;longitude=1.454787f
;azimuth=90.0f



; OAK-D Camera Configuration
[camera]
# px  – distance max centre‑à‑centre pour dire « même objet »
pix_match_radius=60
# minimum object displacement required before sending a new update
pix_send_threshold=40
# drop object if not seen after x seconds
lost_timeout=2.0
# network update send period            
send_period= 5.0
# object detection confidence threshold (between 0 and 1) 
confidence_threshold=0.8
# capture images when detecting an object (save them as png)
capture_img=yes             

; NETWORK CONFIGURATION
[network]
; main interface, can be: http, websocket, uart (for LoRa via Lopy4)
main_interface=websocket
; alternative network interface (can be empty or any values supported by the main interface, but should be different)
; will be used is the first option is down
alt_interface=

[network.uart]
; UART device path
device=/dev/ttyACM0
; UART bauds speed
speed=115200 
; UART Update frequency (time between status updates (seconds))
time_between_send=10
; Add latency (ms)
latency=0

[network.http]
; platform endpoint
host=localhost 
port=5000
; requests timeout (in seconds)
timeout=5
; HTTP Update Frequency 
time_between_send=0.5
; Add latency (ms)
latency=0

[network.websocket]
host=localhost
port=5001
; Websocket Update Frequency
time_between_send=0.5
; Websocket receive timeout (in seconds)
timeout=1
; Add latency (ms)
latency=0